<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杰仔的博客</title>
  
  <subtitle>回忆是一条没有尽头的路</subtitle>
  <link href="http://jiezai.online/atom.xml" rel="self"/>
  
  <link href="http://jiezai.online/"/>
  <updated>2021-07-24T09:43:21.028Z</updated>
  <id>http://jiezai.online/</id>
  
  <author>
    <name>Jie Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack</title>
    <link href="http://jiezai.online/2021/07/24/webpack/"/>
    <id>http://jiezai.online/2021/07/24/webpack/</id>
    <published>2021-07-24T06:50:31.000Z</published>
    <updated>2021-07-24T09:43:21.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>1、拆分配置和merge</p><p>smart：合并webpack配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; smart &#125; &#x3D; require(&#39;webpack&#39;)</span><br></pre></td></tr></table></figure><p>分别在dev和prod中导入base config，导出合并后的config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.base.config.js </span><br><span class="line">&#x2F;&#x2F; webpack.dev.config.js </span><br><span class="line">&#x2F;&#x2F; webpack.prod.config.js </span><br></pre></td></tr></table></figure><p>2、启用本地服务 dev server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;npm install webpack-dev-server</span><br><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">script: &#123;</span><br><span class="line">dev: &#39;webpack-dev-server --config webpack.dev.config.js&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.dev.config.js</span><br><span class="line">devServer:&#123;</span><br><span class="line">port: 8080,</span><br><span class="line">progress: true, &#x2F;&#x2F;显示进度条</span><br><span class="line">contentBase: distPath, &#x2F;&#x2F;根目录</span><br><span class="line">open: true, &#x2F;&#x2F;自动打开浏览器</span><br><span class="line">compress: true, &#x2F;&#x2F;启动gzip压缩</span><br><span class="line">&#x2F;&#x2F;设置代理</span><br><span class="line">proxy: &#123;</span><br><span class="line">  &#x2F;&#x2F;将匹配到&#x2F;api&#x2F;xxx的请求代理到http:&#x2F;&#x2F;localhost:3000&#x2F;api&#x2F;xxx</span><br><span class="line">&#39;&#x2F;api&#39;:&#39;http:&#x2F;&#x2F;localhost:3000&#39;，</span><br><span class="line">&#x2F;&#x2F;将匹配到&#x2F;api2&#x2F;xxx的请求代理到http:&#x2F;&#x2F;localhost:3000&#x2F;xxx</span><br><span class="line">&#39;&#x2F;api2&#39;:&#123;</span><br><span class="line">target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">pathRewrite: &#123;</span><br><span class="line">&#39;&#x2F;api2&#39;:&#39;&#x2F;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：webpack只能处理js和json文件</p><p>3、使用babel-loader处理ES6</p><p>需要配置babel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.base.config.js</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: &#x2F;\.js&#x2F;,</span><br><span class="line">loader: [&#39;babel-loader&#39;],</span><br><span class="line">include: srcPath,</span><br><span class="line">exclude: &#x2F;node_modules&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、处理css</p><p>loader的执行顺序是从后往前</p><ul><li>style-loader：将css代码挂载到html页面的style标签当中</li><li>css-loader：解析css文件，把css模块加载到JS代码中，并不会使用这个模块</li><li>postcss-loader：可以增加浏览器适配前缀</li><li>less-loader：解析.less文件</li></ul><p>5、处理图片</p><p>一般开发环境使用file-loader，生成环境使用url-loader</p><p>file-loader：开发环境使用，图片直接打包到根目录下</p><p>url-loader：生成环境使用，传入options，将小图片转为base64编码（减少http请求），大图片放到img目录下</p><h1 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h1><p>基本配置只能做demo，不能做线上项目</p><p>1、多入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">index: &#39;.&#x2F;src&#x2F;index&#39;,</span><br><span class="line">other: &#39;.&#x2F;src&#x2F;other&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">filename: &#39;[name].[contentHash:8].js&#39;,</span><br><span class="line">path: &#39;.&#x2F;dist&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HtmlWebpackPlugin 需要生成多个实例，分别对应多个入口，并且参数chunks只引入该入口的对应的js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">filename: &#39;index&#39;,</span><br><span class="line">chunks: [&#39;index&#39;]</span><br><span class="line">&#125;)</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &#39;.&#x2F;src&#x2F;other.html&#39;,</span><br><span class="line">filename: &#39;other&#39;,</span><br><span class="line">chunks: [&#39;other&#39;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、抽离css文件</p><p>避免将css插入到style标签中，而是通过link引入css文件</p><p>使用MiniCssExtractPlugin，将style-loader 替换为MiniCssExtractPlugin.loader</p><p>在plugin中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new MiniCssExtractPlugin &#123;</span><br><span class="line">filename: &#39;css&#x2F;main.[contentHash:8].css&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压缩css</p><p>在optimization中使用minimizer</p><p>3、抽离公共代码，第三方模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">chunks: &#39;all&#39;,&#x2F;&#x2F;全部</span><br><span class="line">cacheGroups: &#123;</span><br><span class="line">&#x2F;&#x2F; 第三方模块</span><br><span class="line">vendor: &#123;</span><br><span class="line">name: &#39;vendor&#39;,&#x2F;&#x2F; chunk 名称</span><br><span class="line">priority: 1, &#x2F;&#x2F; 权限更高，优先抽离</span><br><span class="line">test: &#39;&#x2F;node_modules&#x2F;&#39;, &#x2F;&#x2F; 匹配</span><br><span class="line">minSize: 0, &#x2F;&#x2F; 大小限制，太小不抽取</span><br><span class="line">minChunks:1 &#x2F;&#x2F; 最少复用几次</span><br><span class="line">&#125;,</span><br><span class="line">common: &#123;</span><br><span class="line">&#x2F;&#x2F;公共模块</span><br><span class="line">name: &#39;common&#39;,</span><br><span class="line">priority: 0,</span><br><span class="line">minSize: 0,</span><br><span class="line">minChunks: 2</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new HtmlWebpackPlugin中的chunk需要引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunks:[&#39;index&#39;,&#39;vendor&#39;,&#39;common&#39;]</span><br></pre></td></tr></table></figure><p>4、懒加载</p><p>​    异步代码中import js</p><p>5、Babel</p><p>​    vue-loader</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>module：各个源码文件，一切皆模块</li><li>chunk：多模块合并成的</li><li>bundle：最终的输出文件</li></ul><h1 id="webpack性能优化"><a href="#webpack性能优化" class="headerlink" title="webpack性能优化"></a>webpack性能优化</h1><h2 id="构建速度"><a href="#构建速度" class="headerlink" title="构建速度"></a>构建速度</h2><ul><li>优化bael-loader：开启缓存，明确范围（include, exclude）</li><li>IgnorePlugin：忽略第三方包指定目录，让这些指定目录不要被打包进去</li><li>noParse：不去解析属性值代表的库的依赖（比如打包的时候依赖了三方库（jquyer、lodash）等，而这些三方库里面没有其他依赖，可以通过配置noParse不去解析文件，提高打包效率）</li><li>happyPack：多进程打包</li><li>ParallelUglifyPlugin：多进程，并行压缩输出的 JS 代码</li><li>自动刷新</li><li>热更新</li><li>DLLPlugin：把第三方库代码分离开，并且每次文件更改的时候，它只会打包该项目自身的代码。所以打包速度会更快</li></ul><h2 id="产出代码"><a href="#产出代码" class="headerlink" title="产出代码"></a>产出代码</h2><ul><li>小图片base64编码</li><li>bundle加hash，命中缓存</li><li>懒加载</li><li>提取公共代码</li><li>CDN</li><li>使用production<ul><li>代码压缩</li><li>删除调试代码</li><li>Tree-Shaking</li></ul></li><li>scope hosting</li></ul><h1 id="ES6-Module-Commonjs"><a href="#ES6-Module-Commonjs" class="headerlink" title="ES6 Module Commonjs"></a>ES6 Module Commonjs</h1><p>ES6 Module 静态引入，编译时引入</p><p>Commonjs 动态引入，执行时引入</p><p>所以esm可以实现Tree-Shaking</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>前端为何要进行打包和构建<ul><li>体积更小，加载更快</li><li>编译高级语言和语法</li><li>兼容性和错误提示</li><li>统一、高效的开发环境</li><li>统一的构建流程和产出标准</li><li>集成构建规范（提测、上线）</li></ul></li><li>loader和plugin<ul><li>loader模块转换器</li><li>plugin扩展插件</li></ul></li><li>Babel 和 webpack<ul><li>语法编译</li><li>打包构建工具</li></ul></li><li>如何产出一个lib</li><li>懒加载</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h1&gt;&lt;p&gt;1、拆分配置和merge&lt;/p&gt;
&lt;p&gt;smart：合并webpack配置&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="webpack" scheme="http://jiezai.online/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://jiezai.online/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue TDD</title>
    <link href="http://jiezai.online/2021/06/26/Vue-TDD/"/>
    <id>http://jiezai.online/2021/06/26/Vue-TDD/</id>
    <published>2021-06-26T06:30:35.000Z</published>
    <updated>2021-06-26T09:14:27.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h1><p>Test Driver Development </p><p>Red-Green Development</p><p>测试驱动开发</p><ol><li>编写测试用例</li><li>运行测试用例，此时无法通过</li><li>编写代码，使测试用例通过</li><li>优化代码，完成开发</li></ol><p>优势</p><ul><li>长期减少回归bug</li><li>提高代码质量</li><li>测试覆盖率高</li><li>减少错误的测试代码</li></ul><h1 id="Vue-Test-Utils"><a href="#Vue-Test-Utils" class="headerlink" title="Vue Test Utils"></a>Vue Test Utils</h1><p><a href="https://vue-test-utils.vuejs.org/zh/">Vue Test Utils</a></p><blockquote><p>和 mount 一样，创建一个包含被挂载和渲染的 Vue 组件的 Wrapper，不同的是被存根的子组件。</p></blockquote><blockquote><p>Vue Test Utils 允许你通过 shallowMount 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;HelloWorld.vue&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;renders props.msg when passed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&#x27;new message&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(HelloWorld, &#123;</span><br><span class="line">      propsData: &#123; msg &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    expect(wrapper.text()).toMatch(msg)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TDD&quot;&gt;&lt;a href=&quot;#TDD&quot; class=&quot;headerlink&quot; title=&quot;TDD&quot;&gt;&lt;/a&gt;TDD&lt;/h1&gt;&lt;p&gt;Test Driver Development &lt;/p&gt;
&lt;p&gt;Red-Green Development&lt;/p&gt;
&lt;p&gt;测试驱动开</summary>
      
    
    
    
    <category term="Jest" scheme="http://jiezai.online/categories/Jest/"/>
    
    
    <category term="vue" scheme="http://jiezai.online/tags/vue/"/>
    
    <category term="Vue" scheme="http://jiezai.online/tags/Vue/"/>
    
    <category term="jest" scheme="http://jiezai.online/tags/jest/"/>
    
  </entry>
  
  <entry>
    <title>Jest 进阶</title>
    <link href="http://jiezai.online/2021/06/18/Jest-%E8%BF%9B%E9%98%B6/"/>
    <id>http://jiezai.online/2021/06/18/Jest-%E8%BF%9B%E9%98%B6/</id>
    <published>2021-06-18T09:28:43.000Z</published>
    <updated>2021-06-26T06:29:00.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h1><p>toMatchSnapshot：将参数与快照进行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> generateConfig = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        server: <span class="string">&#x27;http://localhost&#x27;</span>,</span><br><span class="line">        port: <span class="number">8000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; generateConfig &#125; <span class="keyword">from</span> <span class="string">&quot;./demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test generateConfig&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// expect(generateConfig()).toEqual(&#123;</span></span><br><span class="line">    <span class="comment">//     server: &#x27;http://localhost&#x27;,</span></span><br><span class="line">    <span class="comment">//     port: 8000</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    expect(generateConfig()).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行测试时，如果与上一次执行时记录的快照不匹配则会失败</p><p>可以通过更新快照解决</p><p>常用于配置文件与UI组件的测试</p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>正常调用定时器，不会执行到callback的调用</p><p>因为测试代码已经执行完了，callback已经交给了环境</p><h2 id="done"><a href="#done" class="headerlink" title="done"></a>done</h2><p>正常执行定时器，done表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> timer = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cb()</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;test timer&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    timer(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        expect(<span class="number">1</span>).toBe(<span class="number">1</span>)</span><br><span class="line">        done()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>加上done 表示等待，jest 在执行单元测试的时候，如果它看到一个测试用例(test) 的第二个函数参数有一个done参数， 它就知道，这个测试用例，执行完最后一行代码的时候，还不算测试完成，还要等待，等待done函数的执行，只有done函数执行了，这个测试用例才算完成</p><h2 id="useFakeTimers-runAllTimers"><a href="#useFakeTimers-runAllTimers" class="headerlink" title="useFakeTimers + runAllTimers"></a>useFakeTimers + runAllTimers</h2><p>模拟定时器，不需要等待</p><ul><li>使用<code>jest.useFakeTimers()</code>声明使用虚拟的时间</li><li>再使用 <code>jest.runAllTimers()</code> 将全部定时器立即运行结束</li><li>如果内部有多个定时器，只想运行一个定时器可以使用<code>jest.runOnlyPendingTimers()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jest.useFakeTimers();</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test timer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn()</span><br><span class="line">    timer(fn)</span><br><span class="line">    jest.runAllTimers()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="useFakeTimers-advanceTimersByTime"><a href="#useFakeTimers-advanceTimersByTime" class="headerlink" title="useFakeTimers + advanceTimersByTime"></a>useFakeTimers + advanceTimersByTime</h2><p>立即设置推后多少毫秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jest.useFakeTimers();</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test timer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn()</span><br><span class="line">    timer(fn)</span><br><span class="line">    <span class="comment">// jest.runAllTimers()</span></span><br><span class="line">    jest.advanceTimersByTime(<span class="number">3000</span>)</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="对Class的测试"><a href="#对Class的测试" class="headerlink" title="对Class的测试"></a>对Class的测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Util</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.test.js</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> util = <span class="literal">null</span></span><br><span class="line">beforeAll(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    util = <span class="keyword">new</span> Util()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test util function a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(util.a()).toBe(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在单元测试中 我们更应该关注函数是否被调用 而不是函数中的复杂方法</p><p>因此使用 mock 方法来进行测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// classDemo.js</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> demoFunction = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> util = <span class="keyword">new</span> Util()</span><br><span class="line">    util.a()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demoFunction</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// classDemo.test.js</span></span><br><span class="line">jest.mock(<span class="string">&#x27;./util&#x27;</span>) <span class="comment">// jest.mock 类的话，会自动把类的构造函数和方法变成jest.fn() 不是真正地需要执行类中复杂的方法</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> demoFunction <span class="keyword">from</span> <span class="string">&quot;./classDemo&quot;</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test demoFunction&#x27;</span>,<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    demoFunction()</span><br><span class="line">    expect(Util).toHaveBeenCalled()</span><br><span class="line">    <span class="comment">// console.log(Util.mock.instances[0])</span></span><br><span class="line">    expect(Util.mock.instances[<span class="number">0</span>].a).toHaveBeenCalled()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动模拟类，自定义类的方法实现 /__mocks__/util.js</span></span><br><span class="line"><span class="keyword">const</span> Util = jest.fn()</span><br><span class="line">Util.prototype.a = jest.fn(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">Util.prototype.b = jest.fn()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Util</span><br></pre></td></tr></table></figure><h1 id="对DOM的测试"><a href="#对DOM的测试" class="headerlink" title="对DOM的测试"></a>对DOM的测试</h1><p>jest在node环境下模拟了一套DOM的api，可以直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).append(<span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo.test.js</span></span><br><span class="line"><span class="keyword">import</span> appendDiv <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;在 body 中添加 1 个 div&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  addDivToBody()</span><br><span class="line">  expect($(<span class="string">&#x27;body&#x27;</span>).find(<span class="string">&#x27;div&#x27;</span>).length).toBe(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快照&quot;&gt;&lt;a href=&quot;#快照&quot; class=&quot;headerlink&quot; title=&quot;快照&quot;&gt;&lt;/a&gt;快照&lt;/h1&gt;&lt;p&gt;toMatchSnapshot：将参数与快照进行匹配&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="Jest" scheme="http://jiezai.online/categories/Jest/"/>
    
    
    <category term="Jest" scheme="http://jiezai.online/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>Jest 入门</title>
    <link href="http://jiezai.online/2021/06/18/Jest-%E5%85%A5%E9%97%A8/"/>
    <id>http://jiezai.online/2021/06/18/Jest-%E5%85%A5%E9%97%A8/</id>
    <published>2021-06-18T06:30:02.000Z</published>
    <updated>2021-06-18T09:28:42.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p><a href="https://www.jestjs.cn/docs/getting-started">Jest</a></p><p>安装<code>Jest</code>以及<code>babel</code></p><p><code>Jest</code>配置项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest</span><br><span class="line">npm install @babel/core @babel/preset-env</span><br><span class="line">npx jest --init</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./sum&quot;</span>;</span><br><span class="line">test(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grmh2c20yyj311k0f4jtz.jpg" alt="image-20210618155426491"></p><h1 id="matchers"><a href="#matchers" class="headerlink" title="matchers"></a>matchers</h1><p>Jest使用匹配器以不同的方式测试数据是否相等</p><p>在sum.test.js中</p><ul><li><code>test</code> ：测试用例，接受两个参数，第一个是测试的名称，第二个是函数</li><li><code>expect</code>：期望</li><li><code>toBe</code>：匹配器，用于匹配expect的值是否和匹配器中的值相等</li></ul><h2 id="Common-Matchers"><a href="#Common-Matchers" class="headerlink" title="Common Matchers"></a>Common Matchers</h2><ul><li><code>toBe</code>：相对于 <code>===</code> 和 <code>Object.is</code>，匹配值（不能用于测试浮点数）</li><li><code>toEqual</code>：匹配值，可以用于引用类型的匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;two plus two is four&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="number">2</span> + <span class="number">2</span>).toBe(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line">test(<span class="string">&#x27;object assignment&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;<span class="attr">one</span>: <span class="number">1</span>&#125;;</span><br><span class="line">  data[<span class="string">&#x27;two&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">  expect(data).toEqual(&#123;<span class="attr">one</span>: <span class="number">1</span>, <span class="attr">two</span>: <span class="number">2</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Truthiness"><a href="#Truthiness" class="headerlink" title="Truthiness"></a>Truthiness</h2><p>当需要判断<code>undefined</code>，<code>null</code>和<code>false</code>时</p><ul><li><code>toBeNull</code> ：只匹配<code>null</code></li><li><code>toBeUndefined</code> ：只匹配<code>undefined</code></li><li><code>toBeDefined</code> ：匹配已定义的值，与<code>toBeUndefined</code>相反</li><li><code>toBeTruthy</code>：匹配所有结果为<code>true</code>的值，相对于 <code>==</code></li><li><code>toBeFalsy</code> ：匹配所有结果为false的值，相对于 <code>==</code></li><li><code>not</code>：对后续的匹配取反</li></ul><h2 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h2><ul><li><code>toBeGreaterThan</code></li><li><code>toBeGreaterThanOrEqual</code></li><li><code>toBeLessThan</code></li><li><code>toBeLessThanOrEqual</code></li><li><code>toBe</code></li><li><code>toEqual</code></li><li><code>toBeCloseTo</code></li></ul><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><ul><li><code>toMatch</code>：检查字符串是否匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;test toMatch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">  expect(str).toMatch(<span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">  expect(str).toMatch(<span class="regexp">/[a-z]/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Arrays-and-iterables"><a href="#Arrays-and-iterables" class="headerlink" title="Arrays and iterables"></a>Arrays and iterables</h2><ul><li><code>toContain</code>：匹配数组/Set/字符串中是否包含item</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shoppingList = [</span><br><span class="line">  <span class="string">&#x27;diapers&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;kleenex&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;trash bags&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;paper towels&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;milk&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;the shopping list has milk on it&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(shoppingList).toContain(<span class="string">&#x27;milk&#x27;</span>);</span><br><span class="line">  expect(<span class="keyword">new</span> <span class="built_in">Set</span>(shoppingList)).toContain(<span class="string">&#x27;milk&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p><a href="https://www.jestjs.cn/docs/expect">https://www.jestjs.cn/docs/expect</a></p><h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><ul><li><code>beforeAll</code>：所有测试之前执行</li><li><code>afterAll</code>：所有测试执行完之后</li><li><code>beforeEach</code>：每个测试实例之前执行</li><li><code>afterEach</code>：每个测试实例完成之后执行</li></ul><h2 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h2><p>describe创造一个块，可以将多个测试用例放在一个块中</p><p>每个块中也可以使用钩子函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - beforeAll&#x27;</span>));</span><br><span class="line">afterAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - afterAll&#x27;</span>));</span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - beforeEach&#x27;</span>));</span><br><span class="line">afterEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - afterEach&#x27;</span>));</span><br><span class="line">test(<span class="string">&#x27;&#x27;</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - test&#x27;</span>));</span><br><span class="line">describe(<span class="string">&#x27;Scoped / Nested block&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - beforeAll&#x27;</span>));</span><br><span class="line">  afterAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - afterAll&#x27;</span>));</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - beforeEach&#x27;</span>));</span><br><span class="line">  afterEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - afterEach&#x27;</span>));</span><br><span class="line">  test(<span class="string">&#x27;&#x27;</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - test&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不在钩子函数或者测试用例中的代码，会被最先执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;outer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;describe outer-a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">&#x27;describe inner 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;describe inner 1&#x27;</span>);</span><br><span class="line">    test(<span class="string">&#x27;test 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;test for describe inner 1&#x27;</span>);</span><br><span class="line">      expect(<span class="literal">true</span>).toEqual(<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;describe outer-b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">&#x27;test 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test for describe outer&#x27;</span>);</span><br><span class="line">    expect(<span class="literal">true</span>).toEqual(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">&#x27;describe inner 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;describe inner 2&#x27;</span>);</span><br><span class="line">    test(<span class="string">&#x27;test for describe inner 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;test for describe inner 2&#x27;</span>);</span><br><span class="line">      expect(<span class="literal">false</span>).toEqual(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;describe outer-c&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// describe outer-a</span></span><br><span class="line"><span class="comment">// describe inner 1</span></span><br><span class="line"><span class="comment">// describe outer-b</span></span><br><span class="line"><span class="comment">// describe inner 2</span></span><br><span class="line"><span class="comment">// describe outer-c</span></span><br><span class="line"><span class="comment">// test for describe inner 1</span></span><br><span class="line"><span class="comment">// test for describe outer</span></span><br><span class="line"><span class="comment">// test for describe inner 2</span></span><br></pre></td></tr></table></figure><h2 id="test-only"><a href="#test-only" class="headerlink" title="test.only"></a>test.only</h2><p>只执行单个测试用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test.only(<span class="string">&#x27;this will be the only test that runs&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="literal">true</span>).toBe(<span class="literal">false</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;this test will not run&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="string">&#x27;A&#x27;</span>).toBe(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runCallback.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">runCallback</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runCallback.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;runCallback&#125; <span class="keyword">from</span> <span class="string">&#x27;./runCallback.js&#x27;</span></span><br><span class="line">test(<span class="string">&#x27;test runCallback&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> func = jest.fn() <span class="comment">// mock函数，捕获函数的调用</span></span><br><span class="line">  func.mockReturnValueOnce(<span class="string">&#x27;dell&#x27;</span>)</span><br><span class="line">  runCallback(func)</span><br><span class="line">  runCallback(func)</span><br><span class="line">  runCallback(func)</span><br><span class="line">  expect(func).toBeCalled()</span><br><span class="line">  expect(func.mock.calls.length).toBe(<span class="number">3</span>)</span><br><span class="line">  expect(func.mock.results[<span class="number">0</span>].value).toBe(<span class="string">&#x27;dell&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>jest.fn()：这里使用jest模拟一个函数，可以传入一个函数生成带逻辑的函数</li><li>mockReturnValueOnce(：设置调用一次函数的返回值，设置几个就是几次</li><li>mockReturnValue：设置调用函数的返回值</li><li>mock 每个jest生成的函数都有mock属性，包含<ul><li>calls：每次调用函数的参数</li><li>instances：每次调用函数的this</li><li>invocationCallOrder：函数执行顺序</li><li>results：每次调用的返回值</li></ul></li></ul><h1 id="模拟接口"><a href="#模拟接口" class="headerlink" title="模拟接口"></a>模拟接口</h1><p>jest.mock(‘axios’)模拟axios请求数据，不会发送真实请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">jest.mock(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;测试 getData，使用mock&#x27;</span>, <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="comment">// 模拟第一次接收到的数据</span></span><br><span class="line">  axios.get.mockResolvedValueOnce(&#123;</span><br><span class="line">    data: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 模拟每一次接收到的数据</span></span><br><span class="line">  axios.get.mockResolvedValue(&#123;</span><br><span class="line">    data: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> getData()</span><br><span class="line">  expect(data1).toBe(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  expect(data2).toBe(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.jestjs.cn/docs/getting-started&quot;&gt;Jest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安</summary>
      
    
    
    
    <category term="Jest" scheme="http://jiezai.online/categories/Jest/"/>
    
    
    <category term="Jest" scheme="http://jiezai.online/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 11 盛最多水的容器</title>
    <link href="http://jiezai.online/2021/05/24/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://jiezai.online/2021/05/24/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2021-05-24T02:21:03.000Z</published>
    <updated>2021-05-24T09:51:33.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h1><p><a href="https://leetcode-cn.com/problems/container-with-most-water/">题目链接</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqtaz4s1soj30u00wmwja.jpg" alt="image-20210524102222093"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>两层循环的时间复杂度O(n^2)会超时</p><p>因为面积 = 长 * 宽，长是两个高度中较小的值，所以，从左右两端开始，只有当高度增大时，面积才会增大</p><p>只需要选择正确的高度，指针前进即可</p><p>这样就减少了不必要的遍历</p><p>所以用双指针，将其降为O(n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> len = height.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, j = len - <span class="number">1</span>; i &lt; j;) &#123;</span><br><span class="line">        <span class="keyword">let</span> currHeight = height[i] &lt; height[j] ? height[i++] : height[j--]</span><br><span class="line">        max = <span class="built_in">Math</span>.max(currHeight * (j-i+<span class="number">1</span>),max)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;盛最多水的容器&quot;&gt;&lt;a href=&quot;#盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;盛最多水的容器&quot;&gt;&lt;/a&gt;盛最多水的容器&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/containe</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://jiezai.online/2021/05/17/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://jiezai.online/2021/05/17/%E8%B7%A8%E5%9F%9F/</id>
    <published>2021-05-17T02:28:59.000Z</published>
    <updated>2021-05-19T08:50:22.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">MDN 同源策略</a></p><p><strong>浏览器的同源策略一直是开发中经常遇到的问题,它是浏览器最核心也是最基本的安全功能,如果缺少了同源策略,则浏览器的正常功能都会受到影响</strong></p><p>域名、协议、端口相同则为同源</p><p>这个策略可以阻止一个页面上的恶意脚本通过页面的DOM对象获得访问另一个页面上敏感信息的权限</p><p>是为了保护用户的信息安全,为了防止恶意网站窃取用户在浏览器上的数据,如果<code>不是同源</code>的站点,将不能进行如下操作 :</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读写</li><li>DOM 和 Js对象无法获得</li><li>AJAX请求不能发送</li></ul><p>出现跨域请求时,请求会发到跨域的服务器,并且会服务器会返回数据,只不过浏览器”拒收”返回的数据</p><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>前端调用的后端接口不属于同一个域（域名或端口不同），就会产生跨域问题，也就是说应用访问了该应用域名或端口之外的域名或端口。</p><h1 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h1><ul><li>浏览器解除跨域限制</li><li>JSONP</li><li>服务端修改</li></ul><h2 id="浏览器解除跨域限制"><a href="#浏览器解除跨域限制" class="headerlink" title="浏览器解除跨域限制"></a>浏览器解除跨域限制</h2><p>浏览器默认都是开启跨域安全检查的，我们可以使用命令行启动浏览器，加上禁止安全检查的参数</p><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域</p><p>JSONP 的工作原理是什么？ - 贺师俊的回答 - 知乎 <a href="https://www.zhihu.com/question/19966531/answer/13502030">https://www.zhihu.com/question/19966531/answer/13502030</a></p><p>缺点：</p><ul><li>只支持GET方式</li><li>需要服务端配合修改</li><li>发送的不是 XHR 请求，无法使用 XHR 对象</li></ul><h2 id="服务端修改"><a href="#服务端修改" class="headerlink" title="服务端修改"></a>服务端修改</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>Cross-Origin Resource Sharing</p><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">阮一峰 cors</a></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>跨域只是浏览器向服务器发送请求的时候，浏览器的限制。而服务器和服务器之间是没有跨域的限制的。</p><p>反向代理是利用代理服务器接收到请求之后，转发给真正的服务器，并把结果返回到浏览器上。</p><p>vue中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;^/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;http://localhost:8082/&#x27;</span> <span class="comment">// api server</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web安全</title>
    <link href="http://jiezai.online/2021/05/14/Web%E5%AE%89%E5%85%A8/"/>
    <id>http://jiezai.online/2021/05/14/Web%E5%AE%89%E5%85%A8/</id>
    <published>2021-05-14T03:39:38.000Z</published>
    <updated>2021-05-14T08:46:19.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h1><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Cross Site Script，跨站脚本攻击</p><p> XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的</p><p>例子：</p><p>留言板，正常网页需要展示用户的留言，如果留言内容是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(“hey!you are attacked”)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么网页解析到这条留言时，就会执行这段js代码</p><p>危害：</p><ul><li><strong>窃取网页浏览中的cookie值</strong></li><li><strong>劫持流量实现恶意跳转</strong></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><strong>反射型XSS</strong>：是指xss代码在请求的url中，而后提交到服务器，服务器解析后，XSS代码随着响应内容一起传给客户端进行解析执行。（直接反射显示在页面）</li><li><strong>存储型XSS</strong>：具有攻击性的脚本被保存到了服务器端（数据库，内存，文件系统）并且可以被普通用户完整的从服务的取得并执行，从而获得了在网络上传播的能力。（这种攻击多见于论坛、博客和留言板，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的被存放在服务器的后端存储器中。当其它用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行）</li><li><strong>DOM型XSS</strong>：使用DOM可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式；DOM型XSS是一种特殊类型的反射型XSS，是基于DOM文档对象模型的一种漏洞</li></ul><h2 id="XSS防范"><a href="#XSS防范" class="headerlink" title="XSS防范"></a>XSS防范</h2><ul><li>编码：对用户输入的数据进行HTML Entity 编码。把字符转换成 转义字符。Encode的作用是将$var等一些字符进行转化，使得浏览器在最终输出结果上是一样的</li><li>过滤：将用户数据输出到html 标签的属性时，必须经过标签属性的转义。注意：不包含href, src, style和事件处理函数属性（比如onmouseover）</li><li>校正：避免直接对HTML Entity进行解码。使用DOM Parse转换，校正不配对的DOM标签</li><li>HttpOnly：防止直接拿到cookie</li></ul><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>Cross-site request forgery 跨站请求伪造</p><p>也被称为One Click Attack或者session riding，通常缩写为CSRF或者XSRF</p><p>挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><p>例子：</p><ol><li>用户Alice登录和访问某银行网站A，保留<code>cookie</code>。</li><li>Alice被某些信息诱导访问危险网站B。</li><li>危险网站B上有一个<code>&lt;img&gt;</code>标签：<code>&lt;img src=&quot;http://www.examplebank.com/account=Alice&amp;amount=1000&amp;payfor=Badman&quot;&gt;</code></li><li>这个标签的src不指向一张图片，而是一个http请求，这个请求向银行要求将Alice的1000元转给Badman，由于Alice的浏览器上有<code>cookie</code>，这样浏览器发出的这个请求就能得到响应执行。</li><li>这样Alice的钱就被偷了。</li></ol><h1 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h1><ul><li>验证码</li><li>请求来源限制：通过HTTP Referer字段，验证请求来源地址是否合法</li><li>token：服务端发送token，前端解析出token放到请求中，服务端验证token是否正确</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web安全&quot;&gt;&lt;a href=&quot;#Web安全&quot; class=&quot;headerlink&quot; title=&quot;Web安全&quot;&gt;&lt;/a&gt;Web安全&lt;/h1&gt;&lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端缓存</title>
    <link href="http://jiezai.online/2021/05/13/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/"/>
    <id>http://jiezai.online/2021/05/13/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/</id>
    <published>2021-05-13T03:54:31.000Z</published>
    <updated>2021-05-13T08:56:53.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端缓存"><a href="#前端缓存" class="headerlink" title="前端缓存"></a>前端缓存</h1><p>资源的缓存机制是提高资源使用效率的有效方法</p><p>缓存是性能优化中的简单高效的一种方式，一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqgo0x3wu7j30q60h840a.jpg" alt="未命名文件"></p><h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">MDN Cookies</a></p><p>HTTP协议是无状态的，而服务端的业务必须是要有状态的。Cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用</p><p>Cookie格式就是一系列的键值对</p><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><p>基于安全性考虑，一个网页的Cookie只能被该域下的网页访问（可以设置作用域，允许发送）</p><ul><li>会话型：保存在内存中，浏览器退出时被清除</li><li>持续型：有一个有效期，在有效期内，每次访问Cookie所属域时，都将Cookie发送给服务端</li></ul><p>限制访问：secure与HttpOnly</p><h3 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h3><p>WebStorage是HTML新增的本地存储解决方案之一</p><p>WebStorage提供两种类型的API：localStorage和sessionStorage</p><p>localStorage在本地永久性存储数据，除非显式将其删除或清空</p><p>sessionStorage存储的数据只在会话期间有效，关闭浏览器则自动删除</p><ul><li><code>sessionStorage</code> 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</li><li><code>localStorage</code> 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li></ul><p>WebStorage一般浏览器提供5M的存储空间</p><p>当前页面使用的storage被其他页面修改时会触发StorageEvent事件</p><h3 id="WebSql"><a href="#WebSql" class="headerlink" title="WebSql"></a>WebSql</h3><p>Web SQL 是在浏览器上模拟数据库，可以使用 JS 来操作 SQL 完成对数据的读写。</p><p>Web SQL 数据库 API 并不是 HTML5 规范的一部分，但是它是一个独立的规范，引入了一组使用 SQL 操作客户端数据库的 APIs</p><p>对于简单的数据，使用sessionStorage和localStorage能够很好地完成存取，但是对于处理复杂的关系型数据，它就力不从心了。这时必须选用websql或者IndexedDB。</p><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））。该 API 使用索引实现对数据的高性能搜索</p><h3 id="Application-Cache"><a href="#Application-Cache" class="headerlink" title="Application Cache"></a>Application Cache</h3><p>HTML5 引入了应用程序缓存（Application Cache），这意味着可对 web 应用进行缓存，并可在没有因特网连接时进行访问</p><ul><li>离线浏览 - 用户可在应用离线时使用它们</li><li>速度 - 已缓存资源加载得更快</li><li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源</li></ul><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><p>PWA全称Progressive Web App，即渐进式WEB应用</p><p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能</p><ul><li>可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏</li><li>实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能</li><li>实现了消息推送</li></ul><p>这些特性将使得 Web 应用渐进式接近原生 App</p><h2 id="BFCache"><a href="#BFCache" class="headerlink" title="BFCache"></a>BFCache</h2><p>往返缓存Back/Forward cache</p><p>是浏览器在前进后退按钮上为了提升历史页面的渲染速度的一种策略。</p><p>该策略具体表现为，当用户前往新页面时，将当前页面的浏览器DOM状态保存到bfcache中；当用户点击后退按钮的时候，将页面直接从bfcache中加载，节省了网络请求的时间</p><h1 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h1><p>基于HTTP协议</p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>浏览器在发起http请求前首先检查的就是强制缓存</p><p>强制缓存的含义是，当客户端请求后，会先访问缓存数据库看缓存是否存在。如果存在则直接返回；不存在则请求真的服务器，响应后再写入缓存数据库</p><p><strong>强制缓存直接减少请求数，是提升最大的缓存策略</strong></p><p>相关的字段是Expires和Cache-Control</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>这是 HTTP 1.0 的字段，表示缓存到期时间，是一个绝对的时间 (当前时间+缓存时间，服务器时间)</p><p>在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求</p><p>缺点：</p><ul><li>是服务器的绝对时间，由于客户端时间被修改或者时差、误差等造成时间不一致，无法命中强缓存</li><li>写法复杂</li></ul><h2 id="Cache-control"><a href="#Cache-control" class="headerlink" title="Cache-control"></a>Cache-control</h2><p>在HTTP/1.1中，增加了一个字段Cache-control，该字段表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求</p><p><strong>Cache-control 的优先级高于 Expires</strong>，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段我们都会设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max-age&#x3D;&lt;seconds&gt;</span><br></pre></td></tr></table></figure><p>设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与<code>Expires</code>相反，时间是相对于请求的时间（客户端）。</p><ul><li><code>max-age</code>：最大有效时间</li><li><code>must-revalidate</code>：如果超过了 <code>max-age</code> 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。</li><li><code>no-cache</code>：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。</li><li><code>no-store</code>: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比。</li><li><code>public</code>：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)</li><li><code>private</code>：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值</li></ul><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>当强制缓存失效(超过规定时间)时，就需要使用对比缓存，由服务器决定缓存内容是否失效</p><p>浏览器会在请求头中携带缓存的tag向服务器发起请求，服务器根据该tag值去判断是否使用缓存，其中tag字段分别为Last-Modified和Etag</p><h3 id="Last-Modified-amp-If-Modified-Since"><a href="#Last-Modified-amp-If-Modified-Since" class="headerlink" title="Last-Modified &amp; If-Modified-Since"></a>Last-Modified &amp; If-Modified-Since</h3><ol><li>服务器通过 <code>Last-Modified</code> 字段告知客户端，资源最后一次被修改的时间，例如<br><code>Last-Modified: Mon, 10 Nov 2018 09:10:11 GMT</code></li><li>浏览器将这个值和内容一起记录在缓存数据库中。</li><li>下一次请求相同资源时时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 <code>Last-Modified</code> 的值写入到请求头的 <code>If-Modified-Since</code> 字段</li><li>服务器会将 <code>If-Modified-Since</code> 的值与 <code>Last-Modified</code> 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。</li></ol><p>缺点：</p><ul><li>如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。</li><li>如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。</li></ul><h2 id="Etag-amp-If-None-Match"><a href="#Etag-amp-If-None-Match" class="headerlink" title="Etag &amp; If-None-Match"></a>Etag &amp; If-None-Match</h2><p>为了解决上述问题，出现了一组新的字段 <code>Etag</code> 和 <code>If-None-Match</code></p><p><code>Etag</code> 存储的是文件的特殊标识(一般都是 hash 生成的)，服务器存储着文件的 <code>Etag</code> 字段。之后的流程和 <code>Last-Modified</code> 一致，只是 <code>Last-Modified</code> 字段和它所表示的更新时间改变成了 <code>Etag</code> 字段和它所表示的文件 hash，把 <code>If-Modified-Since</code> 变成了 <code>If-None-Match</code>。服务器同样进行比较，命中返回 304, 不命中返回新资源和 200。</p><p><strong>Etag 的优先级高于 Last-Modified</strong></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>对于不经常变化的资源，设置较长的过期时间</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></table></figure><p>对于经常变化的资源，设置no-cache，直接进行协商缓存</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure><h1 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h1><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端缓存&quot;&gt;&lt;a href=&quot;#前端缓存&quot; class=&quot;headerlink&quot; title=&quot;前端缓存&quot;&gt;&lt;/a&gt;前端缓存&lt;/h1&gt;&lt;p&gt;资源的缓存机制是提高资源使用效率的有效方法&lt;/p&gt;
&lt;p&gt;缓存是性能优化中的简单高效的一种方式，一个优秀的缓存策略可以缩短网</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue3+vite+ts</title>
    <link href="http://jiezai.online/2021/05/09/vue3-vite-ts/"/>
    <id>http://jiezai.online/2021/05/09/vue3-vite-ts/</id>
    <published>2021-05-09T11:46:52.000Z</published>
    <updated>2021-05-15T08:26:08.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目模版"><a href="#项目模版" class="headerlink" title="项目模版"></a>项目模版</h1><p><a href="https://github.com/Sorryjjj/vue3-template.git">vue3-template</a></p><h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><p><a href="https://cn.vitejs.dev/guide/">vite</a></p><p>创建项目模版</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create @vitejs/app vite-template --template vue-ts</span><br></pre></td></tr></table></figure><h1 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h1><p><a href="https://www.jestjs.cn/docs/getting-started">jest</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yarn add jest --dev // 安装jest</span><br><span class="line">yarn add @types/jest --dev  // jest提示</span><br><span class="line">yarn add babel-jest --dev   // babel转换</span><br><span class="line">yarn add @babel/preset-env --dev // babel预设</span><br><span class="line">yarn add vue-jest@next --dev // 解析.vue</span><br><span class="line">yarn add @vue/test-utils@next --dev // 安装vue/test-utils</span><br><span class="line">yarn add @babel/preset-typescript --dev // babel ts</span><br><span class="line">yarn add ts-jest --dev // 安装ts-test</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jest.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    transform: &#123;</span><br><span class="line">        <span class="string">&quot;^.+\\.jsx?$&quot;</span>: <span class="string">&quot;babel-jest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;^.+\\.vue?$&quot;</span>: <span class="string">&quot;vue-jest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;^.+\\.tsx?$&quot;</span>: <span class="string">&quot;ts-jest&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: &#123; <span class="attr">node</span>: <span class="string">&#x27;current&#x27;</span> &#125; &#125;], </span><br><span class="line">        <span class="string">&quot;@babel/preset-typescript&quot;</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gitHooks"><a href="#gitHooks" class="headerlink" title="gitHooks"></a>gitHooks</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add yorkie --dev</span><br><span class="line">yarn add chalk --dev</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;gitHooks&quot;: &#123;</span><br><span class="line">  &quot;pre-commit&quot;: &quot;lint-staged&quot;,</span><br><span class="line">  &quot;commit-msg&quot;: &quot;node scripts/verifyCommit.js&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">  &quot;*.&#123;ts,vue&#125;&quot;: &quot;eslint --fix&quot;,</span><br><span class="line">  &quot;*&quot;: &quot;prettier -w -u&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D eslint eslint-plugin-vue @vue/eslint-config-typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin typescript</span><br><span class="line">yarn add lint-staged</span><br><span class="line">yarn add -D prettier eslint-plugin-prettier @vue/eslint-config-prettier</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es2021: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/typescript/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/prettier&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/prettier/@typescript-eslint&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2021</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  rules: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: [</span><br><span class="line">      &#123;</span><br><span class="line">        find: <span class="string">&quot;@/&quot;</span>,</span><br><span class="line">        replacement: join(__dirname, <span class="string">&quot;src/&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目模版&quot;&gt;&lt;a href=&quot;#项目模版&quot; class=&quot;headerlink&quot; title=&quot;项目模版&quot;&gt;&lt;/a&gt;项目模版&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Sorryjjj/vue3-template.git&quot;&gt;vue3-t</summary>
      
    
    
    
    <category term="vue3" scheme="http://jiezai.online/categories/vue3/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 88 合并两个有序数组</title>
    <link href="http://jiezai.online/2021/04/27/leetcode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://jiezai.online/2021/04/27/leetcode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-04-27T09:58:43.000Z</published>
    <updated>2021-04-27T10:10:40.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">链接</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpygg2vqrkj30zc0koq5l.jpg" alt="image-20210427175910693"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>两个数组归并，使用双指针，从数组末尾开始填充</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = nums1.length - <span class="number">1</span>;</span><br><span class="line">    m--;</span><br><span class="line">    n--;</span><br><span class="line">    <span class="keyword">while</span> (m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[m] &gt; nums2[n]) &#123;</span><br><span class="line">            nums1[index] = nums1[m--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[index] = nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = m; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            nums1[index--] = nums1[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            nums1[index--] = nums2[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可以合并数组之后排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    nums1.splice(m, nums1.length - m, ...nums2);</span><br><span class="line">    nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-sorted-array/&quot;&gt;链接&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://jiezai.online/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 26 删除有序数组中的重复项</title>
    <link href="http://jiezai.online/2021/04/27/leetcode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://jiezai.online/2021/04/27/leetcode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2021-04-27T09:50:14.000Z</published>
    <updated>2021-04-27T09:57:43.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">链接</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gpyg8dnt2gj30zq08idhf.jpg" alt="image-20210427175143022"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注意给定的是有序数组，所以相同元素是连续的</p><p>快慢指针，遇到不同值则修改慢指针对应位置的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> curr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(curr &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[curr] != nums[index]) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            nums[index] = nums[curr];</span><br><span class="line">        &#125;</span><br><span class="line">        curr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一开始没注意到有序，暴力解法，两层循环删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; nums.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] == nums[i]) &#123;</span><br><span class="line">                nums.splice(j, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorte</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://jiezai.online/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 206 反转链表</title>
    <link href="http://jiezai.online/2021/04/27/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://jiezai.online/2021/04/27/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2021-04-27T02:26:58.000Z</published>
    <updated>2021-04-27T02:56:04.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gpy3g1otndj31320na43g.jpg" alt="image-20210427102918414"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>假设除第一个节点，链表的其余部分已经被反转，那么只需要处理如何反转第一个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">let</span> newHead = reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>边遍历边修改链表，需要记录前一节点与当前节点，每次反转前一节点与当前节点，之后更新两个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> curr = head;</span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(curr) &#123;</span><br><span class="line">        tmp = curr.next; <span class="comment">// 缓存下一个节点</span></span><br><span class="line">        curr.next = pre; <span class="comment">// 当前节点指向前一节点，反转当前节点</span></span><br><span class="line">        pre = curr; <span class="comment">// 更新前一节点为当前节点</span></span><br><span class="line">        curr  = tmp; <span class="comment">// 更新当前节点为下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/&quot;&gt;反转链表&lt;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="链表" scheme="http://jiezai.online/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 83 删除排序链表中的重复元素</title>
    <link href="http://jiezai.online/2021/04/25/leetcode-83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://jiezai.online/2021/04/25/leetcode-83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</id>
    <published>2021-04-25T10:44:52.000Z</published>
    <updated>2021-04-25T10:49:17.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">链接</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gpw6jmc2xdj31320py0ws.jpg" alt="image-20210425184526776"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>边遍历边删除，使用标记来记录已存在的值，保存前一个节点，需要删除的时候，将前一个节点的next指向当前节点的next即可</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> curr = head;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="keyword">new</span> ListNode();;</span><br><span class="line">    <span class="keyword">while</span>(curr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m[curr.val]) &#123;</span><br><span class="line">            pre.next = curr.next;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = curr;</span><br><span class="line">            m[curr.val] = <span class="number">1</span>;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorte</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="链表" scheme="http://jiezai.online/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 21 合并两个有序链表</title>
    <link href="http://jiezai.online/2021/04/25/leetcode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://jiezai.online/2021/04/25/leetcode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</id>
    <published>2021-04-25T10:10:47.000Z</published>
    <updated>2021-04-25T10:28:11.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw5kprdyhj30yl0u0n6x.jpg" alt="image-20210425181150836"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>使用一个指针迭代查找下一个较小的节点</p><p>注意需要保留头节点用于最后返回，以及有一个链表遍历完了，要将指针指向剩余所有</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归合并</p><p>每两个节点进行对比，将其中较小的作为返回值，之后比较其next节点与较大的节点</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode()</span><br><span class="line">    <span class="keyword">let</span> pre = head</span><br><span class="line">    <span class="keyword">while</span>(l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l1.val &lt;= l2.val) &#123;</span><br><span class="line">            pre.next = l1</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = l2</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        &#125;</span><br><span class="line">        pre = pre.next</span><br><span class="line">    &#125;</span><br><span class="line">    pre.next = l1 == <span class="literal">null</span> ? l2 : l1</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="literal">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span>(l2 == <span class="literal">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">    <span class="keyword">if</span>(l1.val &lt; l2.val) &#123;</span><br><span class="line">        l1.next = mergeTwoLists(l1.next,l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.next = mergeTwoLists(l2.next,l1);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lists/&quot;&gt;合并两</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="链表" scheme="http://jiezai.online/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 27 移除元素</title>
    <link href="http://jiezai.online/2021/04/25/leetcode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://jiezai.online/2021/04/25/leetcode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</id>
    <published>2021-04-24T17:07:06.000Z</published>
    <updated>2021-04-24T17:12:16.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/remove-element/">移除元素</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpvbzkog9oj310q0catat.jpg" alt="image-20210425010813246"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>同leetcode 283</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=val) &#123;</span><br><span class="line">            nums[index] = nums[i];</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.slice(<span class="number">0</span>,index).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-element/&quot;&gt;移除元素&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://jiezai.online/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 283 移动零</title>
    <link href="http://jiezai.online/2021/04/25/leetcode-283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
    <id>http://jiezai.online/2021/04/25/leetcode-283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</id>
    <published>2021-04-24T16:55:49.000Z</published>
    <updated>2021-04-24T17:12:15.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/move-zeroes/">移动零</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpvbnqco35j310u0hmdi1.jpg" alt="image-20210425005649844"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>两种思路，重写与删除</p><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>需要注意必须在原数组上操作，以及保持相对顺序</p><p>一趟遍历，重写数组，使用index标记当前是第几个非0元素，遇到非0时，将数组的第index位赋值为此非0元素，index++</p><p>最后将末尾全置为0</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>一趟遍历，遇到0时删除当前元素，最后将0写入数组末尾</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[index] = nums[i]</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = index; i&lt; nums.length; i++) &#123;</span><br><span class="line">        nums[i] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i != nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            nums.splice(i,<span class="number">1</span>);</span><br><span class="line">            count++;</span><br><span class="line">            i--</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        nums.push(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/move-zeroes/&quot;&gt;移动零&lt;/a&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://jiezai.online/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 485 最大连续1的个数</title>
    <link href="http://jiezai.online/2021/04/25/leetcode-485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://jiezai.online/2021/04/25/leetcode-485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2021-04-24T16:44:13.000Z</published>
    <updated>2021-04-24T17:12:13.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/max-consecutive-ones/">485 最大连续1的个数</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpvbd5dz5dj310a0hkmyv.jpg" alt="image-20210425004639272"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一趟遍历，当值为1时记录当前连续1的个数curr，遇到0时，将max与curr比大小，并将curr置为0，当遇到下一个1时重新开始记录连续1的个数</p><p>注意，到达数组最后一个元素时，还要进行一次对比，否则当最后一个元素为1时会漏掉最后一次的max</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMaxConsecutiveOnes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> curr = <span class="number">0</span></span><br><span class="line">    nums.forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(item == <span class="number">1</span>) &#123;</span><br><span class="line">            curr++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item == <span class="number">0</span> &amp;&amp; index != nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max,curr)</span><br><span class="line">            curr = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max,curr)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/max-consecutive-ones/&quot;&gt;485 最</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://jiezai.online/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>vue2 initMixin</title>
    <link href="http://jiezai.online/2021/04/24/vue2-%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <id>http://jiezai.online/2021/04/24/vue2-%E5%93%8D%E5%BA%94%E5%BC%8F/</id>
    <published>2021-04-24T14:04:04.000Z</published>
    <updated>2021-04-24T15:57:03.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir vue</span><br><span class="line">npm init -y</span><br><span class="line">npm install @babel/preset-env @babel/core rollup rollup-plugin-babel rollup-plugin-serve cross-env -D</span><br></pre></td></tr></table></figure><ul><li>rollup：打包工具</li><li>babel/core：babel核心模块</li><li>babel/preset-env：js语法转换</li><li>rollup-plugin-babel：在rollup中使用babel</li><li>rollup-plugin-serve：启用静态服务</li><li>cross-env：设置环境变量</li></ul><h1 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h1><p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码</p><p>开发应用时使用webpack，开发库时使用rollup</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global rollup</span><br></pre></td></tr></table></figure><p>假设应用程序入口起点的名称为 main.js，并且你想要所有 import 的依赖(all imports)都编译到一个名为 bundle.js 的单个文件中</p><p>对于浏览器和 Node.js</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup main.js --file bundle.js --format umd --name <span class="string">&quot;myBundle&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h3><p>除了使用 ES6 模块之外，Rollup 还静态分析代码中的 import，并将排除任何未实际使用的代码(将无用代码从最终的生成文件中删去)</p><h2 id="rollup-config-js"><a href="#rollup-config-js" class="headerlink" title="rollup.config.js"></a>rollup.config.js</h2><p>rollup配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-serve&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        format: <span class="string">&#x27;umd&#x27;</span>, <span class="comment">// amd commonjs规范  默认将打包后的结果挂载到window上</span></span><br><span class="line">        file: <span class="string">&#x27;dist/vue.js&#x27;</span>, <span class="comment">// 打包出的vue.js 文件  new Vue</span></span><br><span class="line">        name: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">        sourcemap: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        babel(&#123;</span><br><span class="line">            exclude: <span class="string">&quot;node_modules/**&quot;</span> <span class="comment">// 排除文件</span></span><br><span class="line">        &#125;),</span><br><span class="line">        serve(&#123; <span class="comment">// 开启本地服务</span></span><br><span class="line">            open: <span class="literal">true</span>,</span><br><span class="line">            openPage: <span class="string">&#x27;/public/index.html&#x27;</span>,</span><br><span class="line">            port: <span class="number">3000</span>,</span><br><span class="line">            contentBase: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;@babel&#x2F;preset-env&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;serve&quot;: &quot;rollup -c -w&quot;,</span><br><span class="line">  &quot;build:dev&quot;: &quot;rollup -c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mini-vue"><a href="#mini-vue" class="headerlink" title="mini-vue"></a>mini-vue</h1><p>从零实现vue</p><h2 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h2><p>目标结构，本文主要实现initMixin</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">├── dist</span><br><span class="line">│   ├── vue.js</span><br><span class="line">│   └── vue.js.map</span><br><span class="line">├── note.md</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── backup.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── rollup.config.js</span><br><span class="line">└── src</span><br><span class="line">    ├── compiler</span><br><span class="line">    │   ├── generator.js</span><br><span class="line">    │   ├── index.js</span><br><span class="line">    │   └── parser.js</span><br><span class="line">    ├── global-api</span><br><span class="line">    │   └── index.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── init.js</span><br><span class="line">    ├── lifecycle.js</span><br><span class="line">    ├── observer</span><br><span class="line">    │   ├── array.js</span><br><span class="line">    │   ├── dep.js</span><br><span class="line">    │   ├── index.js</span><br><span class="line">    │   ├── scheduler.js</span><br><span class="line">    │   └── watcher.js</span><br><span class="line">    ├── render.js</span><br><span class="line">    ├── state.js</span><br><span class="line">    ├── utils.js</span><br><span class="line">    └── vdom</span><br><span class="line">        ├── create-element.js</span><br><span class="line">        └── patch.js</span><br></pre></td></tr></table></figure><h2 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h2><p>入口文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只声明vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">&quot;./init&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>._init(options);  <span class="comment">// vue初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue); <span class="comment">// 给vue原型扩展方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="src-init-js"><a href="#src-init-js" class="headerlink" title="src/init.js"></a>src/init.js</h2><p>给vue原型扩展<code>_init</code>等方法，从而在index.js中可以调用<code>_init</code>初始化vue</p><p>在<code>_init</code>方法中，所有的<code>options</code>被放到了<code>vm.$options</code>中，这不仅让之后代码中可以更方便的来获取用户传入的配置项，也可以让用户通过这个<code>api</code>来获取实例化时传入的一些自定义选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init.js vue初始化</span></span><br><span class="line"><span class="keyword">import</span> &#123; initState &#125; <span class="keyword">from</span> <span class="string">&quot;./state&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原型上扩展_init方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initMixin</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Vue的内部 $options 就是创建vue实例传入的参数</span></span><br><span class="line">        <span class="keyword">const</span> vm = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// 这个options 就包含了创建实例时传入的所有属性 Vue.options</span></span><br><span class="line">        vm.$options = options;</span><br><span class="line">        <span class="comment">//初始化状态</span></span><br><span class="line">        initState(vm);<span class="comment">//分割代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="src-state-js"><a href="#src-state-js" class="headerlink" title="src/state.js"></a>src/state.js</h2><p>将构造vue实例传入的参数进行初始化</p><p>initState方法中会判断选项中传入的属性，来分别进行<code>props</code>、<code>methods</code>、<code>data</code>、<code>watch</code>、<code>computed</code> 等配置项的初始化操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化状态</span></span><br><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">&quot;./observer/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> opts = vm.$options;</span><br><span class="line">    <span class="keyword">if</span>(opts.props) &#123;</span><br><span class="line">        initProps(vm)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(opts.methods) &#123;</span><br><span class="line">        initMethods(vm)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(opts.data) &#123;</span><br><span class="line">        initData(vm)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(opts.computed) &#123;</span><br><span class="line">        initComputed(vm)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(opts.watch) &#123;</span><br><span class="line">        initWatch(vm)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProps</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMethods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="keyword">let</span> data = vm.$options.data;</span><br><span class="line">    data = vm._data = <span class="keyword">typeof</span> data === <span class="string">&quot;function&quot;</span> ? data.call(vm) : data</span><br><span class="line">    <span class="comment">// 数据劫持</span></span><br><span class="line">    observe(data); <span class="comment">//响应式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initComputed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initWatch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="src-observer"><a href="#src-observer" class="headerlink" title="src/observer"></a>src/observer</h2><p>将options中的data通过Observer类转为响应式</p><ul><li>class Observer：根据数据类型执⾏对应的响应化操作</li><li>observe()：返回⼀个Observer实例</li><li>defineReactive()：定义对象属性的getter/setter，getter负责添加依赖，setter负责通知更新</li></ul><p><code>Observer</code>类中会为对象和数组都添加<code>__ob__</code>属性，之后便可以直接通过<code>data</code>中的对象和数组<code>vm.value.__ob__</code>来获取到<code>Observer</code>实例，**<code>__ob__</code>属性要设置为不可枚举，否则之后在对象遍历时可能会引发死循环**</p><ul><li>对象：递归的为对象的每个属性都设置<code>get/set</code>方法</li><li>数组：修改数组的原型方法，对于会修改原数组的方法进行了重写</li></ul><h3 id="src-observer-index-js"><a href="#src-observer-index-js" class="headerlink" title="src/observer/index.js"></a><strong>src/observer/index.js</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject, def &#125; <span class="keyword">from</span> <span class="string">&quot;../util/index&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; arrayMethods &#125; <span class="keyword">from</span> <span class="string">&#x27;./array.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// value.__ob__ = this;</span></span><br><span class="line">        def(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="built_in">this</span>); <span class="comment">//  __ob__是响应式标记，指向本身</span></span><br><span class="line">        <span class="comment">// 观察数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.observeArray(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//观察对象</span></span><br><span class="line">            <span class="built_in">this</span>.walk(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">observeArray</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">      data.__proto__ = arrayMethods; </span><br><span class="line">      <span class="built_in">this</span>.observeArray(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">walk</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 循环处理每个属性</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> value = data[key];</span><br><span class="line">            defineReactive(data, key, value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归重写get和set</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">    observe(value); <span class="comment">//递归深度检测</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (newValue === value) <span class="keyword">return</span>;</span><br><span class="line">            observe(newValue); <span class="comment">// 观察新设置的值</span></span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把data中的数据都用Object.defineProperty重新定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isObject(data)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observer(data); <span class="comment">//观测数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="src-observer-array-js"><a href="#src-observer-array-js" class="headerlink" title="src/observer/array.js"></a>src/observer/array.js</h2><p>对数组进行响应式转化，重写数组原型方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldArrayMethods = <span class="built_in">Array</span>.prototype; <span class="comment">// 获取数组原型上的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个全新的对象 可以找到数组原型上的方法，而且修改对象时不会影响原数组的原型方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> arrayMethods = <span class="built_in">Object</span>.create(oldArrayMethods);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = [ <span class="comment">// 这七个方法都可以改变原数组</span></span><br><span class="line">    <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sort&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;reverse&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;splice&#x27;</span> </span><br><span class="line">]</span><br><span class="line">methods.forEach(<span class="function"><span class="params">method</span>=&gt;</span>&#123;</span><br><span class="line">    arrayMethods[method] = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123; <span class="comment">// 函数劫持 AOP</span></span><br><span class="line">        <span class="comment">// 当用户调用数组方法时 会先执行改造的逻辑 再执行数组默认的逻辑</span></span><br><span class="line">        <span class="keyword">const</span> ob = <span class="built_in">this</span>.__ob__;</span><br><span class="line">        <span class="keyword">let</span> result  = oldArrayMethods[method].apply(<span class="built_in">this</span>,args);</span><br><span class="line">        <span class="keyword">let</span> inserted;</span><br><span class="line">        <span class="comment">// push unshift splice 都可以新增属性  （新增的属性可能是一个对象类型）</span></span><br><span class="line">        <span class="comment">// 内部还对数组中引用类型也做了一次劫持  [].push(&#123;name:&#x27;zf&#x27;&#125;)</span></span><br><span class="line">        <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">                inserted = args</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>: <span class="comment">// 也是新增属性  可以修改 可以删除  [].splice(arr,1,&#x27;div&#x27;)</span></span><br><span class="line">                inserted = args.slice(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inserted &amp;&amp; ob.observeArray(inserted);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="src-util-index-js"><a href="#src-util-index-js" class="headerlink" title="src/util/index.js"></a>src/util/index.js</h2><p>所有的工具方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">def</span> (<span class="params">data,key,value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data,key, &#123;</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">false</span>,</span><br><span class="line">        value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="src-public-index-html"><a href="#src-public-index-html" class="headerlink" title="src/public/index.html"></a>src/public/index.html</h2><p>引入打包后的vue.js，并且构造Vue实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    foo: <span class="string">&quot;bar&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        vm._data.foo = <span class="string">&quot;aaa&quot;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="开启静态服务"><a href="#开启静态服务" class="headerlink" title="开启静态服务"></a>开启静态服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv9s02xunj30qw08cta5.jpg" alt="image-20210424235144107"></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build:dev</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpv9szoblcj30qq0a2dhn.jpg" alt="image-20210424235241424"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开发环境搭建&quot;&gt;&lt;a href=&quot;#开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;开发环境搭建&quot;&gt;&lt;/a&gt;开发环境搭建&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="Vue3" scheme="http://jiezai.online/categories/Vue3/"/>
    
    
  </entry>
  
  <entry>
    <title>vue3优化</title>
    <link href="http://jiezai.online/2021/04/19/vue3%E4%BC%98%E5%8C%96/"/>
    <id>http://jiezai.online/2021/04/19/vue3%E4%BC%98%E5%8C%96/</id>
    <published>2021-04-18T17:09:59.000Z</published>
    <updated>2021-04-19T06:32:21.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>vue2如果多个功能组合，只能使用mixin</p><p>导致：</p><ul><li>this是个黑盒，不知道里面的数据</li><li>数据来源不清晰</li></ul><h2 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h2><p>用函数来组织代码，所有的变量，方法来源很清晰</p><p>思想来自于react hooks，但是实现不一样</p><p>setup只执行一次，之后由响应式来驱动</p><p><strong>script-setup</strong>：</p><p>在编译运行时把代码放到了 setup 函数中运行，然后把导出的变量定义到上下文中，并包含在返回的对象中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useMouse.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;ref,onMounted,onUnmounted,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useMouse</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x =ref(<span class="number">0</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    x.value = e.pageX</span><br><span class="line">  &#125;</span><br><span class="line">  onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>,update)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;mousemove&#x27;</span>,update)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> count = computed(<span class="function">()=&gt;</span>x.value*<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;x,count&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;x&#125;&#125;:&#123;&#123;double&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;ref&#125; from &#39;vue&#39;</span><br><span class="line">import useMouse from &#39;.&#x2F;useMouse&#39;</span><br><span class="line">let &#123;x, count:double&#125; &#x3D; useMouse()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpovu2uxf0j31480u0ti4.jpg" alt="image-20210419111554172"></p><h1 id="dom-diff"><a href="#dom-diff" class="headerlink" title="dom diff"></a>dom diff</h1><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><ul><li>angular1脏检查</li><li>vue1采用的是发布订阅模式，通过拦截操作，修改一个数据的同时收集依赖，然后数据修改的时候去通知更新 dom，没有vdom，不存在diff的问题</li><li>react15引入了vdom，但是dom diff非常粗暴，递归，通过计算新老数据的 diff，去决定操作那些 dom，所以每次修改数据，需要生成一份新的数据</li><li>vue2引入vdom ，组件之间用响应式，组件内部用vdom diff</li><li>Vue3 通过静态标记 + 响应式 + 虚拟 dom 的方式，控制了 diff 的颗粒度，让 diff 的时间不会超过 16ms</li><li>react里解决vdom的方式：既然dom diff会卡顿，dom diff从树换成链表， diff过程就可以中断了。如果有优先级高的任务来了，可以暂停diff</li></ul><h2 id="传统vdom的性能瓶颈"><a href="#传统vdom的性能瓶颈" class="headerlink" title="传统vdom的性能瓶颈"></a>传统vdom的性能瓶颈</h2><p>传统vdom的性能跟模版大小正相关，跟动态结点的数量无关，在一些组件整个模版内只有少量动态节点的情况下，造成性能浪费</p><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p>vdom中新老数据都是数组，diff的算法会影响性能</p><ul><li>Vue2：参考了Snabbdom，双端对比（开头对比，结尾对比，开头与结尾，结尾与开头，四次预判）</li><li>react：正常的遍历，优化了tree diff，component diff，element diff</li><li>Vue3：借鉴了ivi算法和 inferno算法，双端对比 + 最长递增子序列</li></ul><h2 id="静态标记"><a href="#静态标记" class="headerlink" title="静态标记"></a>静态标记</h2><p>在创建虚拟DOM树的时候，会根据DOM中的内容会不会发生变化，添加一个静态标记。那么之后在与上次虚拟节点进行对比的时候，就只会对比这些带有静态标记的节点</p><p>Vue3 中仅对静态标记标记对象进行比较（PatchFlag）</p><ul><li>只比对带有 PF 的节点</li><li>并且通过 Flag 的信息得知当前节点要比对的具体内容</li><li>vue2中无论元素是否参与更新，每次都会重新创建，然后在渲染</li><li>vue3中对于不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态标记枚举</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum PatchFlags &#123;</span><br><span class="line">  TEXT = <span class="number">1</span>,<span class="comment">// 动态的文本节点</span></span><br><span class="line">  CLASS = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,  <span class="comment">// 2 动态的 class</span></span><br><span class="line">  STYLE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// 4 动态的 style</span></span><br><span class="line">  PROPS = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,  <span class="comment">// 8 动态属性，不包括类名和样式</span></span><br><span class="line">  FULL_PROPS = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,  <span class="comment">// 16 动态 key，当 key 变化时需要完整的 diff 算法做比较</span></span><br><span class="line">  HYDRATE_EVENTS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,  <span class="comment">// 32 表示带有事件监听器的节点</span></span><br><span class="line">  STABLE_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,   <span class="comment">// 64 一个不会改变子节点顺序的 Fragment</span></span><br><span class="line">  KEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">7</span>, <span class="comment">// 128 带有 key 属性的 Fragment</span></span><br><span class="line">  UNKEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">8</span>, <span class="comment">// 256 子节点没有 key 的 Fragment</span></span><br><span class="line">  NEED_PATCH = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,   <span class="comment">// 512</span></span><br><span class="line">  DYNAMIC_SLOTS = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,  <span class="comment">// 动态 slot</span></span><br><span class="line">  HOISTED = -<span class="number">1</span>,  <span class="comment">// 特殊标志是负整数表示永远不会用作 diff</span></span><br><span class="line">  BAIL = -<span class="number">2</span> <span class="comment">// 一个特殊的标志，指代差异算法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpoftc22pqj31an0u0ws2.jpg" alt="image-20210419020139267"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3&quot;&gt;&lt;a href=&quot;#Vue3&quot; class=&quot;headerlink&quot; title=&quot;Vue3&quot;&gt;&lt;/a&gt;Vue3&lt;/h1&gt;&lt;h2 id=&quot;Options&quot;&gt;&lt;a href=&quot;#Options&quot; class=&quot;headerlink&quot; title=&quot;Opt</summary>
      
    
    
    
    <category term="Vue3" scheme="http://jiezai.online/categories/Vue3/"/>
    
    
    <category term="vue3" scheme="http://jiezai.online/tags/vue3/"/>
    
    <category term="dom diff" scheme="http://jiezai.online/tags/dom-diff/"/>
    
  </entry>
  
  <entry>
    <title>vue3 初步</title>
    <link href="http://jiezai.online/2021/04/11/vue3-%E5%88%9D%E6%AD%A5/"/>
    <id>http://jiezai.online/2021/04/11/vue3-%E5%88%9D%E6%AD%A5/</id>
    <published>2021-04-11T05:28:44.000Z</published>
    <updated>2021-04-11T14:11:26.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h1 id="创建Vue3项目"><a href="#创建Vue3项目" class="headerlink" title="创建Vue3项目"></a>创建Vue3项目</h1><ul><li>使用vue-cli</li><li>使用vite</li></ul><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>版本在4.5以上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">vue --version</span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpfr33ygtqj31ft0u0wmm.jpg" alt="image-20210411134133725"></p><h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><p><a href="https://cn.vitejs.dev/guide/">vite文档</a></p><p>Vite (法语意为 “快速的”，发音 <code>/vit/</code>) 是一种新型前端构建工具，能够显著提升前端开发体验，包括</p><ul><li>一个开发服务器，它基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块</a> 提供了 <a href="https://cn.vitejs.dev/guide/features.html">丰富的内建功能</a>，如速度快到惊人的 <a href="https://cn.vitejs.dev/guide/features.html#hot-module-replacement">模块热更新（HMR）</a>。</li><li>一套构建指令，它使用 <a href="https://rollupjs.org/">Rollup</a> 打包你的代码，并且它是预配置的，可以输出用于生产环境的优化过的静态资源。</li></ul><p>Vite 意在提供开箱即用的配置，同时它的 <a href="https://cn.vitejs.dev/guide/api-plugin.html">插件 API</a> 和 <a href="https://cn.vitejs.dev/guide/api-javascript.html">JavaScript API</a> 带来了高度的可扩展性，并有完整的类型支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><p>组合API</p><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>新的option，所有的组合API函数都在此使用，只在初始化时执行一次</p><p>函数如果返回对象，则可以直接在html模版中使用</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li>定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):</li><li>创建一个包含响应式数据的引用(reference)对象<ul><li>js中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count.value = count.value + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    update</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">setup () &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  定义响应式数据对象</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    name: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    wife: &#123;</span><br><span class="line">      name: <span class="string">&#x27;marry&#x27;</span>,</span><br><span class="line">      age: <span class="number">22</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(state, state.wife)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    state.name += <span class="string">&#x27;--&#x27;</span></span><br><span class="line">    state.age += <span class="number">1</span></span><br><span class="line">    state.wife.name += <span class="string">&#x27;++&#x27;</span></span><br><span class="line">    state.wife.age += <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    update,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1><ul><li>通过Proxy(代理): 拦截对data任意属性的任意(13种)操作, 包括属性值的读写, 属性的添加, 属性的删除等…</li><li>通过 Reflect(反射): 动态对被代理对象的相应属性进行特定的操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dinner = &#123;</span><br><span class="line">  meal: <span class="string">&#x27;tacos&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, prop, receiver</span>)</span> &#123;</span><br><span class="line">    track(target, prop)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, value, receiver</span>)</span> &#123;</span><br><span class="line">    trigger(target, key)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(dinner, handler)</span><br><span class="line"><span class="built_in">console</span>.log(proxy.meal)</span><br></pre></td></tr></table></figure><h1 id="setup-1"><a href="#setup-1" class="headerlink" title="setup"></a>setup</h1><p><strong>执行时机：</strong></p><ul><li>在beforeCreate之前执行(一次), 此时组件对象还没有创建</li><li>this是undefined, 不能通过this来访问data/computed/methods / props</li><li>所有的composition API相关回调函数中也都不可以</li></ul><p><strong>返回值：</strong></p><ul><li>一般都返回一个对象: 为模板提供数据, 也就是模板中可以直接使用此对象中的所有属性/方法</li><li>返回对象中的属性会与data函数返回对象的属性合并成为组件对象的属性</li><li>返回对象中的方法会与methods中的方法合并成功组件对象的方法</li><li>如果有重名, setup优先</li></ul><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>在setup内调用</p><table><thead><tr><th>选项式 API</th><th>Hook inside <code>setup</code></th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td>Not needed*</td></tr><tr><td><code>created</code></td><td>Not needed*</td></tr><tr><td><code>beforeMount</code></td><td><code>onBeforeMount</code></td></tr><tr><td><code>mounted</code></td><td><code>onMounted</code></td></tr><tr><td><code>beforeUpdate</code></td><td><code>onBeforeUpdate</code></td></tr><tr><td><code>updated</code></td><td><code>onUpdated</code></td></tr><tr><td><code>beforeUnmount</code></td><td><code>onBeforeUnmount</code></td></tr><tr><td><code>unmounted</code></td><td><code>onUnmounted</code></td></tr><tr><td><code>errorCaptured</code></td><td><code>onErrorCaptured</code></td></tr><tr><td><code>renderTracked</code></td><td><code>onRenderTracked</code></td></tr><tr><td><code>renderTriggered</code></td><td><code>onRenderTriggered</code></td></tr></tbody></table><h1 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h1><ul><li>使用Vue3的组合API封装的可复用的功能函数</li><li>自定义hook的作用类似于vue2中的mixin技术</li><li>自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</li></ul><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</p><p>reactive 对象取出的所有属性值都是非响应式的</p><p>应用: 当从合成函数返回响应式对象时，toRefs 非常有用，这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    foo: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    bar: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> stateAsRefs = toRefs(state)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// ...state,</span></span><br><span class="line">    ...stateAsRefs,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3&quot;&gt;&lt;a href=&quot;#Vue3&quot; class=&quot;headerlink&quot; title=&quot;Vue3&quot;&gt;&lt;/a&gt;Vue3&lt;/h1&gt;&lt;h1 id=&quot;创建Vue3项目&quot;&gt;&lt;a href=&quot;#创建Vue3项目&quot; class=&quot;headerlink&quot; title=&quot;创</summary>
      
    
    
    
    <category term="Vue3" scheme="http://jiezai.online/categories/Vue3/"/>
    
    
    <category term="vue3" scheme="http://jiezai.online/tags/vue3/"/>
    
    <category term="Composition API" scheme="http://jiezai.online/tags/Composition-API/"/>
    
    <category term="响应式" scheme="http://jiezai.online/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
</feed>
