<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杰仔的博客</title>
  
  <subtitle>回忆是一条没有尽头的路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiezai.online/"/>
  <updated>2021-03-20T09:23:13.674Z</updated>
  <id>http://jiezai.online/</id>
  
  <author>
    <name>Jie Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AOP</title>
    <link href="http://jiezai.online/2021/03/20/AOP/"/>
    <id>http://jiezai.online/2021/03/20/AOP/</id>
    <published>2021-03-20T05:49:51.000Z</published>
    <updated>2021-03-20T09:23:13.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>优点：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共业务交给代理角色，实现业务分工</li><li>便于扩展，可以做到不修改目标对象的功能前提下,对目标功能扩展</li></ul><p>缺点：</p><ul><li>因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.</li><li>同时,一旦接口增加方法,目标对象与代理对象都要维护</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">  Host host;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.host = host</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    work();</span><br><span class="line">    host.rent();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//其他业务</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>本质为使用反射机制</p><ul><li>代理对象,不需要实现接口</li><li>代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)</li><li>动态代理分为两大类：<ul><li>基于接口：JDK动态代理</li><li>基于类：cglib</li><li>基于Java字节码：javasist</li></ul></li></ul><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p><strong>JDK中生成代理对象的API</strong></p><p>代理类所在包:java.lang.reflect.Proxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//给目标对象生成代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"开始事务2"</span>);</span><br><span class="line">                        <span class="comment">//执行目标对象方法</span></span><br><span class="line">                        Object returnValue = method.invoke(target, args);</span><br><span class="line">                        System.out.println(<span class="string">"提交事务2"</span>);</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>面向切面编程</p><p>AOP能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><ol><li>选择连接点：<strong>选择哪一个类的哪一方法用以增强功能</strong></li><li>创建切面：Spring 中只要使用 <code>@Aspect</code> 注解一个类，那么 Spring IoC 容器就会认为这是一个切面了</li><li>定义切点：注解中定义 execution 的正则表达式，Spring 通过这个正则表达式判断具体要拦截的是哪一个类的哪一个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 仅仅只是实现了核心的业务功能</span></span><br><span class="line">        System.out.println(<span class="string">"签合同"</span>);</span><br><span class="line">        System.out.println(<span class="string">"收房租"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">package</span> aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Broker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* pojo.Landlord.service())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"带租客看房"</span>);</span><br><span class="line">        System.out.println(<span class="string">"谈价格"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* pojo.Landlord.service())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"交钥匙"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//execution：代表执行方法的时候会触发</span></span><br><span class="line"><span class="comment">//* ：代表任意返回类型的方法</span></span><br><span class="line"><span class="comment">//pojo.Landlord：代表类的全限定名</span></span><br><span class="line"><span class="comment">//service()：被拦截的方法名称*/</span></span><br><span class="line">execution(* pojo.Landlord.service())</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goqhm29kgrj311e0gi0vh.jpg" alt="image-20210320171440171"></p><h2 id="使用-XML-配置"><a href="#使用-XML-配置" class="headerlink" title="使用 XML 配置"></a>使用 XML 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 装配 Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"landlord"</span> <span class="attr">class</span>=<span class="string">"pojo.Landlord"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"broker"</span> <span class="attr">class</span>=<span class="string">"aspect.Broker"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- where：在哪些地方（包.类.方法）做增加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"landlordPoint"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">"execution(* pojo.Landlord.service())"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- what:做什么增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">ref</span>=<span class="string">"broker"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- when:在什么时机（方法前/后/前后） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"landlordPoint"</span> <span class="attr">method</span>=<span class="string">"around"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;静态代理&lt;/li&gt;
&lt;li&gt;动态代理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;静态代理&quot;&gt;&lt;a href=&quot;#静态
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
      <category term="AOP" scheme="http://jiezai.online/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>传输层</title>
    <link href="http://jiezai.online/2021/03/17/%E4%BC%A0%E8%BE%93%E5%B1%82-1/"/>
    <id>http://jiezai.online/2021/03/17/%E4%BC%A0%E8%BE%93%E5%B1%82-1/</id>
    <published>2021-03-17T15:16:28.000Z</published>
    <updated>2021-03-17T15:19:59.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>功能：</p><ul><li>为应用层提供通信服务，使用网络层的服务</li><li>提供进程和进程之间的逻辑通信（网络层提供主机之间的逻辑通信）</li><li>复用和分用<ul><li>复用：发送方不同的应用进程都可使用同一个传输层协议传输数据</li><li>分用：接收方的传输层在剥去报文的首部后能够把数据正确交付到目的应用进程</li></ul></li><li>对收到的报文进行差错检测（首部和数据部分）</li><li>提供两种传输协议<ul><li>TCP</li><li>UDP</li></ul></li></ul><h1 id="传输层的寻址与端口"><a href="#传输层的寻址与端口" class="headerlink" title="传输层的寻址与端口"></a>传输层的寻址与端口</h1><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>应用层的各种应用进程将其数据通过端口向下交付给传输层，以及让传输层知道应当将其报文段中的数据向上通过端口交付给应用层相应的进程</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>应用进程通过端口号进行标识，长度为16bit</p><p>只具有本地意义</p><ul><li>服务端使用<ul><li>熟知端口号（0 ～ 1023）：给TCP/IP最重要的一些应用程序，让所以用户都知道</li><li>登记端口号（1024 -～49151）：其他</li></ul></li><li>客户端使用（49152 ～ 65535）：仅在客户进程运行时才动态选择</li></ul><h2 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h2><p>主机IP地址+端口号</p><p>唯一的标识网络中的一台主机及其上的一个应用</p><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p><strong>无连接非可靠的传输层协议</strong></p><ul><li>减少开销和发送数据的时延</li><li>使用最大努力交付，不保证可靠交付</li><li>面向报文，适合一次性传输少量数据的网络应用</li><li>一次发一个完整的报文</li><li>无拥塞控制</li><li>首部开销小，8B</li></ul><p>UDP报头由4个域组成，其中每个域各占用2个字节，具体包括源端口号、目标端口号、数据包长度、校验值。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gon9q4ezmzj30f805pq3u.jpg" alt="preview"></p><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p><strong>面向连接的传输层协议</strong></p><p>特点</p><h2 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gona2wypgtj30dw095jrv.jpg" alt="preview"></p><h2 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h2><p>使运输连接的建立和释放都能正常进行</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ol><li>客户端发送<strong>连接请求报文段</strong>，无应用层数据，SYN=1，seq=x（随机）</li><li>服务端为该TCP连接分配缓存和变量，并向客户端返回<strong>确认报文段</strong>，允许连接，无应用层数据，SYN=1，ACK=1，seq=y（随机），ack=x+1</li><li>客户端收到确认报文，为该TCP连接分配缓存和变量，并向服务端返回确认的确认，可以携带数据，SYN=0，ACK=1，seq=x+1，ack=y+1</li></ol><p>SYN洪范攻击</p><h3 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h3><ol><li>客户端发送<strong>连接释放报文段</strong>，停止发送数据，主动关闭TCP连接</li><li>服务端收到连接释放报文段，发出确认，客户端到服务端方向的连接就释放了，TCP处于半关闭状态</li><li>服务器发出连接释放报文段</li><li>客户端收到连接释放报文段，发出确认，等到时间等待计时器设置的2MSL（最长报文段寿命），连接彻底关闭</li></ol><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><p>使用校验、序号、确认和重传等机制</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>基于滑动窗口协议的流量控制机制</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h1&gt;&lt;p&gt;功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为应用层提供通信服务，使用网络层的服务&lt;/li&gt;
&lt;li&gt;提供进程和进程之间的逻辑通信（网络层提供
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>应用层</title>
    <link href="http://jiezai.online/2021/03/17/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://jiezai.online/2021/03/17/%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2021-03-17T15:14:35.000Z</published>
    <updated>2021-03-17T15:49:02.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>对应用程序的通信提供服务</p><h2 id="网络应用模型"><a href="#网络应用模型" class="headerlink" title="网络应用模型"></a>网络应用模型</h2><ul><li>客户/服务器模型</li><li>P2P模型</li></ul><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="层次域名空间"><a href="#层次域名空间" class="headerlink" title="层次域名空间"></a>层次域名空间</h2><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>递归查询</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h1&gt;&lt;p&gt;对应用程序的通信提供服务&lt;/p&gt;
&lt;h2 id=&quot;网络应用模型&quot;&gt;&lt;a href=&quot;#网络应用模型&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>网络层 IP</title>
    <link href="http://jiezai.online/2021/03/16/%E7%BD%91%E7%BB%9C%E5%B1%82-IP/"/>
    <id>http://jiezai.online/2021/03/16/%E7%BD%91%E7%BB%9C%E5%B1%82-IP/</id>
    <published>2021-03-16T14:59:12.000Z</published>
    <updated>2021-03-20T09:21:58.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h1><h2 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h2><p>首部 + 数据部分（TCP、UDP段）</p><p>首部：固定部分+可变部分</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gom2n03jtnj20ji092t9k.jpg" alt=""></p><ul><li>版本：IPv4 / IPv6</li><li>首部长度：单位是4B，最小长度为5</li><li>区分服务：期望获得哪种类型的服务</li><li>总长度：首部+数据</li><li>生存时间TTL：IP分组保质期，经过一个路由器-1，为0则丢弃</li><li>协议：数据部分的协议（6：TCP，17：UDP）</li><li>首部检验和：只检验首部</li><li>IP地址</li><li>可选字段：用来支持排错、测量以及安全等措施</li><li>填充：全0</li></ul><h2 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h2><p>MTU：最大传送单元，链路层数据报能承载的最大数据量，以太网的MTU为1500字节</p><ul><li>标识：同一数据报的分片使用同一标识</li><li>标志：3位，只有2位有意义，中间位（DF，Don’t Fragment)（1禁止/0允许分片），最低位(MF:More Fragment)（1还有分片/0代表最后一片）</li><li>片偏移：某片在原分组中的相对位置，以8B为单位</li></ul><h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><p>IP地址：连接到因特网的每台主机（或路由器）都分配一个32比特的全球唯一标识符</p><h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><p>路由器对目的地址是私有IP地址的数据报一律不进行转发</p><p>NAT指通过将专用网络地址转换为公用地址</p><p>在专用网连接到因特网的路由器上安装NAT软件，称为NAT路由器，至少有一个有效的外部全球IP地址</p><p>NAT转换表：本地地址与全球地址互相转换</p><h3 id="子网掩码与子网划分"><a href="#子网掩码与子网划分" class="headerlink" title="子网掩码与子网划分"></a>子网掩码与子网划分</h3><p>规定：所有的网络必须使用子网掩码</p><ul><li>两级IP地址：网络号+主机号（利用率低，不够灵活）</li><li>三级IP地址：网络号+子网号+主机号（对外表现为一个网络）<ul><li>C类地址子网掩码：255.255.255.0，（11111111 11111111 11111111 00000000）与IP地址逐位相与，得到子网网络地址</li></ul></li></ul><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p><strong>地址解析协议</strong></p><p>无论网络层使用什么协议，在实际网络的链路上传送数据帧时，最终必须使用硬件地址</p><p>完成IP地址到MAC地址的映射</p><p>每台主机都设有一个ARP高速缓存，用来存放本局域网各主机和路由器的IP地址到MAC地址的映射表，ARP表，动态维护</p><p>执行过程：</p><ol><li>检查ARP高速缓存，有对应表项则写入MAC帧</li><li>没有则广播ARP请求分组，同一局域网中所有主机都能收到该请求</li><li>目的主机收到后向源主机单播一个ARP响应分组，源主机收到后将此映射写入ARP缓存</li></ol><h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><p><strong>动态主机配置协议</strong></p><p>给主机动态分配IP地址</p><p>DHCP是应用层协议，使用C/S方式，通过广播方式进行交互，基于UDP</p><p>主机可以从服务器动态获取IP地址、子网掩码、默认网关、DNS服务器名称，允许地址重用</p><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><p>让主机或路由器报告差错和异常情况</p><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h2 id="移动IP"><a href="#移动IP" class="headerlink" title="移动IP"></a>移动IP</h2><h2 id="网络层设备"><a href="#网络层设备" class="headerlink" title="网络层设备"></a>网络层设备</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TCP-IP协议栈&quot;&gt;&lt;a href=&quot;#TCP-IP协议栈&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP协议栈&quot;&gt;&lt;/a&gt;TCP/IP协议栈&lt;/h1&gt;&lt;h2 id=&quot;IP数据报格式&quot;&gt;&lt;a href=&quot;#IP数据报格式&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络层" scheme="http://jiezai.online/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="http://jiezai.online/2021/03/15/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://jiezai.online/2021/03/15/%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2021-03-15T14:23:57.000Z</published>
    <updated>2021-03-17T14:58:16.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务</p><p>传输单位是<strong>数据报</strong></p><p>功能：</p><ul><li>路由选择与分组转发<ul><li>路由选择：按照复杂的分布式算法，根据从各相邻路由器所得到的关于整个网络拓扑的变化情况，动态改变所选择的路有</li><li>分组转发：路由器根据转发表将用户的IP数据报从合适的端口转发出去</li></ul></li><li>异构网络互联</li><li>拥塞控制<ul><li>因出现过量的分组而引起网络性能下降的现象称为拥塞</li><li>控制方法：<ul><li>开环控制：静态，在设计网络时，事先将有关发生拥塞的因素考虑周到</li><li>闭环控制：动态，事先不考虑，采用监测网络系统去见识，及时检测哪里发生了拥塞，将拥塞信息发送到合适的地方</li></ul></li></ul></li></ul><h1 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h1><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p><strong>特点：独占资源</strong></p><ol><li>建立连接（呼叫/电路建立）</li><li>通信 </li><li>释放连接（拆除电路）</li></ol><p><strong>优点</strong></p><ul><li>通信时延小</li><li>有序传输</li><li>没有冲突</li><li>实时性强</li></ul><p><strong>缺点</strong></p><ul><li>建立连接时间长</li><li>线路独占，使用效率低</li><li>灵活性差</li><li>无差错控制能力</li></ul><p>如电话网络</p><h2 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h2><p>报文：源应用发送的信息整体</p><p>通过交换设备进行存储转发，链路空闲时发送</p><p><strong>优点</strong></p><ul><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率高</li><li>多目标服务</li></ul><p><strong>缺点</strong></p><ul><li>有存储转发时延</li><li>报文大小补丁，需要网络节点有较大缓存空间</li></ul><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>分组：将大的数据块（报文）分割成小的数据块</p><p>相对于报文交换，存储管理更容易，但是需要传输额外的信息量，乱序到达目的主机时，要对分组排序重组</p><h2 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h2><p>一条源主机到目的主机类似于电路的路径（逻辑链接），路径上所有节点都要维持这条虚电路的建立，都维持一张虚电路表，每一项纪录了一个打开的虚电路的信息</p><p>每个分组携带虚电路号</p><p>虚电路将数据报方式和电路交换方式结合，以发挥两者优点</p><h1 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h1><p>路由表/转发表</p><table><thead><tr><th>目的网络IP地址</th><th>子网掩码</th><th>下一跳IP地址</th><th>接口</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>最佳路由：相对于某一种特定要求下得出的较为合理的选择</p><h2 id="静态路由算法"><a href="#静态路由算法" class="headerlink" title="静态路由算法"></a>静态路由算法</h2><p>管理员手工配置路由信息</p><p>在负荷稳定、拓扑变化不大的网络中运行效果好，广泛应用于高度安全性的军事网络和较小的商业网络</p><p>缺点：路由更新慢，不适用大型网络</p><h2 id="动态路由算法"><a href="#动态路由算法" class="headerlink" title="动态路由算法"></a>动态路由算法</h2><p>自适应路由算法</p><p>路由器之间彼此交换信息，按照路由算法优化出路由表项</p><p>优点：路由更新快，适用大型网络，及时响应链路费用或网络拓扑变化</p><p>缺点：算法复杂，增加网络负担</p><ul><li>全局性：链路状态路由算法 OSPF （所有路由器掌握完整的网络拓扑和链路费用信息）</li><li>分散性：距离向量路由算法 RIP（路由器只掌握物理项链的邻居及链路费用）</li></ul><h2 id="层次路由"><a href="#层次路由" class="headerlink" title="层次路由"></a>层次路由</h2><p>自治系统AS：在单一的技术管理下的一组路由器</p><p>路由选择协议：</p><ul><li>内部网关协议IGP：单个AS内使用 RIP OSPF</li><li>外部网关协议EGP：AS之间使用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h1&gt;&lt;p&gt;主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务&lt;/p&gt;
&lt;p&gt;传输单位是&lt;strong&gt;数据报&lt;/stron
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://jiezai.online/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://jiezai.online/2021/03/12/Spring/"/>
    <id>http://jiezai.online/2021/03/12/Spring/</id>
    <published>2021-03-12T05:43:10.000Z</published>
    <updated>2021-03-12T11:00:11.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/overview.html" target="_blank" rel="noopener">Spring Framework中文文档</a></p><p><a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></p><ul><li>SSH</li><li>SSM</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>Spring是一个开源的免费框架</li><li>是轻量级、非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事物的处理，对框架整合的支持</li></ul><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>Spring 框架分为多个模块。应用程序可以选择所需的模块。核心容器的模块是核心，包括配置模型和依赖项注入机制。除此之外，Spring 框架为不同的应用程序体系结构提供了基础支持，包括消息传递，事务性数据和持久性以及 Web。它还包括基于 Servlet 的 Spring MVC Web 框架，以及并行的 Spring WebFlux 反应式 Web 框架。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li>Spring Boot<ul><li>快速开发的脚手架</li><li>基于Spring Boot可以快速开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>基于Spring Boot实现</li></ul></li></ul><p>学习Spring Boot的前提是Spring以及Spring MVC</p><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p><strong>控制反转</strong>（Inversion of Control），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。（百度百科）</p><ul><li>控制指的是：<strong>当前对象对内部成员的控制权</strong>。</li><li>反转指的是：这种控制权<strong>不由当前对象管理</strong>了，由其他(类,第三方容器)来管理。</li></ul><p>借助于“第三方”实现具有依赖关系的对象之间的解耦：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1goh53apdraj30a8051jsj.jpg" alt="img"></p><p>对象由Spring来创建、管理和装配，原理就是通过Java的<strong>反射技术</strong>来实现的，通过反射我们可以获取类的所有信息(成员变量、类名等等等)，再通过配置文件(xml)或者注解来描述类与类之间的关系</p><p>官方代码实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line">PetStoreService service = context.getBean(<span class="string">"petStore"</span>, PetStoreService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use configured instance</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/23277575/answer/169698662" target="_blank" rel="noopener">Spring IoC有什么好处呢？ - Mingqi的回答 - 知乎</a></p><h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"userNew"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><ul><li>id：bean的唯一标识符，相当于对象名</li><li>class：bean对象所对应的全限定名：包名 + 类型</li><li>name：别名</li><li>prooperty：对象属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.jjj.User"</span> <span class="attr">name</span>=<span class="string">"user2"</span> &gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">prooperty</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jjj"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>将多个配置文件，导入合并为一个，直接使用总的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"services.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"resources/messageSource.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"/resources/themeSource.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="基于构造函数的依赖关系注入"><a href="#基于构造函数的依赖关系注入" class="headerlink" title="基于构造函数的依赖关系注入"></a>基于构造函数的依赖关系注入</h2><p>基于构造函数的 DI 是通过容器调用具有多个参数(每个参数代表一个依赖项)的构造函数来完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThingOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThingOne</span><span class="params">(ThingTwo thingTwo, ThingThree thingThree)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thingOne"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingOne"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"thingTwo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"thingThree"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thingTwo"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingTwo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thingThree"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingThree"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于-Setter-的依赖项注入"><a href="#基于-Setter-的依赖项注入" class="headerlink" title="基于 Setter 的依赖项注入"></a>基于 Setter 的依赖项注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AnotherBean beanOne;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> YetAnotherBean beanTwo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanOne</span><span class="params">(AnotherBean beanOne)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanOne = beanOne;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanTwo</span><span class="params">(YetAnotherBean beanTwo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanTwo = beanTwo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntegerProperty</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- setter injection using the nested ref element --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanOne"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"anotherExampleBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- setter injection using the neater ref attribute --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanTwo"</span> <span class="attr">ref</span>=<span class="string">"yetAnotherBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"integerProperty"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"anotherExampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.AnotherBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"yetAnotherBean"</span> <span class="attr">class</span>=<span class="string">"examples.YetAnotherBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="p命名空间注入"><a href="#p命名空间注入" class="headerlink" title="p命名空间注入"></a>p命名空间注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.jjj.User"</span> <span class="attr">p:name</span>=<span class="string">"user2"</span> &gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="c命名空间注入"><a href="#c命名空间注入" class="headerlink" title="c命名空间注入"></a>c命名空间注入</h2><p>注入构造函数参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.jjj.User"</span> <span class="attr">c:name</span>=<span class="string">"user2"</span> &gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1goh89gbyolj30ky0bnq5j.jpg" alt="image-20210312170103979"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.DefaultAccountService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.DefaultAccountService"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Bean自动装配"><a href="#Bean自动装配" class="headerlink" title="Bean自动装配"></a>Bean自动装配</h1><p>三种装配的方式：</p><ul><li>xml配置</li><li>java显式配置</li><li>隐士的自动装配</li></ul><h2 id="Spring-容器可以自动装配协作-bean-之间的关系"><a href="#Spring-容器可以自动装配协作-bean-之间的关系" class="headerlink" title="Spring 容器可以自动装配协作 bean 之间的关系"></a>Spring 容器可以自动装配协作 bean 之间的关系</h2><ul><li>自动装配是Spring满足Bean依赖的一种方式</li><li>Spring会在上下文中自动寻找并给bean自动装配属性</li></ul><h2 id="自动装配模式："><a href="#自动装配模式：" class="headerlink" title="自动装配模式："></a>自动装配模式：</h2><ul><li>byName：会自动再容器上下文中查找，和自己的对象set方法后面的值对应的beanid，需要保证所有bean的id唯一</li><li>byType：会自动在容器上下文中查找，和自己的对象属性类型相同的bean，需要保证bean的class唯一</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.jjj.pojo.cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.jjj.pojo.dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.jjj.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解自动装配"><a href="#使用注解自动装配" class="headerlink" title="使用注解自动装配"></a>使用注解自动装配</h2><p>前提：</p><ul><li>导入约束：context约束</li><li>配置注解：<code>&lt;context:annotation-config/&gt;</code></li></ul><p><strong>@Autowired</strong>：直接在属性上使用，也可以在set方法上使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://jiezai.online/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 网络编程</title>
    <link href="http://jiezai.online/2021/03/06/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://jiezai.online/2021/03/06/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-03-06T07:32:32.000Z</published>
    <updated>2021-03-07T15:33:24.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>TCP/IP  C/S</p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><ul><li>ip</li><li>端口号</li><li>通信协议</li></ul><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><ul><li>唯一定位一台网络上计算机</li><li>127.0.0.1：localhost</li><li>IP地址分类<ul><li>IPv4/IPv6</li><li>公网（互联网）/私网（局域网）<ul><li>ABCD类</li><li>192.168.xx.xx</li></ul></li></ul></li><li>域名</li></ul><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上一个程序的进程</p><ul><li>不同的进程有不同的端口号用来区分软件</li><li>被规定为0～65536：TCP、UDP各65536</li><li>端口分类<ul><li>公有端口0～1023<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li></ul></li><li>程序注册端口：1024～49151，分配用户或者程序<ul><li>Tomcat</li><li>mysql</li><li>oracle</li></ul></li><li>动态、私有</li></ul></li></ul><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><h2 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h2><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>Socket是一个抽象概念，一个应用程序通过一个Socket来建立一个远程连接，而Socket内部通过TCP/IP协议把数据传输到网络</p><p>一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号</p><p>Socket连接成功地在服务器端和客户端之间建立后：</p><ul><li>对服务器端来说，它的Socket是指定的IP地址和指定的端口号；</li><li>对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。</li></ul><p>Java标准库提供了<code>ServerSocket</code>来实现对指定IP和指定端口的监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>); </span><br><span class="line">        System.out.println(<span class="string">"server is running..."</span>);</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Socket sock = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">"connected from "</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            Thread t = <span class="keyword">new</span> Handler(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP是一种基于流的协议，因此，Java标准库使用<code>InputStream</code>和<code>OutputStream</code>来封装Socket的数据流</p><h2 id="HTTP-HTTPS"><a href="#HTTP-HTTPS" class="headerlink" title="HTTP/HTTPS"></a>HTTP/HTTPS</h2><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>免费的开放源代码的Servlet容器，核心组件为</p><ul><li>Connector：负责接收和反馈外部请求的连接器</li><li>Container：负责处理请求的容器</li></ul><p>连接器和容器相辅相成，一起构成了基本的 web 服务 Service</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gobrgplkv9j30ql056q2y.jpg" alt="preview"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 注解与反射</title>
    <link href="http://jiezai.online/2021/02/26/Java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <id>http://jiezai.online/2021/02/26/Java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</id>
    <published>2021-02-26T07:06:24.000Z</published>
    <updated>2021-02-28T14:27:10.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>Annotation，JDK5.0引入</p><p>作用：不是程序本身，可以对程序进行解释；可以被其他程序（编译器）读取</p><ul><li>供编译器检查，提早发现错误（如<code>@Override</code>)</li><li>改变编译器的行为,生成代码（如 <strong>Lombok</strong>）</li><li>代码运行过程中做处理。（如 <code>@Bean</code>)</li></ul><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><ul><li>@OVerride：限定重写父类方法，若想要重写父类的一个方法时，需要使用该注解告知编译器我们正在重写一个方法。</li><li>@Deprecated：标记已过时，当我们想要让编译器知道一个方法已经被弃用(deprecate)时，应该使用这个注解</li><li>@SuppressWarning：抑制编译器警告，该注解仅仅告知编译器，忽略它们产生了特殊警告</li></ul><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>负责注解其他注解，Java定义了四个标准的meta-annotation类型</p><ul><li><p>@Target：描述注解的使用范围,有一个枚举<strong>ElementType</strong>来指定，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Dog &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Retention：表述需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE &lt; CLASS &lt; RUNTIME）</p></li><li><p>@Document：表明该注解需要包含在javadoc中</p></li><li><p>@Inherited：表明该注解可以继承父类的注解</p></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>注解的定义通过@interface表示，所有的注解会自动继承java.lang.Annotation接口,且不能再继承别的类或是接口。</li><li>注解的成员参数只能用public或默认(default) 访问权修饰来进行修饰。</li><li>成员参数只能使用八种基本类型（byte、short、char、int、long、float、double、boolean）和String、Enum、Class、annotations等数据类型，及其数组。</li><li>获取类方法和字段的注解信息，只能通过Java的反射技术来获取 Annotation 对象。</li><li>注解可以没有定义成员，只做标识。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>反射是Java被视为动态语言的关键，反射机制允许程序在运行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性和方法</p><p>任何一个类，在第一次使用时，就会被 JVM 加载到堆内存的方法区中。JVM 加载类成功后，就会在方法区中产生一个对应的 Class 对象（一个类只要一个 Class 对象），这个 Class 对象包含被加载类的全部结构信息。</p><h2 id="反射提供的功能"><a href="#反射提供的功能" class="headerlink" title="反射提供的功能"></a>反射提供的功能</h2><p>在运行时</p><ul><li>判断任意一个对象所属的类</li><li>构造任意一个类的对象</li><li>判断任意一个类所具有的成员变量和方法</li><li>获取泛型信息</li><li>调用任意一个对象的成员变量和方法</li><li>处理注解</li><li>生成动态代理</li><li>………</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：可以实现动态创建对象和编译，体现出很高的灵活性</p><p>缺点：对性能有影响，反射是解释操作，慢于直接执行操作</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>Java.lang.class</p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过三个步骤来对该类进行初始化</p><ol><li>类的加载：将类的class文件读入内存，并为之创建一个java.lang.Class对象，由类加载器完成</li><li>类的链接：将类的二进制数据合并到JRE中</li><li>类的初始化：JVM对类进行初始化</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>反射的基本使用包括创建对象，设置属性和调用方法。Class 对象中大多数 get 方法有 Declared 和无 Declared</p><ul><li>无 Declared：只能获取到 public 修饰的，包括当前类和所有父类。</li><li>有 Declared：获取到当前类所有的（含有 private），但不包括其父类。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;p&gt;Annotation，JDK5.0引入&lt;/p&gt;
&lt;p&gt;作用：不是程序本身，可以对程序进行解释；可以被其他程序（编译器）读取&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java多线程2</title>
    <link href="http://jiezai.online/2021/02/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B2/"/>
    <id>http://jiezai.online/2021/02/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B2/</id>
    <published>2021-02-06T06:42:39.000Z</published>
    <updated>2021-02-06T08:24:11.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h1><ul><li>正常停止</li><li>设置标志位</li><li>不要使用stop或者destroy</li></ul><h1 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h1><ul><li>sleep指定当前线程阻塞的毫秒数</li><li>sleep存在异常interrupted Exception</li><li>sleep时间到达后线程进入就绪状态</li><li>可以模拟网络延时，倒计时等</li><li>每一个对象都有一个锁，sleep不会释放锁</li></ul><h1 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h1><ul><li>让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让cpu重新调度，礼让不一定成功</li></ul><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li><li>如后台记录操作日志，监控内存，垃圾回收等</li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h1 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1><h1 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h1><p>生产者消费者</p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程停止&quot;&gt;&lt;a href=&quot;#线程停止&quot; class=&quot;headerlink&quot; title=&quot;线程停止&quot;&gt;&lt;/a&gt;线程停止&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;正常停止&lt;/li&gt;
&lt;li&gt;设置标志位&lt;/li&gt;
&lt;li&gt;不要使用stop或者destroy&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 多线程</title>
    <link href="http://jiezai.online/2021/01/29/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://jiezai.online/2021/01/29/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-01-29T06:36:24.000Z</published>
    <updated>2021-01-31T15:58:42.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序、进程、线程"><a href="#程序、进程、线程" class="headerlink" title="程序、进程、线程"></a>程序、进程、线程</h1><h1 id="线程的创建和启动"><a href="#线程的创建和启动" class="headerlink" title="线程的创建和启动"></a>线程的创建和启动</h1><h2 id="继承Thread类形式"><a href="#继承Thread类形式" class="headerlink" title="继承Thread类形式"></a>继承Thread类形式</h2><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run()，将此线程执行的操作声明在run方法中</li><li>创建Thread类子类对象</li><li>调用此对象的start()：启动当前线程，且调用当前线程的run()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">mt.start();</span><br></pre></td></tr></table></figure><h2 id="实现Runnable接口形式"><a href="#实现Runnable接口形式" class="headerlink" title="实现Runnable接口形式"></a>实现Runnable接口形式</h2><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法run()</li><li>创建实现类的对象</li><li>将此对象作为参数传到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">Thread td=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">sd.start();</span><br></pre></td></tr></table></figure><h1 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h1><h2 id="id、name"><a href="#id、name" class="headerlink" title="id、name"></a>id、name</h2><p>通过Thread(String name)构造方法或者void setName(String name)设置名字</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>线程的优先级从1到10，默认为5，因程序实际运行的操作系统不同，优先级会被映射到操作系统中的取值</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul><li>New：线程实例化后，还没有开始运行</li><li>Runnable：一旦调用start方法，线程就处于可运行状态，正在运行或者准备运行</li><li>Blocked：阻塞状态，等待其他线程释放锁</li><li>Waiting：等待</li><li>Timed waiting：计时等待</li><li>Terminated：结束</li></ul><p>使用getState()可以确定线程的当前状态</p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4lnmkosdj31f40kgdq8.jpg" alt="image-20210129153140366"></p><h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h1><p>多个线程执行的不确定性引起执行结果的不稳定：当有多个线程同时操作同一个对象时，可能出现竞态条件（race condition），无法预期最终执行结果</p><p>线程同步可以解决线程的安全问题，操作同步代码时，只能有一个线程参与，其他线程等待，相当于是一个单线程的过程，但效率较低</p><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj称为同步监视器，即锁</p><p>当线程开始执行同步代码块前，必须先获得对同步代码块的锁定。并且任何时刻只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完成后，该线程会释放对该同步监视器的锁定</p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>如果操作共享数据的代码完整的声明在一个方法中，可以将此方法声明为同步方法，不需要再指定同步监视器同步方法的同步监视器就是this，也就是调用该方法的对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序、进程、线程&quot;&gt;&lt;a href=&quot;#程序、进程、线程&quot; class=&quot;headerlink&quot; title=&quot;程序、进程、线程&quot;&gt;&lt;/a&gt;程序、进程、线程&lt;/h1&gt;&lt;h1 id=&quot;线程的创建和启动&quot;&gt;&lt;a href=&quot;#线程的创建和启动&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础3</title>
    <link href="http://jiezai.online/2021/01/19/Java%E5%9F%BA%E7%A1%803/"/>
    <id>http://jiezai.online/2021/01/19/Java%E5%9F%BA%E7%A1%803/</id>
    <published>2021-01-19T13:11:59.000Z</published>
    <updated>2021-01-24T11:58:09.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h1><p>指没有名字的对象，即只创建对象，但是不用变量来接收</p><ul><li>匿名对象具有对象的所有功能</li><li>匿名对象只能调用一次</li><li>匿名对象只在堆内存中开辟空间，而不存在栈内存的引用</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul><li>重载：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者类型不同即可</li><li>可变个数的形参：(String … args)</li><li>方法参数的值传递机制：如果变量是基本数据类型，则传递的是变量的数据值；如果是引用数据类型，则传递的是变量的地址值</li><li>递归</li></ul><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>隐藏对象内部的复杂性，只对外公开简单的接口</p><ul><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</li><li>低耦合：仅对外暴露少量的方法用于使用</li></ul><p>权限修饰符：</p><ul><li>private：类内部</li><li>缺省：同一个包</li><li>protected：不同包的子类</li><li>public：同一个工程</li></ul><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>创建对象，初始化对象</p><ul><li>如果没有显式定义构造器，默认提供无参构造器</li><li>定义构造器的格式：权限修饰符  类名 (形参列表) {}</li><li>一个类中的多个构造器，彼此构成重载</li><li>一旦显式定义构造器后，系统不再提供默认的无参构造器</li></ul><h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><p>是一种Java语言写成的可重用组件，指符合如下标准的Java类</p><ul><li>类是公共的</li><li>有一个无参构造器</li><li>有属性，且具有对应的get、set方法</li></ul><h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>this调用构造器</p><ul><li>在类的构造器中，可以显式的使用“this(形参列表)”调用当前类的其他构造器</li><li>必须声明在当前构造器的首行</li><li>构造器内部，最多只能声明一个“this(形参列表)”用来调用其他构造器</li></ul><h1 id="package、import"><a href="#package、import" class="headerlink" title="package、import"></a>package、import</h1><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ul><li>为了更好的管理项目中的类，提出包的概念</li><li>使用package声明类或接口所属的包</li><li>同一个包下，不能命名同名的接口或类</li></ul><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><ul><li>导入指定包下的类或接口</li><li>声明在包和类的声明</li><li>import static: 导入指定类或接口中的静态结构</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>减少代码冗余，提高复用性</li><li>便于功能扩展</li><li>为多态提供前提</li></ul><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>如果没有显式的声明一个类的父类，则此类继承于java.lang.Object类</p><h1 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h1><p>在子类中对继承于父类的方法进行重写</p><ul><li>方法名和形参列表相同</li><li>子类中重写的方法的权限修饰符不能小于父类中被重写方法的权限修饰符</li><li>子类不能重写父类中声明为private的方法</li><li>返回值类型：若被重写方法返回值类型为void，则重写方法只能返回void；若被重写方法返回A类型，则重写方法可以返回A类型或A的子类</li><li>静态方法无法被重写</li></ul><h1 id="super"><a href="#super" class="headerlink" title="super"></a>super</h1><p>指向父类的引用</p><h1 id="子类对象实例化的过程"><a href="#子类对象实例化的过程" class="headerlink" title="子类对象实例化的过程"></a>子类对象实例化的过程</h1><p>从结果看：子类继承父类后，就获得了父类的属性和方法</p><p>从过程看：通过子类的构造器创建对象时，会直接或间接的调用父类构造器，直到Object类的构造器，从而在内存中加载了父类的结构，子类可以调用，但不对外暴露</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>可以理解为事物的多种形态</p><p>对象的多态性：父类的引用指向子类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Father fa = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure><p>多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法</p><p>前提：类的继承与方法的重写</p><p>只适用于方法，不能用于属性</p><p>虚拟方法：在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用子类的方法</p><p>向下转型：可以使用强制类型转换调用子类特有的方法</p><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>针对八种基本数据类型定义相应的引用类型</p><p>自动装箱与自动拆箱</p><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>静态变量随着类的加载而加载，可以通过类.静态变量调用</li><li>静态变量的加载早于对象的创建</li><li>类只会加载一次，静态变量在内存中只会保存一份，存在于方法区的静态域中</li></ul><h1 id="单例模式Singleton"><a href="#单例模式Singleton" class="headerlink" title="单例模式Singleton"></a>单例模式Singleton</h1><p>在系统中，某个类只存在一个实例对象</p><p>减少性能开销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载时间长，线程安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">  <span class="comment">//私有化类的构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Bank</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">//内部创建类的对象</span></span><br><span class="line">  <span class="keyword">private</span> Bank instance = <span class="keyword">new</span> Bank();</span><br><span class="line">  <span class="comment">//提供公共的方法，返回类的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Bank <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延迟对象的创建，线程不安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ul><li>用来初始化类、对象</li><li>如果有修饰，只能用static</li><li>静态代码块：随着类的加载而执行，只执行一次；若有多个，则按声明顺序执行</li><li>非静态代码块：随着对象的创建而执行，每创建对象都执行一次（初始化对象属性）</li></ul><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><ul><li>final修饰的类无法被继承</li><li>final修饰的方法无法被重写</li><li>final修饰的变量无法被修改</li></ul><h1 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h1><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><p>Java允许类设计者指定：超类声明一个方法但不实现，该方法的实现由子类提供，这样的方法称为抽象方法，有一个或更多抽象方法的类叫做抽象类</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><ul><li>abstract修饰的类无法实例化，即为抽象类</li><li>抽象类中一定有构造器，方便子类实例化时调用</li><li>abstract修饰的方法：抽象方法，没有方法体</li><li>包含抽象方法的类，一定是抽象类</li><li>子类重写了父类中所有的抽象方法后，才能被实例化；若没有全部重写，则该子类也为抽象类，需要用abstract修饰</li></ul><p>注意点：</p><ul><li>不能用于修饰属性、构造器、私有方法、静态方法、final的方法和类</li></ul><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式</p><p>抽象类体现的就是一种模板模式的设计</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;匿名对象&quot;&gt;&lt;a href=&quot;#匿名对象&quot; class=&quot;headerlink&quot; title=&quot;匿名对象&quot;&gt;&lt;/a&gt;匿名对象&lt;/h1&gt;&lt;p&gt;指没有名字的对象，即只创建对象，但是不用变量来接收&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匿名对象具有对象的所有功能&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java基础2</title>
    <link href="http://jiezai.online/2021/01/15/java%E5%9F%BA%E7%A1%802/"/>
    <id>http://jiezai.online/2021/01/15/java%E5%9F%BA%E7%A1%802/</id>
    <published>2021-01-15T06:06:51.000Z</published>
    <updated>2021-01-17T14:53:05.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><ul><li>从概念上讲，Java字符串就是unicode字符序列。</li><li>Java没有内置的字符串类型，而是在标准java类库中提供了一个预定义类String。</li><li>每个用双引号括起来的字符串都是String类的一个实例。</li><li>不可变字符串：String类没有提供修改字符串中某个字符的方法，不能修改Java字符串中的单个字符。优点：编译器可以让字符串共享。</li><li>构建字符串：有时候需要用许多较短的字符串构建字符串，例如按键输入或者文件中的单词，需要用到字符串构建器：StringBuilder</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><ul><li>条件判断</li><li>循环</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>声明数组：一旦创建数组后，就不能改变长度，若需要经常扩展数组的大小，则需要使用数组列表（array list）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> Int[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><ul><li><p>访问数组元素</p></li><li><p>foreach循环：for ( variable : collection ) statement</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环打印a数组</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> element : a) </span><br><span class="line">System.out.println(element);</span><br></pre></td></tr></table></figure><ul><li><p>数组拷贝：在Java中，允许将一个数组变量拷贝到另一个数组变量，这时，两个变量将引用同一个数组（浅拷贝）。使用Arrays类的copyOf方法则可以实现深拷贝。</p></li><li><p>命令行参数：向main方法传递字符串，运行程序时，可以从命令行给main方法传递字符串参数，java className  args0 args1</p></li><li><p>数组排序：Arrays.sort</p></li></ul><h1 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h1><h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><ul><li>Java类及类的成员：属性、方法、构造器；代码块，内部类</li><li>面向对象的三大特征：封装、继承、多态</li><li>其他关键字：this、super、static、final、abstract、interface、package、import</li></ul><p>在Java语言范畴中，将功能、结构等都封装到类中，通过类的实例化，来调用具体的功能结构</p><p>涉及到与前端、数据库交互时，前后端的结构在Java层面都体现为类、对象</p><h2 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h2><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ul><li>与类同名，在构造类的对象时，构造器会运行，从而将实例字段初始化为所希望的初始状态</li><li>每个类可以有一个以上的构造器</li><li>可以有多个参数，没有返回值</li><li>总是伴随着new操作符一起调用</li></ul><h3 id="用var声明局部变量"><a href="#用var声明局部变量" class="headerlink" title="用var声明局部变量"></a>用var声明局部变量</h3><p>在Java 10中，如果可以从变量的初始值推导出它们的类型，那么可以用var声明局部变量，无须指定类型</p><h3 id="使用null引用"><a href="#使用null引用" class="headerlink" title="使用null引用"></a>使用null引用</h3><p>在构造器中将null转为非null值，或者严格拒绝null参数（ Objects.requireNonNull() ）</p><h3 id="隐式参数与显式参数"><a href="#隐式参数与显式参数" class="headerlink" title="隐式参数与显式参数"></a>隐式参数与显式参数</h3><h3 id="基于类的访问权限"><a href="#基于类的访问权限" class="headerlink" title="基于类的访问权限"></a>基于类的访问权限</h3><p>方法可以访问调用这个方法的对象的私有数据</p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>private修饰</p><h3 id="final实例字段"><a href="#final实例字段" class="headerlink" title="final实例字段"></a>final实例字段</h3><p>可以将实例字段定义为final，这样的字段必须在构造对象时初始化，也就是说，必须确保每个构造器执行之后，这个字段的值已经设置，并且之后不能再修改这个字段</p><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a><del>JVM内存结构</del></h2><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p>Java中参数传递方式只有值传递</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从概念上讲，Java字符串就是unicode字符序列。&lt;/li&gt;
&lt;li&gt;Java没有内置的字符
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java</title>
    <link href="http://jiezai.online/2021/01/10/Java/"/>
    <id>http://jiezai.online/2021/01/10/Java/</id>
    <published>2021-01-10T12:09:24.000Z</published>
    <updated>2021-01-11T03:55:44.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><p>Java程序的开发过程</p><ul><li>利用 JDK （调用 Java API）编写出 Java 源代码，存储于 <code>.java</code> 文件中</li><li>JDK 中的编译器 javac 将 Java 源代码编译成 Java 字节码，存储于 <code>.class</code> 文件中</li><li>JRE 加载、验证、执行 Java 字节码</li><li>JVM 将字节码解析为机器码并映射到 CPU 指令集或 OS 的系统调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello.java // 新建.java文件</span></span><br><span class="line"><span class="comment">javac Hello.java // 编译生成Hello.class</span></span><br><span class="line"><span class="comment">java Hello // 运行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello,World"</span>);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h1><p>可以被javadoc解析，以网页形式生成说明文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment">  <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h1><h1 id="JDK、-JRE、JVM"><a href="#JDK、-JRE、JVM" class="headerlink" title="JDK、 JRE、JVM"></a>JDK、 JRE、JVM</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>Java Development Kit， 是整个JAVA的核心，包括了 Java 运行时的环境（JRE）、解释器（Java）、编译器（javac）、Java 归档（jar ——一种软件包文件格式）、文档生成器（Javadoc）等工具。</p><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>Java Runtime Environment，Java运行环境，包含JVM标准实现及Java核心类库。提供 Java 应用程序执行时所需的环境，由 Java 虚拟机（JVM）、核心类、支持文件组成。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>Java Virtual Machine，即java虚拟机，JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul><li>数值型：整型（byte, short,int,long）、浮点型（float, double）</li><li>字符型：char</li><li>布尔型：boolean</li></ul><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><p>对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><ul><li>类：class</li><li>接口：interface</li><li>数组： array</li></ul><h2 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h2><p>当容量小的数据类型的变量与容量大的数据类型的变量进行运算时，结果自动提升为容量大的数据类型</p><p>（容量指表示数的范围大小）</p><p>注意，当byte、short、char三种类型进行运算时，结果为int型</p><p>Byte,char,short  -&gt; int -&gt; long  -&gt;  float -&gt; double</p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>需要使用强转符： ()</p><p>可能导致精度损失</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;Hello world&lt;/h1&gt;&lt;p&gt;Java程序的开发过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 JDK （调
      
    
    </summary>
    
    
      <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>n皇后</title>
    <link href="http://jiezai.online/2020/10/20/n%E7%9A%87%E5%90%8E/"/>
    <id>http://jiezai.online/2020/10/20/n%E7%9A%87%E5%90%8E/</id>
    <published>2020-10-20T11:47:52.000Z</published>
    <updated>2020-10-20T12:06:42.128Z</updated>
    
    <content type="html"><![CDATA[<p>n皇后问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//输入n</span></span><br><span class="line"><span class="keyword">int</span> cnt;<span class="comment">//记录解个数</span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">12</span>];<span class="comment">//记录皇后位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否满足条件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(vis[row] - vis[i]) == <span class="built_in">abs</span>(row-i) || vis[row] == vis[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归摆放皇后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//遍历列的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">vis[row] = i;</span><br><span class="line"><span class="keyword">if</span> (check(row)) &#123;</span><br><span class="line"><span class="keyword">if</span> (row == n) &#123;<span class="comment">//到达最后一行</span></span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dfs(row + <span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里hdu-2553需要打表避免超时</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">n = i;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">arr[i] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。（每个皇后不在同一行、同一列以及对角线上）<br>递归写法:</p><ol><li>将棋盘存储为一个一维数组啊a[n],第i个元素表示第i行的皇后位置</li><li>遍历下一行位置,判断是否满足条件,是则记录一个解,直到走到最后一行</li><li>冲突计算: ①行列相减的绝对值相等判断是否在对角线 ②列是否相等</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;n皇后问题&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue 组件</title>
    <link href="http://jiezai.online/2020/03/22/Vue-%E7%BB%84%E4%BB%B6/"/>
    <id>http://jiezai.online/2020/03/22/Vue-%E7%BB%84%E4%BB%B6/</id>
    <published>2020-03-22T08:15:41.000Z</published>
    <updated>2020-10-20T10:28:54.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>组件是可复用的Vue实例，可以扩展 HTML 元素，封装可重用的代码，通过不同的组件划分不同的功能模块</p><ul><li>模块化：从代码逻辑划分，方便分层开发，保证每个功能模块的职能单一</li><li>组件化：从UI界面划分，方便复用</li></ul><h1 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h1><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><h3 id="vue-extend"><a href="#vue-extend" class="headerlink" title="vue.extend"></a>vue.extend</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> com = Vue.extend(&#123;</span><br><span class="line">template: <span class="string">'&lt;p&gt;hahahah&lt;/p&gt;'</span>, <span class="comment">// 指定组件的html结构</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'mycom'</span>,com)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在html中以html标签引入,若以驼峰形式命名，则引用时改为小写，使用-连接</span></span><br><span class="line">&lt;mycom&gt;&lt;<span class="regexp">/mycom&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue-component"><a href="#vue-component" class="headerlink" title="vue.component"></a>vue.component</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;mycom&#39;,&#123;</span><br><span class="line">template: &#39;&lt;p&gt;hahahah&lt;&#x2F;p&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="#"></a>#</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在vue实例外使用template元素，定义html模板结构</span></span><br><span class="line">&lt;template id=<span class="string">'tmp'</span>&gt;</span><br><span class="line">&lt;p&gt;hahahah&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'mycom'</span>,&#123;</span><br><span class="line">template: <span class="string">'#tmp'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="私有组件"><a href="#私有组件" class="headerlink" title="私有组件"></a>私有组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 将只在父模板可用</span></span><br><span class="line">    <span class="string">'my-component'</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><p>组件可以有自己的data数据，组件中的data必须是一个方法，且返回一个对象,用法与vue实例中的data一致。</p><p>将data定义为function是为了变量私有化，组件复用时不会互相影响，保证数据的独立性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycom'</span>,&#123;</span><br><span class="line">template: <span class="string">'&lt;p&gt;hahahah &#123;&#123;msg&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">            msg: <span class="string">'wwuwu'</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><h2 id="is属性"><a href="#is属性" class="headerlink" title="is属性"></a>is属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//is属性，用来指定要展示的组件id</span></span><br><span class="line"><span class="comment">//组件在 vm.componentId 变化时改变！</span></span><br><span class="line">&lt;component :is=<span class="string">'componentId'</span>&gt;&lt;<span class="regexp">/component&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件间传值"><a href="#组件间传值" class="headerlink" title="组件间传值"></a>组件间传值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">'app'</span>&gt;</span><br><span class="line">    &lt;com1 v-bind: parentMsg=<span class="string">'msg'</span> @func=<span class="string">'getMsgFromSon'</span>&gt;&lt;<span class="regexp">/com1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=<span class="string">"'tmp1'"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;子元素 --- &#123;&#123;parentMsg&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var com1 = &#123;</span></span><br><span class="line"><span class="regexp">        template: '#tmp1',</span></span><br><span class="line"><span class="regexp">        data () &#123;</span></span><br><span class="line"><span class="regexp">return &#123;</span></span><br><span class="line"><span class="regexp">               msg: 'childMsg'</span></span><br><span class="line"><span class="regexp">           &#125;            </span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        props: ['parentMsg'],</span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">            sendMsg()&#123;</span></span><br><span class="line"><span class="regexp">                this.$emit('func',this.msg)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: '#app',</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">msg: 'hahha',</span></span><br><span class="line"><span class="regexp">            childMsg: 'xixiixi'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">getMsgFromSon(data) &#123;</span></span><br><span class="line"><span class="regexp">               this.childMsg = data;</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        components: &#123;</span></span><br><span class="line"><span class="regexp">            com1</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;组件是可复用的Vue实例，可以扩展 HTML 元素，封装可重用的代码，通过不同的组件划分不同的功能模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化：从
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://jiezai.online/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://jiezai.online/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 语法-2</title>
    <link href="http://jiezai.online/2020/03/22/Vue-%E8%AF%AD%E6%B3%95-2/"/>
    <id>http://jiezai.online/2020/03/22/Vue-%E8%AF%AD%E6%B3%95-2/</id>
    <published>2020-03-22T07:35:19.000Z</published>
    <updated>2020-10-20T10:28:54.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h1><p>Vue 要实现异步加载需要使用到 vue-resource 库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(url).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.post(url,<span class="attr">data</span>:<span class="number">1</span>&#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(result.body)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(url).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(result.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于script标签不存在跨域限制，可以通过动态创建script标签，将script标签的src属性指向接口地址。</p><p>具体过程：</p><ol><li>在客户端定义回调方法，预定义对数据的草走</li><li>将回调方法的名称，通过get方式传到接口</li><li>接口将数据和回调方法名称拼接为字符串返回</li><li>客户端拿到字符串当作script标签解析执行</li></ol><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面中的容器</span></span><br><span class="line"> &lt;div id=<span class="string">'app'</span>&gt;</span><br><span class="line">     &lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>,<span class="attr">redirect</span>: <span class="string">'/user'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span></span><br><span class="line">    router: router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="watch监视路由变化"><a href="#watch监视路由变化" class="headerlink" title="watch监视路由变化"></a>watch监视路由变化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span></span><br><span class="line">    router: router,</span><br><span class="line">    watch: &#123;</span><br><span class="line">    <span class="string">'$router.patch'</span>: unction (newVal,oldValue) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(newValue)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-resource&quot;&gt;&lt;a href=&quot;#vue-resource&quot; class=&quot;headerlink&quot; title=&quot;vue-resource&quot;&gt;&lt;/a&gt;vue-resource&lt;/h1&gt;&lt;p&gt;Vue 要实现异步加载需要使用到 vue-resource 
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://jiezai.online/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://jiezai.online/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 语法</title>
    <link href="http://jiezai.online/2020/03/20/Vue-%E8%AF%AD%E6%B3%95/"/>
    <id>http://jiezai.online/2020/03/20/Vue-%E8%AF%AD%E6%B3%95/</id>
    <published>2020-03-20T13:11:38.000Z</published>
    <updated>2020-10-20T10:28:54.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>过滤器是对即将显示的数据做进一步的筛选处理，然后进行显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公有过滤器</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;       </span><br><span class="line"> filters: &#123;      </span><br><span class="line">    filterName: <span class="function"><span class="keyword">function</span> (<span class="params">value1[,value2,...]</span>) </span>&#123; </span><br><span class="line">       <span class="comment">// 逻辑代码     </span></span><br><span class="line">    &#125; </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;数据属性名称 | 过滤器名称&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/私有过滤器，写在vue实例中</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    filters: &#123;</span></span><br><span class="line"><span class="regexp">        filterName: function (value1[,value2,...]) &#123;</span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/ 逻辑代码   </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><p>过滤器调用遵循就近原则</p><h1 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h1><p>监听按键事件</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @keyup.enter&#x3D;&#39;func&#39;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>可以通过全局 <code>config.keyCodes</code> 对象自定义按键修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 可以使用 &#96;v-on:keyup.f1&#96;</span><br><span class="line">Vue.config.keyCodes.f1 &#x3D; 112</span><br></pre></td></tr></table></figure><p>可用于input框回车搜索等</p><h1 id="自定义全局指令"><a href="#自定义全局指令" class="headerlink" title="自定义全局指令"></a>自定义全局指令</h1><p>钩子函数：一个指令定义对象可以提供如下几个钩子函数</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li>updated：所在组件的 VNode 更新时调用。</li></ul><p>和样式相关的可以写在bind里，和js操作相关的一般写在inserted里</p><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</li><li><code>binding</code>：一个对象，包含以下属性：<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus();</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">'demo'</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(binding.value);<span class="comment">//获取指令传入的参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;div v-demo=<span class="string">"value"</span>&gt;&lt;<span class="regexp">/div&gt;/</span><span class="regexp">/</span></span><br></pre></td></tr></table></figure><h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><p><img src="https://i.loli.net/2020/03/20/bvuW7zrVQLqelNf.png" alt="image.png"></p><p><code>beforeCreate</code>：在Vue实例完全创建之前有一个<code>beforeCreate</code>函数，此时，Vue中的data、methods数据都未初始化。</p><p><code>created</code>:：data和methods已被初始化完成</p><p><code>模板编译</code>：表示Vue开始编译模板，执行Vue中的指令，在内存中生成编译好的模板字符串，然后渲染到内存的DOM中，并没有将模板挂载到惠html中</p><p><code>bedoreMount</code>：此时页面中的元素还没被替换，只是之前写的字符串模板</p><p><code>mounted</code>：此时内存中的模板已被挂载到页面中，可以看到渲染好的页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h1&gt;&lt;p&gt;过滤器是对即将显示的数据做进一步的筛选处理，然后进行显示&lt;/p&gt;
&lt;figure class=&quot;highlight javascri
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://jiezai.online/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://jiezai.online/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://jiezai.online/2020/03/20/Promise/"/>
    <id>http://jiezai.online/2020/03/20/Promise/</id>
    <published>2020-03-20T01:52:30.000Z</published>
    <updated>2020-10-20T10:28:54.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。</p><p>简单来说，Promise是一个保存异步操作的结果的容器。语法上，Promise是一个对象，获取异步操作的消息，提供统一的API。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>对象状态不受外界影响，</p><p>三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态</p></li><li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</p><p>相当于事件已经发生，无法再被改变。</p></li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>ES6 规定，<code>Promise</code>对象是一个构造函数，用来生成<code>Promise</code>实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(success) &#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">reject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h1><p>Promise的回调函数属于异步任务，会在同步任务之后执行</p><p>但是区别于一般的异步任务，Promise回调是微任务。一般任务追加到下一轮时间循环，微任务追加到本轮时间循环，因此，微任务的执行时间一定早于正常任务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">2</span>);</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>//TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://jiezai.online/categories/JavaScript/"/>
    
    
      <category term="promise" scheme="http://jiezai.online/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>MVC MVVM</title>
    <link href="http://jiezai.online/2020/03/19/MVC-MVVM/"/>
    <id>http://jiezai.online/2020/03/19/MVC-MVVM/</id>
    <published>2020-03-19T13:32:46.000Z</published>
    <updated>2020-10-20T10:28:54.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>MVC是后端分层开发思想</p><ul><li><p>M层: model 数据模型层(处理数据的增删改查) 提供数据</p></li><li><p>V层: Views 视图层 (数据展示) 渲染数据</p></li><li><p>C层: controller 控制层(处理业务逻辑) 调用数据渲染视图</p></li></ul><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>MVVM是前端视图层的开发思想，主要关注于视图层，将每个页面分成了M、V、VM</p><ul><li>M：Model，保存每个页面中单独的数据。</li><li>V：View，每个页面的html结构。</li><li>VM：view Model，调度者，分割M和V，每当V层想要获取保存后的数据，都由VM做中间处理。在vue中指的是vue实例化对象，提供数据双向绑定。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;html,View</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;js,VM</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;app&#39;,</span><br><span class="line">data: &#123;</span><br><span class="line">msg: &#39;hahaha&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h1&gt;&lt;p&gt;MVC是后端分层开发思想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M层: model 数据模型层(处理数据的增删改查) 提供数据&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://jiezai.online/categories/JavaScript/"/>
    
    
      <category term="Vue" scheme="http://jiezai.online/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象</title>
    <link href="http://jiezai.online/2020/03/19/JavaScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://jiezai.online/2020/03/19/JavaScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-03-19T05:47:35.000Z</published>
    <updated>2020-10-20T10:28:54.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>JavaScript 的继承是通过“原型对象”（prototype）实现，ES6中引入class，可以通过类实现。</p><h2 id="构造函数的继承"><a href="#构造函数的继承" class="headerlink" title="构造函数的继承"></a>构造函数的继承</h2><p>分为两个步骤</p><ol><li>在子类中的构造函数调用父类的构造函数。</li><li>让子类的原型指向父类的原型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.func1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'func1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">Father.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另外一种写法</span></span><br><span class="line"><span class="comment">//function Son (name) &#123;</span></span><br><span class="line"><span class="comment">//this.base = Father;</span></span><br><span class="line"><span class="comment">//this.base();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Son.prototype.constructor = Father;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">'小明'</span>);</span><br><span class="line">son.func1();</span><br></pre></td></tr></table></figure><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>Javascript不提供多重继承，即不允许一个对象同时继承多个对象。但是，可以通过变通方法，实现这个功能。 这种模式称为Mixin。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.hello = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.world = <span class="string">'world'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">S</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  M1.call(<span class="keyword">this</span>);</span><br><span class="line">  M2.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承 M1</span></span><br><span class="line">S.prototype = <span class="built_in">Object</span>.create(M1.prototype);</span><br><span class="line"><span class="comment">// 继承链上加入 M2</span></span><br><span class="line"><span class="built_in">Object</span>.assign(S.prototype, M2.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定构造函数</span></span><br><span class="line">S.prototype.constructor = S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> S();</span><br><span class="line">s.hello <span class="comment">// 'hello'</span></span><br><span class="line">s.world <span class="comment">// 'world'</span></span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h2><p>模块是实现特定功能的一组属性和方法的封装。简单的做法是把模块写成一个对象，所有的模块成员都放到这个对象里面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">value: <span class="number">0</span>,</span><br><span class="line">f1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">f2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样写的缺点：暴露模块成员，内部状态可以被外部改写。</p><h2 id="立即执行函数（IIFE）"><a href="#立即执行函数（IIFE）" class="headerlink" title="立即执行函数（IIFE）"></a>立即执行函数（IIFE）</h2><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>声明函数的同时立即调用这个函数。</p><p>IIFE的出现是为了弥补JS在scope方面的缺陷：JS只有全局作用域、函数作用域，从ES6开始才有块级作用域。</p><p>ES5在没有块级作用域下的缺点</p><ul><li>在if或者for循环中声明的变量会泄露成全局变量</li><li>内层变量可能会覆盖外层变量</li></ul><h2 id="通过IIFE封装私有变量"><a href="#通过IIFE封装私有变量" class="headerlink" title="通过IIFE封装私有变量"></a>通过IIFE封装私有变量</h2><p>将相关的属性和方法封装在一个函数作用域里面，可以达到不暴露私有成员的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">f1: f1,</span><br><span class="line">f2: f2</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.value);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>由于函数只返回了f1、f2，所以外部无法读取value。</p><p>当需要继承多个模块时，需要采用宽放大模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>) </span>&#123;</span><br><span class="line">mod.f3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.module || &#123;&#125;);<span class="comment">//无法知道哪个部分会先加载,可能会加载空对象</span></span><br></pre></td></tr></table></figure><h1 id="ES6中的class"><a href="#ES6中的class" class="headerlink" title="ES6中的class"></a>ES6中的class</h1><p>TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;p&gt;JavaScript 的继承是通过“原型对象”（prototype）实现，ES6中引入class，可以通过类实现。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://jiezai.online/categories/JavaScript/"/>
    
    
      <category term="OOP" scheme="http://jiezai.online/tags/OOP/"/>
    
  </entry>
  
</feed>
