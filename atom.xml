<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杰仔的博客</title>
  
  <subtitle>回忆是一条没有尽头的路</subtitle>
  <link href="http://jiezai.online/atom.xml" rel="self"/>
  
  <link href="http://jiezai.online/"/>
  <updated>2022-09-05T16:46:11.972Z</updated>
  <id>http://jiezai.online/</id>
  
  <author>
    <name>Jie Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础算法（二）</title>
    <link href="http://jiezai.online/2022/09/03/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://jiezai.online/2022/09/03/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-09-03T14:43:05.000Z</published>
    <updated>2022-09-05T16:46:11.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; <span class="built_in">check</span>(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体问题的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line">常见问题分类：</span><br><span class="line">    (<span class="number">1</span>) 对于一个序列，用两个指针维护一段区间</span><br><span class="line">    (<span class="number">2</span>) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></p><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>求n的第k位数字: n &gt;&gt; k &amp; 1<br>返回n的最后一位1：lowbit(n) = n &amp; -n</p><p><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指 Offer 15. 二进制中1的个数</a></p><h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><p><a href="https://leetcode.cn/problems/merge-intervals/">56. 合并区间</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;双指针&quot;&gt;&lt;a href=&quot;#双指针&quot; class=&quot;headerlink&quot; title=&quot;双指针&quot;&gt;&lt;/a&gt;双指针&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="acwing" scheme="http://jiezai.online/categories/acwing/"/>
    
    
    <category term="algorithm" scheme="http://jiezai.online/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>基础算法（一）</title>
    <link href="http://jiezai.online/2022/08/28/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://jiezai.online/2022/08/28/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-08-28T15:26:24.000Z</published>
    <updated>2022-09-01T16:12:20.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>分治</p><ol><li>确定分界点的值x：q[l], q[(l+r) / 2], q[r]都可以</li><li>调整区间，将小于等于x的值移动至x的左边，大于等于x的值移动至x的右边</li><li>递归地处理左边与右边两段</li></ol><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">q, l, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> x = q[(<span class="built_in">parseInt</span>((l + r) / <span class="number">2</span>))]</span><br><span class="line">    <span class="keyword">let</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">const</span> temp = q[j]</span><br><span class="line">            q[j] = q[i]</span><br><span class="line">            q[i] = temp</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q, l, j)</span><br><span class="line">    quick_sort(q, j + <span class="number">1</span>, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>分治</p><ol><li>确定分界点：mid = (l+r) / 2</li><li>递归排序，左边与右边</li><li><strong>归并</strong>，将两个有序的数组合并</li></ol><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tmp = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span>(<span class="params">q, l, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> mid = <span class="built_in">parseInt</span>((l + r) / <span class="number">2</span>)</span><br><span class="line">    merge_sort(q, l, mid)</span><br><span class="line">    merge_sort(q, mid + <span class="number">1</span>, r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) &#123;</span><br><span class="line">            tmp[k++] = q[i++]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[k++] = q[j++]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++]</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k++] = q[j++]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) &#123;</span><br><span class="line">        q[i] = tmp[j]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>]</span><br><span class="line">merge_sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchRange = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">0</span>, r = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((l + r) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">            r = mid</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[l] != target) <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((i + j + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) &#123;</span><br><span class="line">            i = mid</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [l, i]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(searchRange([<span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>], <span class="number">8</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;p&gt;分治&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定分界点的值x：q[l], q[(l+r) / 2], q[r]都可以&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="acwing" scheme="http://jiezai.online/categories/acwing/"/>
    
    
    <category term="algorithm" scheme="http://jiezai.online/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>ts config</title>
    <link href="http://jiezai.online/2022/08/23/ts-config/"/>
    <id>http://jiezai.online/2022/08/23/ts-config/</id>
    <published>2022-08-23T14:31:27.000Z</published>
    <updated>2022-08-23T15:14:35.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h1><p>如果一个目录下存在一个<code>tsconfig.json</code>文件，那么它意味着这个目录是TypeScript项目的根目录。 <code>tsconfig.json</code>文件中指定了用来编译这个项目的根文件和编译选项</p><h1 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">// &quot;incremental&quot;: true,                // 增量编译</span></span><br><span class="line">      <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./buildFile&quot;,   // 增量编译文件的存储位置</span></span><br><span class="line">      <span class="comment">// &quot;diagnostics&quot;: true,                // 打印诊断信息</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;target&quot;: &quot;es5&quot;,            // 目标语言的版本</span></span><br><span class="line">      <span class="comment">// &quot;module&quot;: &quot;commonjs&quot;,      // 生成代码的模块标准</span></span><br><span class="line">      <span class="comment">// &quot;outFile&quot;: &quot;./app.js&quot;,     // 将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;lib&quot;: [],                 // TS 需要引用的库，即声明文件，es5 默认 &quot;dom&quot;, &quot;es5&quot;, &quot;scripthost&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;allowJs&quot;: true,           // 允许编译 JS 文件（js、jsx）</span></span><br><span class="line">      <span class="comment">// &quot;checkJs&quot;: true,           // 允许在 JS 文件中报错，通常与 allowJS 一起使用</span></span><br><span class="line">      <span class="comment">// &quot;outDir&quot;: &quot;./out&quot;,         // 指定输出目录</span></span><br><span class="line">      <span class="comment">// &quot;rootDir&quot;: &quot;./&quot;,           // 指定输入文件目录（用于输出）</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;declaration&quot;: true,         // 生成声明文件</span></span><br><span class="line">      <span class="comment">// &quot;declarationDir&quot;: &quot;./d&quot;,     // 声明文件的路径</span></span><br><span class="line">      <span class="comment">// &quot;emitDeclarationOnly&quot;: true, // 只生成声明文件</span></span><br><span class="line">      <span class="comment">// &quot;sourceMap&quot;: true,           // 生成目标文件的 sourceMap</span></span><br><span class="line">      <span class="comment">// &quot;inlineSourceMap&quot;: true,     // 生成目标文件的 inline sourceMap</span></span><br><span class="line">      <span class="comment">// &quot;declarationMap&quot;: true,      // 生成声明文件的 sourceMap</span></span><br><span class="line">      <span class="comment">// &quot;typeRoots&quot;: [],             // 声明文件目录，默认 node_modules/@types</span></span><br><span class="line">      <span class="comment">// &quot;types&quot;: [],                 // 声明文件包</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;removeComments&quot;: true,    // 删除注释</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;noEmit&quot;: true,            // 不输出文件</span></span><br><span class="line">      <span class="comment">// &quot;noEmitOnError&quot;: true,     // 发生错误时不输出文件</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;noEmitHelpers&quot;: true,     // 不生成 helper 函数，需额外安装 ts-helpers</span></span><br><span class="line">      <span class="comment">// &quot;importHelpers&quot;: true,     // 通过 tslib 引入 helper 函数，文件必须是模块</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;downlevelIteration&quot;: true,    // 降级遍历器的实现（es3/5）</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;strict&quot;: true,                        // 开启所有严格的类型检查</span></span><br><span class="line">      <span class="comment">// &quot;alwaysStrict&quot;: false,                 // 在代码中注入 &quot;use strict&quot;;</span></span><br><span class="line">      <span class="comment">// &quot;noImplicitAny&quot;: false,                // 不允许隐式的 any 类型</span></span><br><span class="line">      <span class="comment">// &quot;strictNullChecks&quot;: false,             // 不允许把 null、undefined 赋值给其他类型变量</span></span><br><span class="line">      <span class="comment">// &quot;strictFunctionTypes&quot;: false           // 不允许函数参数双向协变</span></span><br><span class="line">      <span class="comment">// &quot;strictPropertyInitialization&quot;: false, // 类的实例属性必须初始化</span></span><br><span class="line">      <span class="comment">// &quot;strictBindCallApply&quot;: false,          // 严格的 bind/call/apply 检查</span></span><br><span class="line">      <span class="comment">// &quot;noImplicitThis&quot;: false,               // 不允许 this 有隐式的 any 类型</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;noUnusedLocals&quot;: true,                // 检查只声明，未使用的局部变量</span></span><br><span class="line">      <span class="comment">// &quot;noUnusedParameters&quot;: true,            // 检查未使用的函数参数</span></span><br><span class="line">      <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,    // 防止 switch 语句贯穿</span></span><br><span class="line">      <span class="comment">// &quot;noImplicitReturns&quot;: true,             // 每个分支都要有返回值</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;esModuleInterop&quot;: true,               // 允许 export = 导出，由import from 导入</span></span><br><span class="line">      <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,          // 允许在模块中访问 UMD 全局变量</span></span><br><span class="line">      <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,            // 模块解析策略</span></span><br><span class="line">      <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,                       // 解析非相对模块的基地址</span></span><br><span class="line">      <span class="comment">// &quot;paths&quot;: &#123;                             // 路径映射，相对于 baseUrl</span></span><br><span class="line">      <span class="comment">//   &quot;jquery&quot;: [&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;]</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="comment">// &quot;rootDirs&quot;: [&quot;src&quot;, &quot;out&quot;],            // 将多个目录放在一个虚拟目录下，用于运行时</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &quot;listEmittedFiles&quot;: true,        // 打印输出的文件</span></span><br><span class="line">      <span class="comment">// &quot;listFiles&quot;: true,               // 打印编译的文件（包括引用的声明文件）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="工程引用"><a href="#工程引用" class="headerlink" title="工程引用"></a>工程引用</h1><p><a href="https://juejin.cn/post/6844904004615421966">https://juejin.cn/post/6844904004615421966</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tsconfig-json&quot;&gt;&lt;a href=&quot;#tsconfig-json&quot; class=&quot;headerlink&quot; title=&quot;tsconfig.json&quot;&gt;&lt;/a&gt;tsconfig.json&lt;/h1&gt;&lt;p&gt;如果一个目录下存在一个&lt;code&gt;tsconfig.</summary>
      
    
    
    
    <category term="TypeScript开发实战" scheme="http://jiezai.online/categories/TypeScript%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="TypeScript" scheme="http://jiezai.online/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 开发实战</title>
    <link href="http://jiezai.online/2022/07/04/TypeScript-%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    <id>http://jiezai.online/2022/07/04/TypeScript-%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</id>
    <published>2022-07-04T14:03:35.000Z</published>
    <updated>2022-07-19T16:00:14.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态类型语言与动态类型语言"><a href="#静态类型语言与动态类型语言" class="headerlink" title="静态类型语言与动态类型语言"></a>静态类型语言与动态类型语言</h1><p>静态类型语言：在编译阶段确定所有变量的类型</p><p>动态类型语言：在执行阶段确定所有变量的类型</p><h2 id="JavaScript与C-对比"><a href="#JavaScript与C-对比" class="headerlink" title="JavaScript与C++对比"></a>JavaScript与C++对比</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">consttructor</span>(<span class="params">x,y</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.x = x</span><br><span class="line"><span class="built_in">this</span>.y = y</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.x + a.y + b.x + b.y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(C a, C b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x + a.y + b.x + b.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分配</p><p>JavaScript：</p><ul><li>在程序运行时，动态计算属性偏移量</li><li>需要额外的空间存储属性名</li><li>所有对象的偏移量信息各存一份</li></ul><p>C++：</p><ul><li>编译阶段确定属性偏移量</li><li>用偏移量访问代替属性名访问</li><li>偏移量信息共享</li></ul><table><thead><tr><th>静态类型语言</th><th>动态类型语言</th></tr></thead><tbody><tr><td>对类型极度严格</td><td>对类型非常宽松</td></tr><tr><td>立即发现错误</td><td>Bug可能隐藏数月甚至数年</td></tr><tr><td>运行时性能好</td><td>运行时性能差</td></tr><tr><td>自文档化</td><td>可读性差</td></tr></tbody></table><p>动态类型语言的支持者认为：</p><ul><li>性能是可以改善的（V8引擎），而语言的灵活性更重要</li><li>隐藏的错误可以通过单元测试发现</li><li>文档可以通过工具生成</li></ul><h2 id="其他定义"><a href="#其他定义" class="headerlink" title="其他定义"></a>其他定义</h2><p>强类型语言：不允许程序在发生错误后继续执行</p><h1 id="typescript数据类型"><a href="#typescript数据类型" class="headerlink" title="typescript数据类型"></a>typescript数据类型</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始类型</span></span><br><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> arr1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组: 用来表示已知元素数量和类型的数组，各元素的类型不必相同，对应位置的类型需要相同</span></span><br><span class="line"><span class="keyword">let</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">0</span>, <span class="string">&quot;1&quot;</span>];</span><br><span class="line"><span class="comment">// 允许push，但是不允许访问</span></span><br><span class="line"><span class="comment">// tuple.push(2)</span></span><br><span class="line"><span class="comment">// tuple[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">let</span> add = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">let</span> obj: &#123; <span class="attr">x</span>: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// symbol: 新的原始数据类型 Symbol ，表示独一无二的值</span></span><br><span class="line"><span class="keyword">let</span> s1: symbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s1 === s2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined null</span></span><br><span class="line"><span class="keyword">let</span> un: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> nu: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void</span></span><br><span class="line"><span class="keyword">let</span> noReturn = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// any</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">x = [];</span><br><span class="line">x = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// never</span></span><br><span class="line"><span class="comment">// 一个总是会抛出错误的函数</span></span><br><span class="line"><span class="keyword">let</span> error = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 一个从来不会有返回值的函数</span></span><br><span class="line"><span class="keyword">let</span> endless = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组枚举</span></span><br><span class="line"><span class="built_in">enum</span> Role &#123;</span><br><span class="line">  Reporter,</span><br><span class="line">  Developer,</span><br><span class="line">  Maintainer,</span><br><span class="line">  Owner,</span><br><span class="line">  Guest,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Role[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(Role.Developer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码中，枚举类型被编译成一个对象，它包含了正向映射（ name -&gt; value）和反向映射（ value -&gt; name）。</span></span><br><span class="line"><span class="comment">// 引用枚举成员总会生成为对属性访问并且永远也不会内联代码。</span></span><br><span class="line"><span class="comment">// 要注意的是 不会为字符串枚举成员生成反向映</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var Role;</span></span><br><span class="line"><span class="comment">// (function (Role) &#123;</span></span><br><span class="line"><span class="comment">//     Role[Role[&quot;Reporter&quot;] = 0] = &quot;Reporter&quot;;</span></span><br><span class="line"><span class="comment">//     Role[Role[&quot;Developer&quot;] = 1] = &quot;Developer&quot;;</span></span><br><span class="line"><span class="comment">//     Role[Role[&quot;Maintainer&quot;] = 2] = &quot;Maintainer&quot;;</span></span><br><span class="line"><span class="comment">//     Role[Role[&quot;Owner&quot;] = 3] = &quot;Owner&quot;;</span></span><br><span class="line"><span class="comment">//     Role[Role[&quot;Guest&quot;] = 4] = &quot;Guest&quot;;</span></span><br><span class="line"><span class="comment">// &#125;)(Role || (Role = &#123;&#125;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串枚举</span></span><br><span class="line"><span class="built_in">enum</span> Message &#123;</span><br><span class="line">  Success = <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  Fail = <span class="string">&quot;失败&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var Message;</span></span><br><span class="line"><span class="comment">// (function (Message) &#123;</span></span><br><span class="line"><span class="comment">//     Message[&quot;Success&quot;] = &quot;\u6210\u529F&quot;;</span></span><br><span class="line"><span class="comment">//     Message[&quot;Fail&quot;] = &quot;\u5931\u8D25&quot;;</span></span><br><span class="line"><span class="comment">// &#125;)(Message || (Message = &#123;&#125;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异构枚举</span></span><br><span class="line"><span class="built_in">enum</span> Answer &#123;</span><br><span class="line">  N,</span><br><span class="line">  Y = <span class="string">&quot;Yes&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举成员</span></span><br><span class="line"><span class="built_in">enum</span> Char &#123;</span><br><span class="line">  <span class="comment">// const，在编译时计算出结果，以常量形式出现在运行环境</span></span><br><span class="line">  a,</span><br><span class="line">  b = Char.a,</span><br><span class="line">  c = <span class="number">1</span> + <span class="number">2</span>,</span><br><span class="line">  <span class="comment">//   computed，非常量表达式，保留到程序执行阶段</span></span><br><span class="line">  d = <span class="built_in">Math</span>.random(),</span><br><span class="line">  e = <span class="string">&quot;123&quot;</span>.length,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;use strict&quot;;</span></span><br><span class="line"><span class="comment">// var Char;</span></span><br><span class="line"><span class="comment">// (function (Char) &#123;</span></span><br><span class="line"><span class="comment">//     Char[Char[&quot;a&quot;] = 0] = &quot;a&quot;;</span></span><br><span class="line"><span class="comment">//     Char[Char[&quot;b&quot;] = 0] = &quot;b&quot;;</span></span><br><span class="line"><span class="comment">//     Char[Char[&quot;c&quot;] = 3] = &quot;c&quot;;</span></span><br><span class="line"><span class="comment">//     Char[Char[&quot;d&quot;] = Math.random()] = &quot;d&quot;;</span></span><br><span class="line"><span class="comment">//     Char[Char[&quot;e&quot;] = &quot;123&quot;.length] = &quot;e&quot;;</span></span><br><span class="line"><span class="comment">// &#125;)(Char || (Char = &#123;&#125;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量枚举: 当访问枚举值时，为了避免生成多余的代码和间接引用，可以使用常数枚举。</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Month &#123;</span><br><span class="line">  Jan,</span><br><span class="line">  Feb,</span><br><span class="line">  Mar,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> month = [Month.Jan, Month.Feb, Month.Mar];</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;use strict&quot;;</span></span><br><span class="line"><span class="comment">// let month = [0 /* Month.Jan */, 1 /* Month.Feb */, 2 /* Month.Mar */];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="built_in">enum</span> E &#123;</span><br><span class="line">  a,</span><br><span class="line">  b,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> F &#123;</span><br><span class="line">  a = <span class="number">0</span>,</span><br><span class="line">  b = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> G &#123;</span><br><span class="line">  a = <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">  b = <span class="string">&quot;banana&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把任意number类型赋值给枚举类型，取值也可以超出枚举成员的定义</span></span><br><span class="line"><span class="keyword">let</span> e: E = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> f: F = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 两种不同类型的枚举无法比较</span></span><br><span class="line"><span class="comment">// console.log(e === f); // 此条件将始终返回 &quot;false&quot;，因为类型 &quot;E&quot; 和 &quot;F&quot; 没有重叠</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种不同类型的枚举无法比较</span></span><br><span class="line"><span class="keyword">let</span> e1: E.a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> e2: E.b;</span><br><span class="line"><span class="comment">// console.log(e1 === e2); 无法比较</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e3: E.a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// console.log(e1 === e3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值只能是枚举成员的类型</span></span><br><span class="line"><span class="keyword">let</span> g1: G = G.a;</span><br><span class="line"><span class="keyword">let</span> g2: G.a = G.a;</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> List &#123;</span><br><span class="line">  <span class="keyword">readonly</span> id: <span class="built_in">number</span>; <span class="comment">// 只读属性，不允许修改</span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Result &#123;</span><br><span class="line">  data: List[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">result: Result</span>) </span>&#123;</span><br><span class="line">  result.data.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value.id, value.name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入对象满足约束条件即可，即使多了sex属性</span></span><br><span class="line">render(result);</span><br><span class="line"><span class="comment">// 若传入对象字面量的话,ts就会对额外的字段进行检查</span></span><br><span class="line"><span class="comment">// 不能将类型“&#123; id: number; name: string; sex: string; &#125;”分配给类型“List”。</span></span><br><span class="line"><span class="comment">//   对象文字可以只指定已知属性，并且“sex”不在类型“List”中</span></span><br><span class="line"><span class="comment">// render(&#123;</span></span><br><span class="line"><span class="comment">//   data: [</span></span><br><span class="line"><span class="comment">//     &#123; id: 1, name: &quot;A&quot;, sex: &quot;male&quot; &#125;,</span></span><br><span class="line"><span class="comment">//     &#123; id: 2, name: &quot;B&quot; &#125;,</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方法： 类型断言 或者 字符串索引签名</span></span><br><span class="line"><span class="comment">// 类型断言</span></span><br><span class="line">render(&#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125; <span class="keyword">as</span> Result);</span><br><span class="line"></span><br><span class="line">render(&lt;Result&gt;&#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串索引签名</span></span><br><span class="line"><span class="comment">// interface List &#123;</span></span><br><span class="line"><span class="comment">//   id: number;</span></span><br><span class="line"><span class="comment">//   name: string;</span></span><br><span class="line"><span class="comment">//   [x: string]: any;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字索引接口</span></span><br><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> chars: StringArray = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串索引接口</span></span><br><span class="line"><span class="keyword">interface</span> Names &#123;</span><br><span class="line">  [x: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">//   y: number // 不允许</span></span><br><span class="line">  <span class="comment">//   [z: number]: number; // 不允许</span></span><br><span class="line">  [z: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface Add &#123;</span></span><br><span class="line"><span class="comment">//   (x: number, y: number): number;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型别名</span></span><br><span class="line"><span class="keyword">type</span> Add = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add: Add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合类型: 一个对象可以同时做为函数和对象使用，并带有额外的属性</span></span><br><span class="line"><span class="keyword">interface</span> Lib &#123;</span><br><span class="line">  (): <span class="built_in">void</span>;</span><br><span class="line">  version: <span class="built_in">string</span>;</span><br><span class="line">  doSomething(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLib</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lib: Lib = (<span class="function">() =&gt;</span> &#123;&#125;) <span class="keyword">as</span> Lib;</span><br><span class="line">  lib.version = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">  lib.doSomething = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> lib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add3</span>(<span class="params">...rest: <span class="built_in">number</span>[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add3</span>(<span class="params">...rest: <span class="built_in">string</span>[]</span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add3</span>(<span class="params">...rest: <span class="built_in">any</span>[]</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> first = rest[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rest.join();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rest.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add3(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">pri</span>(<span class="params"></span>)</span> &#123;&#125; <span class="comment">// 只能在类中访问</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="title">pro</span>(<span class="params"></span>)</span> &#123;&#125; <span class="comment">// 只能在类或者子类种调用，不能被实例调用</span></span><br><span class="line">  <span class="keyword">readonly</span> legs: <span class="built_in">number</span> = <span class="number">4</span>; <span class="comment">// 只读属性必须被初始化</span></span><br><span class="line">  <span class="keyword">static</span> food: <span class="built_in">string</span> = <span class="string">&quot;bones&quot;</span>; <span class="comment">// 只能通过类名调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Dog.prototype); <span class="comment">// &#123;run: ƒ, constructor: ƒ&#125; name属性只在实例上，不再原型上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;wangwang&quot;</span>);</span><br><span class="line"><span class="comment">// dog.pri() 属性“pri”为私有属性，只能在类“Dog”中访问</span></span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Husky</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="comment">//   color: string;</span></span><br><span class="line">  <span class="comment">// 构造函数参数可以添加修饰符，自动变成实例的属性，省略在类中的定义，public color</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, <span class="keyword">public</span> color: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">// 派生类的构造函数必须包含 &quot;super&quot; 调用</span></span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="抽象类与多态"><a href="#抽象类与多态" class="headerlink" title="抽象类与多态"></a>抽象类与多态</h1><p>抽象类：只能被继承，不能被实例化的类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 抽象方法</span></span><br><span class="line">  <span class="keyword">abstract</span> sleep(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let animal = new Animal() 无法创建抽象类的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog1</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  sleep(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;dog sleep&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog1 = <span class="keyword">new</span> Dog1(<span class="string">&quot;wangwang&quot;</span>);</span><br><span class="line">dog1.eat();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  sleep(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Cat sleep&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animals: Animal[] = [dog1, cat];</span><br><span class="line">animals.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  item.sleep();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkFlow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">step1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">step2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> workflow = <span class="keyword">new</span> WorkFlow();</span><br><span class="line">workflow.step1().step2();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类的链式调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFlow</span> <span class="keyword">extends</span> <span class="title">WorkFlow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myflow = <span class="keyword">new</span> MyFlow();</span><br><span class="line">myflow.next().step1().step2();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h1><ul><li>接口之间可以相互继承</li><li>类之间可以继承</li><li>接口可以通过类实现，接口只能约束类的公有成员</li><li>接口可以抽离出类的成员（public,private,protected）</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">  <span class="comment">//   new (name: string): void; 会提示错误实现了接口</span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类实现接口，必须实现接口的所有属性</span></span><br><span class="line"><span class="comment">// 接口只能约束类的公有成员，不能约束构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asian</span> <span class="title">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">//   private name: string; 不可以</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">sleep</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口继承</span></span><br><span class="line"><span class="keyword">interface</span> Man <span class="keyword">extends</span> Human &#123;</span><br><span class="line">  run(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Child &#123;</span><br><span class="line">  cry(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Boy <span class="keyword">extends</span> Man, Child &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要实现Human Man Child的全部属性: run, name, eat, cry</span></span><br><span class="line"><span class="keyword">let</span> boy: Boy = &#123;</span><br><span class="line">  name: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">cry</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口继承类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auto</span> </span>&#123;</span><br><span class="line">  state = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//   private state2 = 0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> AutoInterface <span class="keyword">extends</span> Auto &#123;</span><br><span class="line">  <span class="comment">// 已经包含了state属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">implements</span> <span class="title">AutoInterface</span> </span>&#123;</span><br><span class="line">  state = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Auto</span> <span class="title">implements</span> <span class="title">AutoInterface</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不必实现state，已经继承了state</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ul><li>函数和类可以轻松地支持多种类型，增强程序的扩展性</li><li>不必写多条函数重载，冗长的联合声明，增强代码可读性</li><li>灵活控制类型之间的约束</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log&lt;<span class="built_in">string</span>[]&gt;([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]);</span><br><span class="line">log([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型函数类型</span></span><br><span class="line"><span class="keyword">type</span> Log = &lt;T&gt;<span class="function">(<span class="params">value: T</span>) =&gt;</span> T;</span><br><span class="line"><span class="comment">// 泛型函数实现</span></span><br><span class="line"><span class="keyword">let</span> myLog: Log = log;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义泛型函数</span></span><br><span class="line"><span class="keyword">interface</span> Log1&lt;T = string&gt; &#123;</span><br><span class="line">  (value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型约束了整个接口时，实现必须指定类型</span></span><br><span class="line"><span class="keyword">let</span> myLog1: Log1&lt;<span class="built_in">number</span>&gt; = log;</span><br><span class="line">myLog1(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// myLog1(&#x27;a&#x27;); 必须为number</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="泛型与类"><a href="#泛型与类" class="headerlink" title="泛型与类"></a>泛型与类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log2</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params">value: T</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定类型参数时，参数必须符合类型</span></span><br><span class="line"><span class="keyword">let</span> log1 = <span class="keyword">new</span> Log2&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">log1.run(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当不指定类型参数时，可以传任意类型</span></span><br><span class="line"><span class="keyword">let</span> log2 = <span class="keyword">new</span> Log2();</span><br><span class="line">log2.run(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型约束</span></span><br><span class="line"><span class="keyword">interface</span> Length &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log3</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Length</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, value.length);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log3([]);</span><br><span class="line">log3(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">log3(&#123; <span class="attr">length</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类型检查机制"><a href="#类型检查机制" class="headerlink" title="类型检查机制"></a>类型检查机制</h1><p>Typescript编译器在做类型检查时，所秉承的一些原则，以及表现出的一些行为</p><p>辅助开发，提高开发效率</p><ul><li>类型推断</li><li>类型兼容性</li><li>类型保护</li></ul><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>不需要指定变量的类型（函数的返回值类型），Typescript可以根据某些规则自动推断出一个类型</p><ul><li>基础类型推断</li><li>最佳通用类型推断</li><li>上下文类型推断</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="literal">null</span>]; <span class="comment">// (number | null)[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="function">(<span class="params">x = <span class="number">1</span></span>) =&gt;</span> x + <span class="number">1</span>; <span class="comment">// x: number, c+ number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onkeydown = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// event: KeyboardEvent</span></span><br><span class="line">  <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型断言</span></span><br><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  bar: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo = &#123;&#125; <span class="keyword">as</span> Foo;</span><br><span class="line">foo.bar = <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h2><p>当一个类型Y可以被赋值给另一个类型X时，则类型X兼容类型Y</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型兼容性</span></span><br><span class="line"><span class="keyword">let</span> s: <span class="built_in">string</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口兼容性</span></span><br><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line">  a: <span class="built_in">any</span>;</span><br><span class="line">  b: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Y &#123;</span><br><span class="line">  a: <span class="built_in">any</span>;</span><br><span class="line">  b: <span class="built_in">any</span>;</span><br><span class="line">  c: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x1: X = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> y1: Y = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">x1 = y1;</span><br><span class="line"><span class="comment">// y1 = x1; 无法赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数兼容性</span></span><br><span class="line"><span class="keyword">type</span> Handler = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hof</span>(<span class="params">handler: Handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要同时满足三个条件：参数个数、参数类型、返回值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 参数个数</span></span><br><span class="line"><span class="keyword">let</span> handler1 = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">hof(handler1);</span><br><span class="line"><span class="keyword">let</span> handler2 = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// hof(handler2) 错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数和剩余参数</span></span><br><span class="line"><span class="keyword">let</span> a1 = <span class="function">(<span class="params">p1: <span class="built_in">number</span>, p2: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> b1 = <span class="function">(<span class="params">p1?: <span class="built_in">number</span>, p2?: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> c1 = <span class="function">(<span class="params">...agrs: <span class="built_in">number</span>[]</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定参数兼容可选参数和剩余参数</span></span><br><span class="line">a1 = b1;</span><br><span class="line">a1 = c1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数 不兼容固定参数和剩余参数???</span></span><br><span class="line">b1 = c1;</span><br><span class="line">b1 = a1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余参数 ，可以兼容固定参数和可选参数</span></span><br><span class="line">c1 = a1;</span><br><span class="line">c1 = b1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 参数类型</span></span><br><span class="line"><span class="keyword">let</span> handler3 = <span class="function">(<span class="params">a: <span class="built_in">string</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// hof(handler3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3D &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">  z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point2D &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3d = <span class="function">(<span class="params">point: Point3D</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> p2d = <span class="function">(<span class="params">point: Point2D</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">p3d = p2d;</span><br><span class="line"><span class="comment">// p2d = p3d // 不兼容，类似于参数多的兼容参数少的，关闭strictFunctionTypes可以兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 返回值类型</span></span><br><span class="line"><span class="keyword">let</span> f1 = <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">location</span>: <span class="string">&quot;Beijing&quot;</span> &#125;);</span><br><span class="line">f1 = f2;</span><br><span class="line"><span class="comment">// f2 = f1 // 不兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数重载，重载列表与函数实现</span></span><br><span class="line"><span class="comment">// 运行时编译器会查找重载列表，使用第一个匹配的定义来执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// function overload(a: any, b: any, c: any): any &#123;&#125; // 不兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举兼容性</span></span><br><span class="line"><span class="built_in">enum</span> Fruit &#123;</span><br><span class="line">  Apple,</span><br><span class="line">  Banana,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Yellow,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fruit: Fruit.Apple = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> no: <span class="built_in">number</span> = Fruit.Apple;</span><br><span class="line"><span class="comment">// let color: Color.Red = Fruit.Apple //枚举之间不兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类兼容性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">p: <span class="built_in">number</span>, q: <span class="built_in">number</span></span>)</span> &#123;&#125;</span><br><span class="line">  id: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//   private name: string = &#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> s = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">p: <span class="built_in">number</span></span>)</span> &#123;&#125;</span><br><span class="line">  id: <span class="built_in">number</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//   private name: string = &#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aa = <span class="keyword">new</span> A(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> B(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 两个实例互相兼容，静态成员不做比较</span></span><br><span class="line">aa = bb;</span><br><span class="line">bb = aa;</span><br><span class="line"><span class="comment">// 若A中有私有成员,则不兼容</span></span><br><span class="line"><span class="comment">// 而父类与子类是兼容的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> cc = <span class="keyword">new</span> C1(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">aa = cc;</span><br><span class="line">cc = aa;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型兼容性</span></span><br><span class="line"><span class="keyword">interface</span> Empty&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// value: T</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1: Empty&lt;<span class="built_in">number</span>&gt; = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2: Empty&lt;<span class="built_in">string</span>&gt; = &#123;&#125;;</span><br><span class="line"><span class="comment">// obj1 = obj2; // 泛型接口中没有成员时兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个泛型函数定义相同，但是没有指定类型参数，则兼容</span></span><br><span class="line"><span class="keyword">let</span> log4 = &lt;T&gt;(x: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> log5 = &lt;U&gt;(y: U): <span class="function"><span class="params">U</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">log4 = log5; <span class="comment">// 兼容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编辑器：补全，自动提示</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ts类型保护机制：</span></span><br><span class="line"><span class="comment">// 类型推断，兼容性，保护</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建类型保护区块</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">enum</span> Type &#123;</span><br><span class="line">  Strong,</span><br><span class="line">  Week,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">helloJava</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello Java&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  java: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaScript</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">helloJavaScript</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello JavaScript&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  js: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型保护区块</span></span><br><span class="line"><span class="comment">// lang is Java 类型谓词 表明返回值为true的话，lang是java类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isJava</span>(<span class="params">lang: Java | JavaScript</span>): <span class="title">lang</span> <span class="title">is</span> <span class="title">Java</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (lang <span class="keyword">as</span> Java).helloJava !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"><span class="keyword">type</span>: Type, x: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lang = <span class="keyword">type</span> === Type.Strong ? <span class="keyword">new</span> Java() : <span class="keyword">new</span> JavaScript();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类型保护区块</span></span><br><span class="line">  <span class="keyword">if</span> (isJava(lang)) &#123;</span><br><span class="line">    lang.helloJava();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    lang.helloJavaScript();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if ((lang as Java).helloJava) &#123;</span></span><br><span class="line">  <span class="comment">//     (lang as Java).helloJava();</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     (lang as JavaScript).helloJavaScript();</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// instanceof 实例</span></span><br><span class="line">  <span class="comment">// if (lang instanceof Java) &#123;</span></span><br><span class="line">  <span class="comment">//     lang.helloJava()</span></span><br><span class="line">  <span class="comment">//     // lang.helloJavaScript()</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     lang.helloJavaScript()</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// in 对象中是有包含某个属性</span></span><br><span class="line">  <span class="comment">// if (&#x27;java&#x27; in lang) &#123;</span></span><br><span class="line">  <span class="comment">//     lang.helloJava()</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     lang.helloJavaScript()</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// typeof 判断基本的类型</span></span><br><span class="line">  <span class="comment">// if (typeof x === &#x27;string&#x27;) &#123;</span></span><br><span class="line">  <span class="comment">//     console.log(x.length)</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     console.log(x.toFixed(2))</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> lang;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getLanguage(Type.Week, <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h1><h2 id="交叉类型-amp-联合类型"><a href="#交叉类型-amp-联合类型" class="headerlink" title="交叉类型 &amp; 联合类型"></a>交叉类型 &amp; 联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶类型：为了灵活性而引入的一些特性</span></span><br><span class="line"><span class="comment">// 复杂多变的开发环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DogInterface &#123;</span><br><span class="line">  run(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> CatInterface &#123;</span><br><span class="line">  jump(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 交叉类型 &amp;，混入</span></span><br><span class="line"><span class="keyword">let</span> pet: DogInterface &amp; CatInterface = &#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">jump</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合类型 ｜ ：声明的类型可以为多个类型中的一个</span></span><br><span class="line"><span class="comment">// 不确定性，灵活性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aaa: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bbb: <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>; <span class="comment">// 字面量类型，类型和取值</span></span><br><span class="line"><span class="keyword">let</span> ccc: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog2</span> <span class="title">implements</span> <span class="title">DogInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat1</span> <span class="title">implements</span> <span class="title">CatInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">jump</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> Master &#123;</span><br><span class="line">  Boy,</span><br><span class="line">  Girl,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPet</span>(<span class="params">master: Master</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pet = master === Master.Boy ? <span class="keyword">new</span> Dog2() : <span class="keyword">new</span> Cat1();</span><br><span class="line">  <span class="comment">// 只能访问公共成员</span></span><br><span class="line">  <span class="comment">// pet.run()</span></span><br><span class="line">  <span class="comment">// pet.jump()</span></span><br><span class="line">  pet.eat();</span><br><span class="line">  <span class="keyword">return</span> pet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可区分的联合类型</span></span><br><span class="line"><span class="comment">// 联合类型 + 字面量类型</span></span><br><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  kind: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  size: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">  kind: <span class="string">&quot;rectangle&quot;</span>;</span><br><span class="line">  width: <span class="built_in">number</span>;</span><br><span class="line">  height: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">  kind: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Shape = Square | Rectangle | Circle;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> s.size * s.size; <span class="comment">// 使用 return 就不用加 break 了</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> s.height * s.width;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.radius ** <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">// never</span></span><br><span class="line">      <span class="comment">// 上面的分支都不匹配</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="function">(<span class="params">e: <span class="built_in">never</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">      &#125;)(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(area(&#123; <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>, <span class="attr">radius</span>: <span class="number">1</span> &#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts 中的索引类型</span></span><br><span class="line"><span class="keyword">let</span> obj12 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果keys是不存在的属性，也不会报错</span></span><br><span class="line"><span class="comment">// function getValues(obj: any, keys: string[]) &#123;</span></span><br><span class="line"><span class="comment">//     return keys.map(key =&gt; obj[key])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引查询操作符</span></span><br><span class="line"><span class="comment">// keyof T ，表示类型T的所有公共属性字面量的联合类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValues</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, keys: K[]</span>): <span class="title">T</span>[<span class="title">K</span>][] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> keys.map(<span class="function">(<span class="params">key</span>) =&gt;</span> obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getValues(obj12, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]));</span><br><span class="line"><span class="comment">// console.log(getValues(obj, [&#x27;d&#x27;, &#x27;e&#x27;]))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Obj &#123;</span><br><span class="line">  a: <span class="built_in">number</span>;</span><br><span class="line">  b: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询操作符</span></span><br><span class="line"><span class="comment">// keyof T</span></span><br><span class="line"><span class="keyword">let</span> key: keyof Obj;</span><br><span class="line"><span class="comment">// let key: &quot;a&quot; | &quot;b&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引访问操作符</span></span><br><span class="line"><span class="comment">// T[K]</span></span><br><span class="line"><span class="keyword">let</span> value: Obj[<span class="string">&quot;a&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型约束</span></span><br><span class="line"><span class="comment">// T extends U</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件类型</span></span><br><span class="line"><span class="comment">// 由条件表达式决定的类型</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// T extends U ? X : Y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// T extends string 泛型 T 约束</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">type</span> TypeName&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">  ? <span class="string">&quot;string&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="built_in">number</span></span><br><span class="line">  ? <span class="string">&quot;number&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="built_in">boolean</span></span><br><span class="line">  ? <span class="string">&quot;boolean&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="literal">undefined</span></span><br><span class="line">  ? <span class="string">&quot;undefined&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="built_in">Function</span></span><br><span class="line">  ? <span class="string">&quot;function&quot;</span></span><br><span class="line">  : <span class="string">&quot;object&quot;</span>; </span><br><span class="line"><span class="keyword">type</span> T1 = TypeName&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> T2 = TypeName&lt;<span class="built_in">string</span>[]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分布式的条件类型</span></span><br><span class="line"><span class="comment">// (A | B) extends U ? X : Y</span></span><br><span class="line"><span class="comment">// (A extends U ? X : Y) | (B extends U ? X : Y)</span></span><br><span class="line"><span class="keyword">type</span> T3 = TypeName&lt;<span class="built_in">string</span> | <span class="built_in">string</span>[]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型的过滤</span></span><br><span class="line"><span class="comment">// T extends U 的含义，T可以被赋值给U</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">type</span> Diff&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br><span class="line"><span class="comment">// 过滤掉第2个类型中含有的a</span></span><br><span class="line"><span class="keyword">type</span> T4 = Diff&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;e&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// Diff&lt;&quot;a&quot;, &quot;a&quot; | &quot;e&quot;&gt; | Diff&lt;&quot;b&quot;, &quot;a&quot; | &quot;e&quot;&gt; | Diff&lt;&quot;c&quot;, &quot;a&quot; | &quot;e&quot;&gt;</span></span><br><span class="line"><span class="comment">// never | &quot;b&quot; | &quot;c&quot;</span></span><br><span class="line"><span class="comment">// &quot;b&quot; | &quot;c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从类型中过滤掉 null 和 undefined</span></span><br><span class="line"><span class="keyword">type</span> NotNull&lt;T&gt; = Diff&lt;T, <span class="literal">null</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> T5 = NotNull&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方内置的条件类型</span></span><br><span class="line"><span class="comment">// Exclude&lt;T, U&gt;</span></span><br><span class="line"><span class="comment">// NonNullable&lt;T&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract&lt;T, U&gt;</span></span><br><span class="line"><span class="keyword">type</span> T6 = Extract&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;e&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the return type of a function type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// ReturnType&lt;T&gt;</span></span><br><span class="line"><span class="keyword">type</span> T8 = ReturnType&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : any;</span></span><br><span class="line"><span class="comment">// infer 表示代推断或者延迟推断</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;静态类型语言与动态类型语言&quot;&gt;&lt;a href=&quot;#静态类型语言与动态类型语言&quot; class=&quot;headerlink&quot; title=&quot;静态类型语言与动态类型语言&quot;&gt;&lt;/a&gt;静态类型语言与动态类型语言&lt;/h1&gt;&lt;p&gt;静态类型语言：在编译阶段确定所有变量的类型&lt;/p&gt;
</summary>
      
    
    
    
    <category term="TypeScript开发实战" scheme="http://jiezai.online/categories/TypeScript%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="TypeScript" scheme="http://jiezai.online/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>js运行原理</title>
    <link href="http://jiezai.online/2021/11/03/js%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>http://jiezai.online/2021/11/03/js%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</id>
    <published>2021-11-03T14:41:30.000Z</published>
    <updated>2021-11-03T15:45:17.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h1><p>浏览器内核分为两部分：渲染引擎；JS引擎</p><p>JS引擎逐渐独立，内核更倾向于渲染引擎</p><ul><li>Gecko：早期被NetScape和Firefox使用</li><li>Trident：微软开发，IE浏览器</li><li>Webkit：苹果基于KHTML开发、开源的，用于Safari，Google Chrome之前也在使用</li><li>Blink：Google基于Webkit开发，用于Chrome、Edge、Opera</li></ul><h1 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h1><p>将JavaScript代码翻译成机器代码</p><ul><li>SpiderMonkey：Brendan Eich开发，第一个js引擎</li><li>Chakra：微软开发，IE</li><li>JavascriptCore：Webkit</li><li>V8：Google</li></ul><p>内核：负责HTML解析、布局、渲染等等相关的工作</p><p>js引擎：解析、执行JavaScript代码</p><h1 id="V8引擎"><a href="#V8引擎" class="headerlink" title="V8引擎"></a>V8引擎</h1><ul><li>V8是用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等</li><li>它实现ECMAScript和WebAssembly，并在Windows 7或更高版本，macOS 10.12+和使用x64，IA-32， ARM或MIPS处理器的Linux系统上运行</li><li>V8可以独立运行，也可以嵌入到任何C ++应用程序中</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>源码：<a href="https://github.com/v8/v8">https://github.com/v8/v8</a></p><p>文档：<a href="https://v8.dev/">https://v8.dev/</a></p><ul><li>Parse：由js代码生成AST（抽象语法树）</li><li>Ignition：解释器，将AST转化为字节码ByteCode<ul><li>同时会收集TurboFan优化所需要的信息(比如函数参数的类型信息，有了类型才能进行真实的运算)</li><li>如果函数只调用一次，Ignition会执行解释执行ByteCode</li></ul></li><li>TurboFan：编译器，可以将字节码编译为CPU可以直接执行的机器码<ul><li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能;</li><li>但是，机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化(比如sum函数原来执行的是 number类型，后来执行变成了string类型)，之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码</li></ul></li></ul><p><img src="https://filescdn.proginn.com/3ab7eb5b3f88a24aeb98a19f43059261/fae32b4d579da90b03cc9ebe13c7a86a.webp"></p><h2 id="执行细节"><a href="#执行细节" class="headerlink" title="执行细节"></a>执行细节</h2><ol><li>Blink将源码交给V8引擎，Stream获取到源码并且进行<strong>编码转换</strong></li><li>Scanner会进行<strong>词法分析</strong>(lexical analysis)，词法分析会将代码转换成tokens</li><li>接下来tokens会被转换成AST树，经过Parser和PreParser<ol><li>Parser就是直接将tokens转成AST树架构</li><li><strong>PreParser</strong>：<ol><li>并不是所有的JavaScript代码，在一开始时就会被执行。那么对所有的JavaScript代码进行解析，必然会 影响网页的运行效率</li><li>所以V8引擎就实现了Lazy Parsing(延迟解析)的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂 时需要的内容，而对函数的全量解析是在函数被调用时才会进行</li></ol></li></ol></li><li>生成AST树后，会被Ignition转成字节码(bytecode)，之后的过程就是代码的执行过程</li></ol><h2 id="代码执行过程"><a href="#代码执行过程" class="headerlink" title="代码执行过程"></a>代码执行过程</h2><ol><li>在执行代码之前，会在堆内存中创建一个全局对象Global Object（GO）<ol><li>所有作用域都可以访问GO</li><li>包含一些全局方法和属性，如Date、Array、String、Number、setTimeout、setInterval</li><li>有一个window属性指向自己</li></ol></li><li>创建执行上下文栈（<strong>Execution Context Stack</strong>，ECS）：执行代码的调用栈<ol><li>构建<strong>Global Execution Context</strong>（GEC），用于执行全局代码块</li><li>GEC会被放入到ECS中执行（入栈）<ol><li>在代码执行前，在parser转成AST的过程中，会将全局定义的变量、函数等加入到GlobalObject中，但是并不会赋值（作用域提升hoisting）</li><li>在代码执行中，对变量赋值，或者执行其他的函数</li></ol></li></ol></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器内核&quot;&gt;&lt;a href=&quot;#浏览器内核&quot; class=&quot;headerlink&quot; title=&quot;浏览器内核&quot;&gt;&lt;/a&gt;浏览器内核&lt;/h1&gt;&lt;p&gt;浏览器内核分为两部分：渲染引擎；JS引擎&lt;/p&gt;
&lt;p&gt;JS引擎逐渐独立，内核更倾向于渲染引擎&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法 基础</title>
    <link href="http://jiezai.online/2021/07/26/%E7%AE%97%E6%B3%95-%E5%9F%BA%E7%A1%80/"/>
    <id>http://jiezai.online/2021/07/26/%E7%AE%97%E6%B3%95-%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-26T03:03:56.000Z</published>
    <updated>2021-07-26T03:05:17.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度</p><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h1&gt;&lt;p&gt;一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue 基础</title>
    <link href="http://jiezai.online/2021/07/25/vue-%E5%9F%BA%E7%A1%80/"/>
    <id>http://jiezai.online/2021/07/25/vue-%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-25T14:28:53.000Z</published>
    <updated>2021-07-26T03:03:30.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><h2 id="自定义v-model"><a href="#自定义v-model" class="headerlink" title="自定义v-model"></a>自定义v-model</h2><p>扩展v-model的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;child node</span><br><span class="line">Vue.component(&#39;custom-input&#39;, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#39;value&#39;,</span><br><span class="line">    event: &#39;change&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: String</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &#96;</span><br><span class="line">    &lt;input  </span><br><span class="line">     v-bind:value&#x3D;&quot;value&quot;  </span><br><span class="line">     v-on:change&#x3D;&quot;$emit(&#39;change&#39;, $event.target.value)&quot; </span><br><span class="line">    &gt;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;parent node</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&lt;custom-input v-model&#x3D;&quot;inputValue&quot;&gt;&lt;&#x2F;custom-input&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      inputValue: &quot;hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>vue是异步渲染</p><p>nextTick 是 Vue 提供的一个全局的API ，由于Vue的异步更新策略导致我们对数据的修改不会立马体现到都没变化上，此时如果想要立即获取更新后的dom的状态，就需要使用这个方法。</p><ul><li>vue 更新DOM是有策略的，不是同步更新</li><li>data改变之后，DOM不会立刻渲染</li><li>nextTick 可以接收一个函数做为入参</li><li>nextTick 后能拿到最新的数据</li></ul><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><p>Vue 实现了一套内容分发的 API，将<code>&lt;slot&gt;</code>元素作为承载分发内容的出口，这是vue文档上的说明。具体来说，slot就是可以让你在组件内添加内容的空间</p><p>具名插槽：根据slot的name属性进行对应的显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D; &#39;button&#39;&gt;</span><br><span class="line">      &lt;button&gt;  &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;slot name&#x3D; &#39;one&#39;&gt; 这就是默认值1&lt;&#x2F;slot&gt;</span><br><span class="line">      &lt;slot name&#x3D;&#39;two&#39;&gt; 这就是默认值2 &lt;&#x2F;slot&gt;</span><br><span class="line">      &lt;slot name&#x3D;&#39;three&#39;&gt; 这就是默认值3 &lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父组件：（引用子组件 ebutton）</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D; &#39;app&#39;&gt;</span><br><span class="line">     &lt;ebutton&gt; </span><br><span class="line">        &lt;template v-slot:one&gt; 这是插入到one插槽的内容 &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;template v-slot:two&gt; 这是插入到two插槽的内容 &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;template v-slot:three&gt; 这是插入到three插槽的内容 &lt;&#x2F;template&gt;</span><br><span class="line">     &lt;&#x2F;ebutton&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>作用域插槽：父组件可以拿到子组件的data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D; &#39;button&#39;&gt;</span><br><span class="line">      &lt;button&gt;  &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;slot name&#x3D; &#39;one&#39; :value1&#x3D;&#39;child1&#39;&gt; 这就是默认值1&lt;&#x2F;slot&gt;    &#x2F;&#x2F;绑定child1的数据</span><br><span class="line">      &lt;slot :value2&#x3D;&#39;child2&#39;&gt; 这就是默认值2 &lt;&#x2F;slot&gt;  &#x2F;&#x2F;绑定child2的数据，这里我没有命名slot</span><br><span class="line">  &lt;&#x2F;div&gt;           </span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#39;.button&#39;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    child1:&#39;数据1&#39;,</span><br><span class="line">    child2:&#39;数据2&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父组件：（引用子组件 ebutton）</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D; &#39;app&#39;&gt;</span><br><span class="line">     &lt;ebutton&gt; </span><br><span class="line">        &lt;template v-slot:one &#x3D; &#39;slotone&#39;&gt;  </span><br><span class="line">           &#123;&#123; slotone.value1 &#125;&#125;    &#x2F;&#x2F; 通过v-slot的语法 将子组件的value1值赋值给slotone </span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;template v-slot:default &#x3D; &#39;slottwo&#39;&gt; </span><br><span class="line">           &#123;&#123; slottwo.value2 &#125;&#125;  &#x2F;&#x2F; 同上，由于子组件没有给slot命名，默认值就为default</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">     &lt;&#x2F;ebutton&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>:is=”component-name”</p><p>适用于根据数据动态渲染组件，组件类型不确定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component :is&#x3D;&quot;currentTabComponent&quot;&gt;&lt;&#x2F;component&gt;</span><br></pre></td></tr></table></figure><p>每次切换时，都会重新创建对应的组件实例</p><p>因此，可以使用keep-alive缓存组件，频繁切换时不需要重新渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 失活的组件将会被缓存！--&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure><h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><p>注册组件时，使用import</p><p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>抽离公共逻辑</p><p>缺点：</p><ul><li>变量来源不明确</li><li>多mixin 命名冲突</li><li>mixin和组件多对多的关系，复杂度高</li></ul><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>hash模式，默认：路由在#之后</p><p>history模式：标准url</p><p>后者需要server端支持</p><p>动态路由：以冒号开头 ‘/uer/:id’ 能命中’/user/10’ ‘user/20’等</p><p>路由配置懒加载：使用import</p><h1 id="Vue原理"><a href="#Vue原理" class="headerlink" title="Vue原理"></a>Vue原理</h1><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>MVVM：数据驱动视图</p><h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><p>data数据改变，触发视图更新</p><p>Object.defineProperty，缺点需要递归，性能问题</p><p>proxy兼容性不好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础使用&quot;&gt;&lt;a href=&quot;#基础使用&quot; class=&quot;headerlink&quot; title=&quot;基础使用&quot;&gt;&lt;/a&gt;基础使用&lt;/h1&gt;&lt;h2 id=&quot;自定义v-model&quot;&gt;&lt;a href=&quot;#自定义v-model&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="http://jiezai.online/2021/07/25/%E5%9F%BA%E7%A1%80/"/>
    <id>http://jiezai.online/2021/07/25/%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-25T03:24:17.000Z</published>
    <updated>2021-07-25T14:28:27.551Z</updated>
    
    <content type="html"><![CDATA[<p>Css</p><ul><li>布局</li><li>定位</li><li>移动端</li></ul><p>ES</p><ul><li>原型</li><li>作用域 闭包</li><li>异步 单线程</li></ul><p>Web</p><ul><li>DOM BOM</li><li>ajax 跨域</li><li>事件 存储</li></ul><p>开发环境</p><ul><li>版本管理</li><li>调试抓包</li><li>打包构建</li></ul><p>运行环境</p><ul><li>页面渲染</li><li>性能优化</li><li>web安全</li></ul><p>网络</p><ul><li>headers</li><li>Restful API</li><li>缓存策略</li></ul><h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML CSS"></a>HTML CSS</h1><ul><li>html语义化：html结构化，代码易读，利于SEO</li><li>块级元素 内联元素<ul><li>块级：独占一行<ul><li>display: block/table; div h1 h2 table ul ol p</li></ul></li><li>内联：不会独占一行<ul><li>display:inline / inline-block; span img input button</li></ul></li></ul></li><li>盒模型的宽度<ul><li>offsetWidth = 内容宽度 + 内边距 + 边框</li><li>box-sizing:border-box; 不会被padding撑开</li></ul></li><li>margin纵向重叠<ul><li>在标准文档流中，竖直方向（是<strong>竖直方向</strong>，<strong>水平方向</strong>的<strong>不会出现</strong>塌陷现象）的margin会出现叠加现象，即较大的margin会覆盖掉较小的margin，竖直方向的两个盒子中间只有一个较大的margin]</li><li><strong>垂直之间塌陷的原则是以两盒子最大的外边距为准</strong></li><li>相邻元素的margin-top和margin-bottom会发生重叠</li><li>空白内容的p标签也会重叠</li></ul></li><li>margin负值<ul><li>margin-top和margin-left设置负值的话，元素会分别向上或向左移动；</li><li>margin-right设置负值，右侧元素左移，自身不受影响；</li><li>margin-bottom设置负值，下方元素上移，自身不受影响；</li></ul></li><li>BFC<ul><li>块级格式化上下文 block format context</li><li>一块独立渲染区域，内部元素的渲染不影响边界以外的元素</li><li><a href="https://zhuanlan.zhihu.com/p/25321647">BFC</a></li><li><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">bfc</a></li></ul></li><li>float clearfix</li><li>flex<ul><li>Flex-direction</li><li>Justify-content</li><li>Align-items</li><li>flex-wrap</li><li>align-self</li><li></li></ul></li><li>absolute relative</li><li>居中对齐</li><li>line-height</li><li>rem em px</li><li>响应式实现</li><li>CSS3 动画</li><li></li></ul><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><ul><li><p>typeof</p><ul><li>判断所有值类型</li><li>判断函数</li><li>判断是否时引用类型</li></ul></li><li><p>=== ==</p></li><li><p>值类型 引用类型</p><ul><li>Undefined number string boolean symbol</li><li>Object array null function</li></ul></li><li><p>深拷贝</p><ul><li>```<br>function deepCopy(obj1) {<pre><code>var obj2 = Array.isArray(obj1) ? [] : &#123;&#125;;if (obj1 &amp;&amp; typeof obj1 === &quot;object&quot;) &#123;    for (var i in obj1) &#123;        var prop = obj1[i]; // 避免相互引用造成死循环，如obj1.a=obj        if (prop == obj1) &#123;            continue;        &#125;        if (obj1.hasOwnProperty(i)) &#123;            // 如果子属性为引用数据类型，递归复制            if (prop &amp;&amp; typeof prop === &quot;object&quot;) &#123;                obj2[i] = (prop.constructor === Array) ? [] : &#123;&#125;;                arguments.callee(prop, obj2[i]); // 递归调用            &#125; else &#123;                // 如果是基本数据类型，只是简单的复制                obj2[i] = prop;            &#125;        &#125;    &#125;&#125;return obj2;</code></pre>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 原型和原型链</span><br><span class="line">  - 创建一个函数的时候，系统就会自动分配一个 &#96;prototype&#96;属性，可以用来存储可以让所有实例共享的属性和方法</span><br><span class="line">  - 每一个构造函数都拥有一个 &#96;prototype&#96; 属性，这个属性指向一个对象，也就是原型对象</span><br><span class="line">  - 原型对象默认拥有一个 &#96;constructor&#96; 属性，指向指向它的那个构造函数</span><br><span class="line">  - 每个对象都拥有一个隐藏的属性 &#96;__proto__&#96;，指向它的原型对象</span><br><span class="line">- 作用域和闭包</span><br><span class="line">  - 全局作用域</span><br><span class="line">  - 函数作用域</span><br><span class="line">  - 块级作用域</span><br><span class="line">  - 闭包：函数作为返回值或者参数传递，自由变量查找，从函数被定义的地方开始</span><br><span class="line">    - 隐藏数据</span><br><span class="line">- this</span><br><span class="line">  - 在函数执行时定义</span><br><span class="line">- 异步和单线程</span><br><span class="line"></span><br><span class="line">## event loop</span><br><span class="line"></span><br><span class="line">计算机系统的一种运行机制，js采用这种机制，来解决单线程的一些问题</span><br><span class="line"></span><br><span class="line">- 事件循环</span><br><span class="line">- js单线程</span><br><span class="line">- 异步基于回调实现</span><br><span class="line">- event loop就是异步回调的实现原理</span><br><span class="line"></span><br><span class="line">js执行顺序</span><br><span class="line"></span><br><span class="line">- 逐行执行</span><br><span class="line">- 报错则停止</span><br><span class="line">- 先执行同步代码，再执行异步代码</span><br><span class="line"></span><br><span class="line">（1）所有同步任务都在主线程上执行，形成一个[执行栈](https:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2013&#x2F;11&#x2F;stack.html)（execution context stack）。</span><br><span class="line"></span><br><span class="line">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</span><br><span class="line"></span><br><span class="line">（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</span><br><span class="line"></span><br><span class="line">（4）主线程不断重复上面的第三步。</span><br><span class="line"></span><br><span class="line">## 宏任务 微任务</span><br><span class="line"></span><br><span class="line">- 宏任务</span><br><span class="line"></span><br><span class="line">  - (macro)task，可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）</span><br><span class="line"></span><br><span class="line">  - 浏览器为了能够使得JS内部(macro)task与DOM任务能够有序的执行，会在一个(macro)task执行结束后，在下一个(macro)task 执行开始前，对页面进行重新渲染</span><br><span class="line"></span><br><span class="line">  - 包括</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;text</span><br><span class="line">      script(整体代码)</span><br><span class="line">      setTimeout</span><br><span class="line">      setInterval</span><br><span class="line">      I&#x2F;O</span><br><span class="line">      UI交互事件</span><br><span class="line">      postMessage</span><br><span class="line">      MessageChannel</span><br><span class="line">      setImmediate(Node.js 环境)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>微任务</p><ul><li><p>microtask,可以理解是在当前 task 执行结束后立即执行的任务。也就是说，在当前task任务后，下一个task之前，在渲染之前</p></li><li><p>包括</p><ul><li>```text<br>Promise.then<br>Object.observe<br>MutaionObserver<br>process.nextTick(Node.js 环境)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">遇到同步任务时，在主线程立刻执行该任务。</span><br><span class="line"></span><br><span class="line">此时主线程上有一个执行栈（execution context stack），所有同步代码会按顺序执行。</span><br><span class="line"></span><br><span class="line">遇到异步任务时，异步任务会进入到Event Table，当异步任务有结果后，将相对应的回调函数进行注册，放入事件队列（Event Queue）；（异步的宏任务有结果后，会放入宏任务事件队列；异步的微任务有结果后，会放入微任务事件队列；）</span><br><span class="line"></span><br><span class="line">（1）主线程从上到下依次执行所有同步任务</span><br><span class="line">（2）主线程读取微任务事件队列，若存在微任务，则依次执行所有微任务</span><br><span class="line">（3）主线程读取宏任务事件队列，若存在宏任务，则依次执行所有宏任务</span><br><span class="line">（4）依次重复第2步和第3步，直到清空微任务事件队列和宏任务事件队列</span><br><span class="line"></span><br><span class="line">## promise</span><br><span class="line"></span><br><span class="line">- 三种状态，状态不可逆</span><br><span class="line">  - pending 不会触发then和catch</span><br><span class="line">  - resolve 触发then</span><br><span class="line">  - reject 触发catch</span><br><span class="line">- then 正常返回resolved，里面报错的话则返回rejected</span><br><span class="line">- catch 正常返回resolved 里面有报错则返回rejected</span><br><span class="line"></span><br><span class="line"># BOM</span><br><span class="line"></span><br><span class="line">- nvaigator 浏览器信息</span><br><span class="line">  - userAgent</span><br><span class="line">- screen</span><br><span class="line">  - 屏幕信息</span><br><span class="line">- location</span><br><span class="line">  - url信息</span><br><span class="line">- History</span><br><span class="line">  - 路由</span><br><span class="line"></span><br><span class="line"># XmlHttpRequest</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">const xhr &#x3D; new XmlHttpRequets()</span><br><span class="line">xhr.open(&quot;GET&quot;,&quot;&#x2F;api&quot;,false)</span><br><span class="line">xhr.onreadystatechange &#x3D; function () &#123;</span><br><span class="line">  if(xhr.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class="line">    if(xhr.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">      &#x2F;&#x2F; success</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(null)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><ul><li>cookie 本身用于浏览器和服务端通信，被借用作为本地存储，会随着请求一同发送到服务器</li><li>localStorage 永久本地存储</li><li>sessionStorage 会话期间有效，关闭浏览器则删除</li><li><a href="https://jiezai.online/2021/05/13/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/#%E5%88%86%E7%B1%BB">前端缓存</a></li></ul><h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><ul><li>状态码<ul><li>1xx 服务器收到请求</li><li>2xx 请求成功</li><li>3xx 重定向 浏览器自动处理</li><li>4xx 客户端错误</li><li>5xx 服务端错误</li></ul></li><li>headers</li><li>缓存</li></ul><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><h2 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h2><p>从输入url到渲染出页面的整个过程</p><ul><li>输入url</li><li>dns解析：域名解析为IP地址</li><li>TCP连接</li><li>发起http请求</li><li>服务器处理请求并返回</li><li>渲染页面<ul><li>解析HTML，构建DOM树</li><li>解析CSS，生成CSS规则树</li><li>合并DOM树和CSS规则树，生成render树</li><li>布局render树</li><li>绘制render数、树，即绘制页面像素信息</li><li>GPU将各层合成，结果呈现在浏览器窗口中。</li></ul></li><li>断开链接</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>减少资源体积 压缩代码</p><p>减少访问次数 合并代码 缓存</p><p>CDN</p><p>css head js放最下面</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>xss</p><p>xsrf</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>var let const<ul><li>var 变量提升 </li><li>let const 块级作用域</li></ul></li><li>typeof<ul><li>值类型</li><li>object</li><li>function</li></ul></li><li>类型转换<ul><li>强制：parseInt parseFloat toString</li><li>隐式： if 逻辑运算 == +</li></ul></li><li>深度比较 模拟 lodash isEqual</li><li>split join 区别</li><li>slice splice</li><li>Call apply <ul><li>参数分开</li></ul></li><li>事件代理 委托</li><li>闭包</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Css&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布局&lt;/li&gt;
&lt;li&gt;定位&lt;/li&gt;
&lt;li&gt;移动端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型&lt;/li&gt;
&lt;li&gt;作用域 闭包&lt;/li&gt;
&lt;li&gt;异步 单线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Web&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://jiezai.online/2021/07/24/webpack/"/>
    <id>http://jiezai.online/2021/07/24/webpack/</id>
    <published>2021-07-24T06:50:31.000Z</published>
    <updated>2021-07-26T10:59:48.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>1、拆分配置和merge</p><p>smart：合并webpack配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; smart &#125; &#x3D; require(&#39;webpack&#39;)</span><br></pre></td></tr></table></figure><p>分别在dev和prod中导入base config，导出合并后的config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.base.config.js </span><br><span class="line">&#x2F;&#x2F; webpack.dev.config.js </span><br><span class="line">&#x2F;&#x2F; webpack.prod.config.js </span><br></pre></td></tr></table></figure><p>2、启用本地服务 dev server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;npm install webpack-dev-server</span><br><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">script: &#123;</span><br><span class="line">dev: &#39;webpack-dev-server --config webpack.dev.config.js&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.dev.config.js</span><br><span class="line">devServer:&#123;</span><br><span class="line">port: 8080,</span><br><span class="line">progress: true, &#x2F;&#x2F;显示进度条</span><br><span class="line">contentBase: distPath, &#x2F;&#x2F;根目录</span><br><span class="line">open: true, &#x2F;&#x2F;自动打开浏览器</span><br><span class="line">compress: true, &#x2F;&#x2F;启动gzip压缩</span><br><span class="line">&#x2F;&#x2F;设置代理</span><br><span class="line">proxy: &#123;</span><br><span class="line">  &#x2F;&#x2F;将匹配到&#x2F;api&#x2F;xxx的请求代理到http:&#x2F;&#x2F;localhost:3000&#x2F;api&#x2F;xxx</span><br><span class="line">&#39;&#x2F;api&#39;:&#39;http:&#x2F;&#x2F;localhost:3000&#39;，</span><br><span class="line">&#x2F;&#x2F;将匹配到&#x2F;api2&#x2F;xxx的请求代理到http:&#x2F;&#x2F;localhost:3000&#x2F;xxx</span><br><span class="line">&#39;&#x2F;api2&#39;:&#123;</span><br><span class="line">target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">pathRewrite: &#123;</span><br><span class="line">&#39;&#x2F;api2&#39;:&#39;&#x2F;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：webpack只能处理js和json文件</p><p>3、使用babel-loader处理ES6</p><p>需要配置babel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.base.config.js</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: &#x2F;\.js&#x2F;,</span><br><span class="line">loader: [&#39;babel-loader&#39;],</span><br><span class="line">include: srcPath,</span><br><span class="line">exclude: &#x2F;node_modules&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、处理css</p><p>loader的执行顺序是从后往前</p><ul><li>style-loader：将css代码挂载到html页面的style标签当中</li><li>css-loader：解析css文件，把css模块加载到JS代码中，并不会使用这个模块</li><li>postcss-loader：可以增加浏览器适配前缀</li><li>less-loader：解析.less文件</li></ul><p>5、处理图片</p><p>一般开发环境使用file-loader，生成环境使用url-loader</p><p>file-loader：开发环境使用，图片直接打包到根目录下</p><p>url-loader：生成环境使用，传入options，将小图片转为base64编码（减少http请求），大图片放到img目录下</p><h1 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h1><p>基本配置只能做demo，不能做线上项目</p><p>1、多入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">index: &#39;.&#x2F;src&#x2F;index&#39;,</span><br><span class="line">other: &#39;.&#x2F;src&#x2F;other&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">filename: &#39;[name].[contentHash:8].js&#39;,</span><br><span class="line">path: &#39;.&#x2F;dist&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HtmlWebpackPlugin 需要生成多个实例，分别对应多个入口，并且参数chunks只引入该入口的对应的js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">filename: &#39;index&#39;,</span><br><span class="line">chunks: [&#39;index&#39;]</span><br><span class="line">&#125;)</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &#39;.&#x2F;src&#x2F;other.html&#39;,</span><br><span class="line">filename: &#39;other&#39;,</span><br><span class="line">chunks: [&#39;other&#39;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、抽离css文件</p><p>避免将css插入到style标签中，而是通过link引入css文件</p><p>使用MiniCssExtractPlugin，将style-loader 替换为MiniCssExtractPlugin.loader</p><p>在plugin中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new MiniCssExtractPlugin &#123;</span><br><span class="line">filename: &#39;css&#x2F;main.[contentHash:8].css&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压缩css</p><p>在optimization中使用minimizer</p><p>3、抽离公共代码，第三方模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">chunks: &#39;all&#39;,&#x2F;&#x2F;全部</span><br><span class="line">cacheGroups: &#123;</span><br><span class="line">&#x2F;&#x2F; 第三方模块</span><br><span class="line">vendor: &#123;</span><br><span class="line">name: &#39;vendor&#39;,&#x2F;&#x2F; chunk 名称</span><br><span class="line">priority: 1, &#x2F;&#x2F; 权限更高，优先抽离</span><br><span class="line">test: &#39;&#x2F;node_modules&#x2F;&#39;, &#x2F;&#x2F; 匹配</span><br><span class="line">minSize: 0, &#x2F;&#x2F; 大小限制，太小不抽取</span><br><span class="line">minChunks:1 &#x2F;&#x2F; 最少复用几次</span><br><span class="line">&#125;,</span><br><span class="line">common: &#123;</span><br><span class="line">&#x2F;&#x2F;公共模块</span><br><span class="line">name: &#39;common&#39;,</span><br><span class="line">priority: 0,</span><br><span class="line">minSize: 0,</span><br><span class="line">minChunks: 2</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new HtmlWebpackPlugin中的chunk需要引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunks:[&#39;index&#39;,&#39;vendor&#39;,&#39;common&#39;]</span><br></pre></td></tr></table></figure><p>4、懒加载</p><p>​    异步代码中import js</p><p>5、Babel</p><p>​    vue-loader</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>module：各个源码文件，一切皆模块</li><li>chunk：多模块合并成的</li><li>bundle：最终的输出文件</li></ul><h1 id="webpack性能优化"><a href="#webpack性能优化" class="headerlink" title="webpack性能优化"></a>webpack性能优化</h1><h2 id="构建速度"><a href="#构建速度" class="headerlink" title="构建速度"></a>构建速度</h2><ul><li>优化babel-loader：开启缓存，明确范围（include, exclude）</li><li>IgnorePlugin：忽略第三方包指定目录，让这些指定目录不要被打包进去</li><li>noParse：不去解析属性值代表的库的依赖（比如打包的时候依赖了三方库（jquyer、lodash）等，而这些三方库里面没有其他依赖，可以通过配置noParse不去解析文件，提高打包效率）</li><li>happyPack：多进程打包</li><li>ParallelUglifyPlugin：多进程，并行压缩输出的 JS 代码</li><li>自动刷新</li><li>热更新</li><li>DLLPlugin：把第三方库代码分离开，并且每次文件更改的时候，它只会打包该项目自身的代码。所以打包速度会更快</li></ul><h2 id="产出代码"><a href="#产出代码" class="headerlink" title="产出代码"></a>产出代码</h2><ul><li>小图片base64编码</li><li>bundle加hash，命中缓存</li><li>懒加载</li><li>提取公共代码</li><li>CDN</li><li>使用production<ul><li>代码压缩</li><li>删除调试代码</li><li>Tree-Shaking</li></ul></li><li>scope hosting</li></ul><h1 id="ES6-Module-Commonjs"><a href="#ES6-Module-Commonjs" class="headerlink" title="ES6 Module Commonjs"></a>ES6 Module Commonjs</h1><p>ES6 Module 静态引入，编译时引入</p><p>Commonjs 动态引入，执行时引入</p><p>所以esm可以实现Tree-Shaking</p><h1 id="webpack构建流程"><a href="#webpack构建流程" class="headerlink" title="webpack构建流程"></a>webpack构建流程</h1><ul><li>初始化参数：合并根据命令行参数和webpack.config.js的配置，得到最终配置</li><li>开始编译：根据配置初始化complier对象，注册plugins</li><li>确定入口：根据entry入口文件，开始递归解析</li><li>编译模块：根据文件类型和loader配置，调用对应的loader进行处理，再进行递归处理</li><li>编译过程中：插件在对应的生命周期和事件进行处理</li><li>完成编译并输出：生成chunk</li><li>打包：写入对应的文件目录</li></ul><h1 id="loader-plugin"><a href="#loader-plugin" class="headerlink" title="loader plugin"></a>loader plugin</h1><p>loader主要用来解析和检测对应资源</p><p>plugin：通过webpack内部的钩子机制，进行一些额外的工作，比如代码混淆</p><h2 id="webpack-分包策略"><a href="#webpack-分包策略" class="headerlink" title="webpack 分包策略"></a>webpack 分包策略</h2><p>在 webpack 打包过程中，经常出现 <code>vendor.js</code>， <code>app.js</code> 单个文件较大的情况，这偏偏又是网页最先加载的文件，这就会使得加载时间过长，从而使得白屏时间过长，影响用户体验。所以我们需要有合理的分包策略</p><h2 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>前端为何要进行打包和构建<ul><li>体积更小，加载更快</li><li>编译高级语言和语法</li><li>兼容性和错误提示</li><li>统一、高效的开发环境</li><li>统一的构建流程和产出标准</li><li>集成构建规范（提测、上线）</li></ul></li><li>loader和plugin<ul><li>loader模块转换器</li><li>plugin扩展插件</li></ul></li><li>Babel 和 webpack<ul><li>语法编译</li><li>打包构建工具</li></ul></li><li>如何产出一个lib</li><li>懒加载</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h1&gt;&lt;p&gt;1、拆分配置和merge&lt;/p&gt;
&lt;p&gt;smart：合并webpack配置&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="webpack" scheme="http://jiezai.online/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://jiezai.online/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue TDD</title>
    <link href="http://jiezai.online/2021/06/26/Vue-TDD/"/>
    <id>http://jiezai.online/2021/06/26/Vue-TDD/</id>
    <published>2021-06-26T06:30:35.000Z</published>
    <updated>2021-06-26T09:14:27.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h1><p>Test Driver Development </p><p>Red-Green Development</p><p>测试驱动开发</p><ol><li>编写测试用例</li><li>运行测试用例，此时无法通过</li><li>编写代码，使测试用例通过</li><li>优化代码，完成开发</li></ol><p>优势</p><ul><li>长期减少回归bug</li><li>提高代码质量</li><li>测试覆盖率高</li><li>减少错误的测试代码</li></ul><h1 id="Vue-Test-Utils"><a href="#Vue-Test-Utils" class="headerlink" title="Vue Test Utils"></a>Vue Test Utils</h1><p><a href="https://vue-test-utils.vuejs.org/zh/">Vue Test Utils</a></p><blockquote><p>和 mount 一样，创建一个包含被挂载和渲染的 Vue 组件的 Wrapper，不同的是被存根的子组件。</p></blockquote><blockquote><p>Vue Test Utils 允许你通过 shallowMount 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;HelloWorld.vue&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;renders props.msg when passed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&#x27;new message&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(HelloWorld, &#123;</span><br><span class="line">      propsData: &#123; msg &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    expect(wrapper.text()).toMatch(msg)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TDD&quot;&gt;&lt;a href=&quot;#TDD&quot; class=&quot;headerlink&quot; title=&quot;TDD&quot;&gt;&lt;/a&gt;TDD&lt;/h1&gt;&lt;p&gt;Test Driver Development &lt;/p&gt;
&lt;p&gt;Red-Green Development&lt;/p&gt;
&lt;p&gt;测试驱动开</summary>
      
    
    
    
    <category term="Jest" scheme="http://jiezai.online/categories/Jest/"/>
    
    
    <category term="vue" scheme="http://jiezai.online/tags/vue/"/>
    
    <category term="Vue" scheme="http://jiezai.online/tags/Vue/"/>
    
    <category term="jest" scheme="http://jiezai.online/tags/jest/"/>
    
  </entry>
  
  <entry>
    <title>Jest 进阶</title>
    <link href="http://jiezai.online/2021/06/18/Jest-%E8%BF%9B%E9%98%B6/"/>
    <id>http://jiezai.online/2021/06/18/Jest-%E8%BF%9B%E9%98%B6/</id>
    <published>2021-06-18T09:28:43.000Z</published>
    <updated>2021-06-26T06:29:00.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h1><p>toMatchSnapshot：将参数与快照进行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> generateConfig = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        server: <span class="string">&#x27;http://localhost&#x27;</span>,</span><br><span class="line">        port: <span class="number">8000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; generateConfig &#125; <span class="keyword">from</span> <span class="string">&quot;./demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test generateConfig&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// expect(generateConfig()).toEqual(&#123;</span></span><br><span class="line">    <span class="comment">//     server: &#x27;http://localhost&#x27;,</span></span><br><span class="line">    <span class="comment">//     port: 8000</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    expect(generateConfig()).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行测试时，如果与上一次执行时记录的快照不匹配则会失败</p><p>可以通过更新快照解决</p><p>常用于配置文件与UI组件的测试</p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>正常调用定时器，不会执行到callback的调用</p><p>因为测试代码已经执行完了，callback已经交给了环境</p><h2 id="done"><a href="#done" class="headerlink" title="done"></a>done</h2><p>正常执行定时器，done表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> timer = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cb()</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;test timer&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    timer(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        expect(<span class="number">1</span>).toBe(<span class="number">1</span>)</span><br><span class="line">        done()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>加上done 表示等待，jest 在执行单元测试的时候，如果它看到一个测试用例(test) 的第二个函数参数有一个done参数， 它就知道，这个测试用例，执行完最后一行代码的时候，还不算测试完成，还要等待，等待done函数的执行，只有done函数执行了，这个测试用例才算完成</p><h2 id="useFakeTimers-runAllTimers"><a href="#useFakeTimers-runAllTimers" class="headerlink" title="useFakeTimers + runAllTimers"></a>useFakeTimers + runAllTimers</h2><p>模拟定时器，不需要等待</p><ul><li>使用<code>jest.useFakeTimers()</code>声明使用虚拟的时间</li><li>再使用 <code>jest.runAllTimers()</code> 将全部定时器立即运行结束</li><li>如果内部有多个定时器，只想运行一个定时器可以使用<code>jest.runOnlyPendingTimers()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jest.useFakeTimers();</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test timer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn()</span><br><span class="line">    timer(fn)</span><br><span class="line">    jest.runAllTimers()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="useFakeTimers-advanceTimersByTime"><a href="#useFakeTimers-advanceTimersByTime" class="headerlink" title="useFakeTimers + advanceTimersByTime"></a>useFakeTimers + advanceTimersByTime</h2><p>立即设置推后多少毫秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jest.useFakeTimers();</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test timer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn()</span><br><span class="line">    timer(fn)</span><br><span class="line">    <span class="comment">// jest.runAllTimers()</span></span><br><span class="line">    jest.advanceTimersByTime(<span class="number">3000</span>)</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="对Class的测试"><a href="#对Class的测试" class="headerlink" title="对Class的测试"></a>对Class的测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Util</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.test.js</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> util = <span class="literal">null</span></span><br><span class="line">beforeAll(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    util = <span class="keyword">new</span> Util()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test util function a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(util.a()).toBe(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在单元测试中 我们更应该关注函数是否被调用 而不是函数中的复杂方法</p><p>因此使用 mock 方法来进行测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// classDemo.js</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> demoFunction = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> util = <span class="keyword">new</span> Util()</span><br><span class="line">    util.a()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demoFunction</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// classDemo.test.js</span></span><br><span class="line">jest.mock(<span class="string">&#x27;./util&#x27;</span>) <span class="comment">// jest.mock 类的话，会自动把类的构造函数和方法变成jest.fn() 不是真正地需要执行类中复杂的方法</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> demoFunction <span class="keyword">from</span> <span class="string">&quot;./classDemo&quot;</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;test demoFunction&#x27;</span>,<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    demoFunction()</span><br><span class="line">    expect(Util).toHaveBeenCalled()</span><br><span class="line">    <span class="comment">// console.log(Util.mock.instances[0])</span></span><br><span class="line">    expect(Util.mock.instances[<span class="number">0</span>].a).toHaveBeenCalled()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动模拟类，自定义类的方法实现 /__mocks__/util.js</span></span><br><span class="line"><span class="keyword">const</span> Util = jest.fn()</span><br><span class="line">Util.prototype.a = jest.fn(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">Util.prototype.b = jest.fn()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Util</span><br></pre></td></tr></table></figure><h1 id="对DOM的测试"><a href="#对DOM的测试" class="headerlink" title="对DOM的测试"></a>对DOM的测试</h1><p>jest在node环境下模拟了一套DOM的api，可以直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).append(<span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo.test.js</span></span><br><span class="line"><span class="keyword">import</span> appendDiv <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;在 body 中添加 1 个 div&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  addDivToBody()</span><br><span class="line">  expect($(<span class="string">&#x27;body&#x27;</span>).find(<span class="string">&#x27;div&#x27;</span>).length).toBe(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快照&quot;&gt;&lt;a href=&quot;#快照&quot; class=&quot;headerlink&quot; title=&quot;快照&quot;&gt;&lt;/a&gt;快照&lt;/h1&gt;&lt;p&gt;toMatchSnapshot：将参数与快照进行匹配&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="Jest" scheme="http://jiezai.online/categories/Jest/"/>
    
    
    <category term="Jest" scheme="http://jiezai.online/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>Jest 入门</title>
    <link href="http://jiezai.online/2021/06/18/Jest-%E5%85%A5%E9%97%A8/"/>
    <id>http://jiezai.online/2021/06/18/Jest-%E5%85%A5%E9%97%A8/</id>
    <published>2021-06-18T06:30:02.000Z</published>
    <updated>2021-06-18T09:28:42.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p><a href="https://www.jestjs.cn/docs/getting-started">Jest</a></p><p>安装<code>Jest</code>以及<code>babel</code></p><p><code>Jest</code>配置项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest</span><br><span class="line">npm install @babel/core @babel/preset-env</span><br><span class="line">npx jest --init</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./sum&quot;</span>;</span><br><span class="line">test(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grmh2c20yyj311k0f4jtz.jpg" alt="image-20210618155426491"></p><h1 id="matchers"><a href="#matchers" class="headerlink" title="matchers"></a>matchers</h1><p>Jest使用匹配器以不同的方式测试数据是否相等</p><p>在sum.test.js中</p><ul><li><code>test</code> ：测试用例，接受两个参数，第一个是测试的名称，第二个是函数</li><li><code>expect</code>：期望</li><li><code>toBe</code>：匹配器，用于匹配expect的值是否和匹配器中的值相等</li></ul><h2 id="Common-Matchers"><a href="#Common-Matchers" class="headerlink" title="Common Matchers"></a>Common Matchers</h2><ul><li><code>toBe</code>：相对于 <code>===</code> 和 <code>Object.is</code>，匹配值（不能用于测试浮点数）</li><li><code>toEqual</code>：匹配值，可以用于引用类型的匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;two plus two is four&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="number">2</span> + <span class="number">2</span>).toBe(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line">test(<span class="string">&#x27;object assignment&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;<span class="attr">one</span>: <span class="number">1</span>&#125;;</span><br><span class="line">  data[<span class="string">&#x27;two&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">  expect(data).toEqual(&#123;<span class="attr">one</span>: <span class="number">1</span>, <span class="attr">two</span>: <span class="number">2</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Truthiness"><a href="#Truthiness" class="headerlink" title="Truthiness"></a>Truthiness</h2><p>当需要判断<code>undefined</code>，<code>null</code>和<code>false</code>时</p><ul><li><code>toBeNull</code> ：只匹配<code>null</code></li><li><code>toBeUndefined</code> ：只匹配<code>undefined</code></li><li><code>toBeDefined</code> ：匹配已定义的值，与<code>toBeUndefined</code>相反</li><li><code>toBeTruthy</code>：匹配所有结果为<code>true</code>的值，相对于 <code>==</code></li><li><code>toBeFalsy</code> ：匹配所有结果为false的值，相对于 <code>==</code></li><li><code>not</code>：对后续的匹配取反</li></ul><h2 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h2><ul><li><code>toBeGreaterThan</code></li><li><code>toBeGreaterThanOrEqual</code></li><li><code>toBeLessThan</code></li><li><code>toBeLessThanOrEqual</code></li><li><code>toBe</code></li><li><code>toEqual</code></li><li><code>toBeCloseTo</code></li></ul><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><ul><li><code>toMatch</code>：检查字符串是否匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;test toMatch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">  expect(str).toMatch(<span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">  expect(str).toMatch(<span class="regexp">/[a-z]/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Arrays-and-iterables"><a href="#Arrays-and-iterables" class="headerlink" title="Arrays and iterables"></a>Arrays and iterables</h2><ul><li><code>toContain</code>：匹配数组/Set/字符串中是否包含item</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shoppingList = [</span><br><span class="line">  <span class="string">&#x27;diapers&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;kleenex&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;trash bags&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;paper towels&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;milk&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;the shopping list has milk on it&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(shoppingList).toContain(<span class="string">&#x27;milk&#x27;</span>);</span><br><span class="line">  expect(<span class="keyword">new</span> <span class="built_in">Set</span>(shoppingList)).toContain(<span class="string">&#x27;milk&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p><a href="https://www.jestjs.cn/docs/expect">https://www.jestjs.cn/docs/expect</a></p><h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><ul><li><code>beforeAll</code>：所有测试之前执行</li><li><code>afterAll</code>：所有测试执行完之后</li><li><code>beforeEach</code>：每个测试实例之前执行</li><li><code>afterEach</code>：每个测试实例完成之后执行</li></ul><h2 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h2><p>describe创造一个块，可以将多个测试用例放在一个块中</p><p>每个块中也可以使用钩子函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - beforeAll&#x27;</span>));</span><br><span class="line">afterAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - afterAll&#x27;</span>));</span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - beforeEach&#x27;</span>));</span><br><span class="line">afterEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - afterEach&#x27;</span>));</span><br><span class="line">test(<span class="string">&#x27;&#x27;</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;1 - test&#x27;</span>));</span><br><span class="line">describe(<span class="string">&#x27;Scoped / Nested block&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - beforeAll&#x27;</span>));</span><br><span class="line">  afterAll(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - afterAll&#x27;</span>));</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - beforeEach&#x27;</span>));</span><br><span class="line">  afterEach(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - afterEach&#x27;</span>));</span><br><span class="line">  test(<span class="string">&#x27;&#x27;</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;2 - test&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不在钩子函数或者测试用例中的代码，会被最先执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;outer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;describe outer-a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">&#x27;describe inner 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;describe inner 1&#x27;</span>);</span><br><span class="line">    test(<span class="string">&#x27;test 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;test for describe inner 1&#x27;</span>);</span><br><span class="line">      expect(<span class="literal">true</span>).toEqual(<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;describe outer-b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">&#x27;test 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test for describe outer&#x27;</span>);</span><br><span class="line">    expect(<span class="literal">true</span>).toEqual(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">&#x27;describe inner 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;describe inner 2&#x27;</span>);</span><br><span class="line">    test(<span class="string">&#x27;test for describe inner 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;test for describe inner 2&#x27;</span>);</span><br><span class="line">      expect(<span class="literal">false</span>).toEqual(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;describe outer-c&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// describe outer-a</span></span><br><span class="line"><span class="comment">// describe inner 1</span></span><br><span class="line"><span class="comment">// describe outer-b</span></span><br><span class="line"><span class="comment">// describe inner 2</span></span><br><span class="line"><span class="comment">// describe outer-c</span></span><br><span class="line"><span class="comment">// test for describe inner 1</span></span><br><span class="line"><span class="comment">// test for describe outer</span></span><br><span class="line"><span class="comment">// test for describe inner 2</span></span><br></pre></td></tr></table></figure><h2 id="test-only"><a href="#test-only" class="headerlink" title="test.only"></a>test.only</h2><p>只执行单个测试用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test.only(<span class="string">&#x27;this will be the only test that runs&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="literal">true</span>).toBe(<span class="literal">false</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;this test will not run&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(<span class="string">&#x27;A&#x27;</span>).toBe(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runCallback.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">runCallback</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runCallback.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;runCallback&#125; <span class="keyword">from</span> <span class="string">&#x27;./runCallback.js&#x27;</span></span><br><span class="line">test(<span class="string">&#x27;test runCallback&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> func = jest.fn() <span class="comment">// mock函数，捕获函数的调用</span></span><br><span class="line">  func.mockReturnValueOnce(<span class="string">&#x27;dell&#x27;</span>)</span><br><span class="line">  runCallback(func)</span><br><span class="line">  runCallback(func)</span><br><span class="line">  runCallback(func)</span><br><span class="line">  expect(func).toBeCalled()</span><br><span class="line">  expect(func.mock.calls.length).toBe(<span class="number">3</span>)</span><br><span class="line">  expect(func.mock.results[<span class="number">0</span>].value).toBe(<span class="string">&#x27;dell&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>jest.fn()：这里使用jest模拟一个函数，可以传入一个函数生成带逻辑的函数</li><li>mockReturnValueOnce(：设置调用一次函数的返回值，设置几个就是几次</li><li>mockReturnValue：设置调用函数的返回值</li><li>mock 每个jest生成的函数都有mock属性，包含<ul><li>calls：每次调用函数的参数</li><li>instances：每次调用函数的this</li><li>invocationCallOrder：函数执行顺序</li><li>results：每次调用的返回值</li></ul></li></ul><h1 id="模拟接口"><a href="#模拟接口" class="headerlink" title="模拟接口"></a>模拟接口</h1><p>jest.mock(‘axios’)模拟axios请求数据，不会发送真实请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">jest.mock(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;测试 getData，使用mock&#x27;</span>, <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="comment">// 模拟第一次接收到的数据</span></span><br><span class="line">  axios.get.mockResolvedValueOnce(&#123;</span><br><span class="line">    data: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 模拟每一次接收到的数据</span></span><br><span class="line">  axios.get.mockResolvedValue(&#123;</span><br><span class="line">    data: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> getData()</span><br><span class="line">  expect(data1).toBe(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  expect(data2).toBe(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.jestjs.cn/docs/getting-started&quot;&gt;Jest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安</summary>
      
    
    
    
    <category term="Jest" scheme="http://jiezai.online/categories/Jest/"/>
    
    
    <category term="Jest" scheme="http://jiezai.online/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 11 盛最多水的容器</title>
    <link href="http://jiezai.online/2021/05/24/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://jiezai.online/2021/05/24/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2021-05-24T02:21:03.000Z</published>
    <updated>2021-05-24T09:51:33.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h1><p><a href="https://leetcode-cn.com/problems/container-with-most-water/">题目链接</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqtaz4s1soj30u00wmwja.jpg" alt="image-20210524102222093"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>两层循环的时间复杂度O(n^2)会超时</p><p>因为面积 = 长 * 宽，长是两个高度中较小的值，所以，从左右两端开始，只有当高度增大时，面积才会增大</p><p>只需要选择正确的高度，指针前进即可</p><p>这样就减少了不必要的遍历</p><p>所以用双指针，将其降为O(n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> len = height.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, j = len - <span class="number">1</span>; i &lt; j;) &#123;</span><br><span class="line">        <span class="keyword">let</span> currHeight = height[i] &lt; height[j] ? height[i++] : height[j--]</span><br><span class="line">        max = <span class="built_in">Math</span>.max(currHeight * (j-i+<span class="number">1</span>),max)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;盛最多水的容器&quot;&gt;&lt;a href=&quot;#盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;盛最多水的容器&quot;&gt;&lt;/a&gt;盛最多水的容器&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/containe</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://jiezai.online/2021/05/17/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://jiezai.online/2021/05/17/%E8%B7%A8%E5%9F%9F/</id>
    <published>2021-05-17T02:28:59.000Z</published>
    <updated>2021-05-19T08:50:22.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">MDN 同源策略</a></p><p><strong>浏览器的同源策略一直是开发中经常遇到的问题,它是浏览器最核心也是最基本的安全功能,如果缺少了同源策略,则浏览器的正常功能都会受到影响</strong></p><p>域名、协议、端口相同则为同源</p><p>这个策略可以阻止一个页面上的恶意脚本通过页面的DOM对象获得访问另一个页面上敏感信息的权限</p><p>是为了保护用户的信息安全,为了防止恶意网站窃取用户在浏览器上的数据,如果<code>不是同源</code>的站点,将不能进行如下操作 :</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读写</li><li>DOM 和 Js对象无法获得</li><li>AJAX请求不能发送</li></ul><p>出现跨域请求时,请求会发到跨域的服务器,并且会服务器会返回数据,只不过浏览器”拒收”返回的数据</p><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>前端调用的后端接口不属于同一个域（域名或端口不同），就会产生跨域问题，也就是说应用访问了该应用域名或端口之外的域名或端口。</p><h1 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h1><ul><li>浏览器解除跨域限制</li><li>JSONP</li><li>服务端修改</li></ul><h2 id="浏览器解除跨域限制"><a href="#浏览器解除跨域限制" class="headerlink" title="浏览器解除跨域限制"></a>浏览器解除跨域限制</h2><p>浏览器默认都是开启跨域安全检查的，我们可以使用命令行启动浏览器，加上禁止安全检查的参数</p><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域</p><p>JSONP 的工作原理是什么？ - 贺师俊的回答 - 知乎 <a href="https://www.zhihu.com/question/19966531/answer/13502030">https://www.zhihu.com/question/19966531/answer/13502030</a></p><p>缺点：</p><ul><li>只支持GET方式</li><li>需要服务端配合修改</li><li>发送的不是 XHR 请求，无法使用 XHR 对象</li></ul><h2 id="服务端修改"><a href="#服务端修改" class="headerlink" title="服务端修改"></a>服务端修改</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>Cross-Origin Resource Sharing</p><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">阮一峰 cors</a></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>跨域只是浏览器向服务器发送请求的时候，浏览器的限制。而服务器和服务器之间是没有跨域的限制的。</p><p>反向代理是利用代理服务器接收到请求之后，转发给真正的服务器，并把结果返回到浏览器上。</p><p>vue中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;^/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;http://localhost:8082/&#x27;</span> <span class="comment">// api server</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Web安全</title>
    <link href="http://jiezai.online/2021/05/14/Web%E5%AE%89%E5%85%A8/"/>
    <id>http://jiezai.online/2021/05/14/Web%E5%AE%89%E5%85%A8/</id>
    <published>2021-05-14T03:39:38.000Z</published>
    <updated>2021-05-14T08:46:19.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h1><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Cross Site Script，跨站脚本攻击</p><p> XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的</p><p>例子：</p><p>留言板，正常网页需要展示用户的留言，如果留言内容是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(“hey!you are attacked”)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么网页解析到这条留言时，就会执行这段js代码</p><p>危害：</p><ul><li><strong>窃取网页浏览中的cookie值</strong></li><li><strong>劫持流量实现恶意跳转</strong></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><strong>反射型XSS</strong>：是指xss代码在请求的url中，而后提交到服务器，服务器解析后，XSS代码随着响应内容一起传给客户端进行解析执行。（直接反射显示在页面）</li><li><strong>存储型XSS</strong>：具有攻击性的脚本被保存到了服务器端（数据库，内存，文件系统）并且可以被普通用户完整的从服务的取得并执行，从而获得了在网络上传播的能力。（这种攻击多见于论坛、博客和留言板，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的被存放在服务器的后端存储器中。当其它用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行）</li><li><strong>DOM型XSS</strong>：使用DOM可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式；DOM型XSS是一种特殊类型的反射型XSS，是基于DOM文档对象模型的一种漏洞</li></ul><h2 id="XSS防范"><a href="#XSS防范" class="headerlink" title="XSS防范"></a>XSS防范</h2><ul><li>编码：对用户输入的数据进行HTML Entity 编码。把字符转换成 转义字符。Encode的作用是将$var等一些字符进行转化，使得浏览器在最终输出结果上是一样的</li><li>过滤：将用户数据输出到html 标签的属性时，必须经过标签属性的转义。注意：不包含href, src, style和事件处理函数属性（比如onmouseover）</li><li>校正：避免直接对HTML Entity进行解码。使用DOM Parse转换，校正不配对的DOM标签</li><li>HttpOnly：防止直接拿到cookie</li></ul><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>Cross-site request forgery 跨站请求伪造</p><p>也被称为One Click Attack或者session riding，通常缩写为CSRF或者XSRF</p><p>挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><p>例子：</p><ol><li>用户Alice登录和访问某银行网站A，保留<code>cookie</code>。</li><li>Alice被某些信息诱导访问危险网站B。</li><li>危险网站B上有一个<code>&lt;img&gt;</code>标签：<code>&lt;img src=&quot;http://www.examplebank.com/account=Alice&amp;amount=1000&amp;payfor=Badman&quot;&gt;</code></li><li>这个标签的src不指向一张图片，而是一个http请求，这个请求向银行要求将Alice的1000元转给Badman，由于Alice的浏览器上有<code>cookie</code>，这样浏览器发出的这个请求就能得到响应执行。</li><li>这样Alice的钱就被偷了。</li></ol><h1 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h1><ul><li>验证码</li><li>请求来源限制：通过HTTP Referer字段，验证请求来源地址是否合法</li><li>token：服务端发送token，前端解析出token放到请求中，服务端验证token是否正确</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web安全&quot;&gt;&lt;a href=&quot;#Web安全&quot; class=&quot;headerlink&quot; title=&quot;Web安全&quot;&gt;&lt;/a&gt;Web安全&lt;/h1&gt;&lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端缓存</title>
    <link href="http://jiezai.online/2021/05/13/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/"/>
    <id>http://jiezai.online/2021/05/13/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/</id>
    <published>2021-05-13T03:54:31.000Z</published>
    <updated>2021-05-13T08:56:53.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端缓存"><a href="#前端缓存" class="headerlink" title="前端缓存"></a>前端缓存</h1><p>资源的缓存机制是提高资源使用效率的有效方法</p><p>缓存是性能优化中的简单高效的一种方式，一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqgo0x3wu7j30q60h840a.jpg" alt="未命名文件"></p><h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">MDN Cookies</a></p><p>HTTP协议是无状态的，而服务端的业务必须是要有状态的。Cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用</p><p>Cookie格式就是一系列的键值对</p><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><p>基于安全性考虑，一个网页的Cookie只能被该域下的网页访问（可以设置作用域，允许发送）</p><ul><li>会话型：保存在内存中，浏览器退出时被清除</li><li>持续型：有一个有效期，在有效期内，每次访问Cookie所属域时，都将Cookie发送给服务端</li></ul><p>限制访问：secure与HttpOnly</p><h3 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h3><p>WebStorage是HTML新增的本地存储解决方案之一</p><p>WebStorage提供两种类型的API：localStorage和sessionStorage</p><p>localStorage在本地永久性存储数据，除非显式将其删除或清空</p><p>sessionStorage存储的数据只在会话期间有效，关闭浏览器则自动删除</p><ul><li><code>sessionStorage</code> 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</li><li><code>localStorage</code> 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li></ul><p>WebStorage一般浏览器提供5M的存储空间</p><p>当前页面使用的storage被其他页面修改时会触发StorageEvent事件</p><h3 id="WebSql"><a href="#WebSql" class="headerlink" title="WebSql"></a>WebSql</h3><p>Web SQL 是在浏览器上模拟数据库，可以使用 JS 来操作 SQL 完成对数据的读写。</p><p>Web SQL 数据库 API 并不是 HTML5 规范的一部分，但是它是一个独立的规范，引入了一组使用 SQL 操作客户端数据库的 APIs</p><p>对于简单的数据，使用sessionStorage和localStorage能够很好地完成存取，但是对于处理复杂的关系型数据，它就力不从心了。这时必须选用websql或者IndexedDB。</p><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））。该 API 使用索引实现对数据的高性能搜索</p><h3 id="Application-Cache"><a href="#Application-Cache" class="headerlink" title="Application Cache"></a>Application Cache</h3><p>HTML5 引入了应用程序缓存（Application Cache），这意味着可对 web 应用进行缓存，并可在没有因特网连接时进行访问</p><ul><li>离线浏览 - 用户可在应用离线时使用它们</li><li>速度 - 已缓存资源加载得更快</li><li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源</li></ul><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><p>PWA全称Progressive Web App，即渐进式WEB应用</p><p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能</p><ul><li>可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏</li><li>实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能</li><li>实现了消息推送</li></ul><p>这些特性将使得 Web 应用渐进式接近原生 App</p><h2 id="BFCache"><a href="#BFCache" class="headerlink" title="BFCache"></a>BFCache</h2><p>往返缓存Back/Forward cache</p><p>是浏览器在前进后退按钮上为了提升历史页面的渲染速度的一种策略。</p><p>该策略具体表现为，当用户前往新页面时，将当前页面的浏览器DOM状态保存到bfcache中；当用户点击后退按钮的时候，将页面直接从bfcache中加载，节省了网络请求的时间</p><h1 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h1><p>基于HTTP协议</p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>浏览器在发起http请求前首先检查的就是强制缓存</p><p>强制缓存的含义是，当客户端请求后，会先访问缓存数据库看缓存是否存在。如果存在则直接返回；不存在则请求真的服务器，响应后再写入缓存数据库</p><p><strong>强制缓存直接减少请求数，是提升最大的缓存策略</strong></p><p>相关的字段是Expires和Cache-Control</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>这是 HTTP 1.0 的字段，表示缓存到期时间，是一个绝对的时间 (当前时间+缓存时间，服务器时间)</p><p>在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求</p><p>缺点：</p><ul><li>是服务器的绝对时间，由于客户端时间被修改或者时差、误差等造成时间不一致，无法命中强缓存</li><li>写法复杂</li></ul><h2 id="Cache-control"><a href="#Cache-control" class="headerlink" title="Cache-control"></a>Cache-control</h2><p>在HTTP/1.1中，增加了一个字段Cache-control，该字段表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求</p><p><strong>Cache-control 的优先级高于 Expires</strong>，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段我们都会设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max-age&#x3D;&lt;seconds&gt;</span><br></pre></td></tr></table></figure><p>设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与<code>Expires</code>相反，时间是相对于请求的时间（客户端）。</p><ul><li><code>max-age</code>：最大有效时间</li><li><code>must-revalidate</code>：如果超过了 <code>max-age</code> 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。</li><li><code>no-cache</code>：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。</li><li><code>no-store</code>: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比。</li><li><code>public</code>：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)</li><li><code>private</code>：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值</li></ul><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>当强制缓存失效(超过规定时间)时，就需要使用对比缓存，由服务器决定缓存内容是否失效</p><p>浏览器会在请求头中携带缓存的tag向服务器发起请求，服务器根据该tag值去判断是否使用缓存，其中tag字段分别为Last-Modified和Etag</p><h3 id="Last-Modified-amp-If-Modified-Since"><a href="#Last-Modified-amp-If-Modified-Since" class="headerlink" title="Last-Modified &amp; If-Modified-Since"></a>Last-Modified &amp; If-Modified-Since</h3><ol><li>服务器通过 <code>Last-Modified</code> 字段告知客户端，资源最后一次被修改的时间，例如<br><code>Last-Modified: Mon, 10 Nov 2018 09:10:11 GMT</code></li><li>浏览器将这个值和内容一起记录在缓存数据库中。</li><li>下一次请求相同资源时时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 <code>Last-Modified</code> 的值写入到请求头的 <code>If-Modified-Since</code> 字段</li><li>服务器会将 <code>If-Modified-Since</code> 的值与 <code>Last-Modified</code> 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。</li></ol><p>缺点：</p><ul><li>如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。</li><li>如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。</li></ul><h2 id="Etag-amp-If-None-Match"><a href="#Etag-amp-If-None-Match" class="headerlink" title="Etag &amp; If-None-Match"></a>Etag &amp; If-None-Match</h2><p>为了解决上述问题，出现了一组新的字段 <code>Etag</code> 和 <code>If-None-Match</code></p><p><code>Etag</code> 存储的是文件的特殊标识(一般都是 hash 生成的)，服务器存储着文件的 <code>Etag</code> 字段。之后的流程和 <code>Last-Modified</code> 一致，只是 <code>Last-Modified</code> 字段和它所表示的更新时间改变成了 <code>Etag</code> 字段和它所表示的文件 hash，把 <code>If-Modified-Since</code> 变成了 <code>If-None-Match</code>。服务器同样进行比较，命中返回 304, 不命中返回新资源和 200。</p><p><strong>Etag 的优先级高于 Last-Modified</strong></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>对于不经常变化的资源，设置较长的过期时间</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></table></figure><p>对于经常变化的资源，设置no-cache，直接进行协商缓存</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure><h1 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h1><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端缓存&quot;&gt;&lt;a href=&quot;#前端缓存&quot; class=&quot;headerlink&quot; title=&quot;前端缓存&quot;&gt;&lt;/a&gt;前端缓存&lt;/h1&gt;&lt;p&gt;资源的缓存机制是提高资源使用效率的有效方法&lt;/p&gt;
&lt;p&gt;缓存是性能优化中的简单高效的一种方式，一个优秀的缓存策略可以缩短网</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue3+vite+ts</title>
    <link href="http://jiezai.online/2021/05/09/vue3-vite-ts/"/>
    <id>http://jiezai.online/2021/05/09/vue3-vite-ts/</id>
    <published>2021-05-09T11:46:52.000Z</published>
    <updated>2021-05-15T08:26:08.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目模版"><a href="#项目模版" class="headerlink" title="项目模版"></a>项目模版</h1><p><a href="https://github.com/Sorryjjj/vue3-template.git">vue3-template</a></p><h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><p><a href="https://cn.vitejs.dev/guide/">vite</a></p><p>创建项目模版</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create @vitejs/app vite-template --template vue-ts</span><br></pre></td></tr></table></figure><h1 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h1><p><a href="https://www.jestjs.cn/docs/getting-started">jest</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yarn add jest --dev // 安装jest</span><br><span class="line">yarn add @types/jest --dev  // jest提示</span><br><span class="line">yarn add babel-jest --dev   // babel转换</span><br><span class="line">yarn add @babel/preset-env --dev // babel预设</span><br><span class="line">yarn add vue-jest@next --dev // 解析.vue</span><br><span class="line">yarn add @vue/test-utils@next --dev // 安装vue/test-utils</span><br><span class="line">yarn add @babel/preset-typescript --dev // babel ts</span><br><span class="line">yarn add ts-jest --dev // 安装ts-test</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jest.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    transform: &#123;</span><br><span class="line">        <span class="string">&quot;^.+\\.jsx?$&quot;</span>: <span class="string">&quot;babel-jest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;^.+\\.vue?$&quot;</span>: <span class="string">&quot;vue-jest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;^.+\\.tsx?$&quot;</span>: <span class="string">&quot;ts-jest&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: &#123; <span class="attr">node</span>: <span class="string">&#x27;current&#x27;</span> &#125; &#125;], </span><br><span class="line">        <span class="string">&quot;@babel/preset-typescript&quot;</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gitHooks"><a href="#gitHooks" class="headerlink" title="gitHooks"></a>gitHooks</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add yorkie --dev</span><br><span class="line">yarn add chalk --dev</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;gitHooks&quot;: &#123;</span><br><span class="line">  &quot;pre-commit&quot;: &quot;lint-staged&quot;,</span><br><span class="line">  &quot;commit-msg&quot;: &quot;node scripts/verifyCommit.js&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">  &quot;*.&#123;ts,vue&#125;&quot;: &quot;eslint --fix&quot;,</span><br><span class="line">  &quot;*&quot;: &quot;prettier -w -u&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D eslint eslint-plugin-vue @vue/eslint-config-typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin typescript</span><br><span class="line">yarn add lint-staged</span><br><span class="line">yarn add -D prettier eslint-plugin-prettier @vue/eslint-config-prettier</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es2021: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/typescript/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/prettier&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/prettier/@typescript-eslint&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2021</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  rules: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: [</span><br><span class="line">      &#123;</span><br><span class="line">        find: <span class="string">&quot;@/&quot;</span>,</span><br><span class="line">        replacement: join(__dirname, <span class="string">&quot;src/&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目模版&quot;&gt;&lt;a href=&quot;#项目模版&quot; class=&quot;headerlink&quot; title=&quot;项目模版&quot;&gt;&lt;/a&gt;项目模版&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Sorryjjj/vue3-template.git&quot;&gt;vue3-t</summary>
      
    
    
    
    <category term="vue3" scheme="http://jiezai.online/categories/vue3/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 88 合并两个有序数组</title>
    <link href="http://jiezai.online/2021/04/27/leetcode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://jiezai.online/2021/04/27/leetcode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-04-27T09:58:43.000Z</published>
    <updated>2021-04-27T10:10:40.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">链接</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpygg2vqrkj30zc0koq5l.jpg" alt="image-20210427175910693"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>两个数组归并，使用双指针，从数组末尾开始填充</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = nums1.length - <span class="number">1</span>;</span><br><span class="line">    m--;</span><br><span class="line">    n--;</span><br><span class="line">    <span class="keyword">while</span> (m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[m] &gt; nums2[n]) &#123;</span><br><span class="line">            nums1[index] = nums1[m--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[index] = nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = m; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            nums1[index--] = nums1[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            nums1[index--] = nums2[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可以合并数组之后排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    nums1.splice(m, nums1.length - m, ...nums2);</span><br><span class="line">    nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-sorted-array/&quot;&gt;链接&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://jiezai.online/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 26 删除有序数组中的重复项</title>
    <link href="http://jiezai.online/2021/04/27/leetcode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://jiezai.online/2021/04/27/leetcode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2021-04-27T09:50:14.000Z</published>
    <updated>2021-04-27T09:57:43.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">链接</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gpyg8dnt2gj30zq08idhf.jpg" alt="image-20210427175143022"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注意给定的是有序数组，所以相同元素是连续的</p><p>快慢指针，遇到不同值则修改慢指针对应位置的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> curr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(curr &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[curr] != nums[index]) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            nums[index] = nums[curr];</span><br><span class="line">        &#125;</span><br><span class="line">        curr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一开始没注意到有序，暴力解法，两层循环删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; nums.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] == nums[i]) &#123;</span><br><span class="line">                nums.splice(j, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorte</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="数组" scheme="http://jiezai.online/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 206 反转链表</title>
    <link href="http://jiezai.online/2021/04/27/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://jiezai.online/2021/04/27/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2021-04-27T02:26:58.000Z</published>
    <updated>2021-04-27T02:56:04.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gpy3g1otndj31320na43g.jpg" alt="image-20210427102918414"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>假设除第一个节点，链表的其余部分已经被反转，那么只需要处理如何反转第一个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">let</span> newHead = reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>边遍历边修改链表，需要记录前一节点与当前节点，每次反转前一节点与当前节点，之后更新两个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> curr = head;</span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(curr) &#123;</span><br><span class="line">        tmp = curr.next; <span class="comment">// 缓存下一个节点</span></span><br><span class="line">        curr.next = pre; <span class="comment">// 当前节点指向前一节点，反转当前节点</span></span><br><span class="line">        pre = curr; <span class="comment">// 更新前一节点为当前节点</span></span><br><span class="line">        curr  = tmp; <span class="comment">// 更新当前节点为下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/&quot;&gt;反转链表&lt;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://jiezai.online/categories/leetcode/"/>
    
    
    <category term="链表" scheme="http://jiezai.online/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
