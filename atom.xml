<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杰仔的博客</title>
  
  <subtitle>回忆是一条没有尽头的路</subtitle>
  <link href="http://jiezai.online/atom.xml" rel="self"/>
  
  <link href="http://jiezai.online/"/>
  <updated>2021-04-06T15:48:00.109Z</updated>
  <id>http://jiezai.online/</id>
  
  <author>
    <name>Jie Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>串</title>
    <link href="http://jiezai.online/2021/04/06/%E4%B8%B2/"/>
    <id>http://jiezai.online/2021/04/06/%E4%B8%B2/</id>
    <published>2021-04-06T13:38:16.000Z</published>
    <updated>2021-04-06T15:48:00.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><p>即字符串，是由0个或多个字符组成的有限序列</p><ul><li>字串：串中任意个连续的字符组成的子序列</li><li>主串：包含子串的串</li><li>串的长度：串中字符的个数</li><li>空串：串长度为0</li></ul><p>串是一种特殊的线性表</p><p>串的数据对象限定为字符集</p><p>串的基本操作（增删改查）通常以子串为操作对象</p><h1 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h1><p>任何数据存到计算机中一定是二进制数</p><p>字符与二进制的对应规则即为编码</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>英文字符：ASCII字符集</p><p>中英文：Unicode字符集</p><p>基于同一个字符集可以有多种编码方案：UTF8，UTF-16</p><h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxLen 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> ch[MaxLen];</span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">&#125; SString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> *ch;</span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">&#125; HString;</span><br></pre></td></tr></table></figure><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><p>存储密度低，每个字符1B，每个指针4B</p><p>一般：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> ch[<span class="number">4</span>];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125; StringNode, * String;</span><br></pre></td></tr></table></figure><h1 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h1><p><strong>模式匹配</strong>：在主串中找到与模式串相同的子串，并返回所在位置</p><p>将主串中与模式串长度相同的子串拿出来，逐个与模式串对比，若有不匹配，则开始匹配下一个子串</p><p>最坏时间复杂度O(mn)</p><h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>当子串与模式串不匹配时，主串指针i不回溯，模式串指针j=next[j]</p><p>O(n+m)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prefix_table</span><span class="params">(<span class="keyword">char</span> pattern [], <span class="keyword">int</span> prefix [], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  prefix[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(pattern[i] == pattern[len]) &#123;</span><br><span class="line">      len++;</span><br><span class="line">      prefix[i] = len;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        len = prefix[len - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        prefix[i] = len;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move_prefix_table</span> <span class="params">(<span class="keyword">int</span> prefix [], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    prefix[i] = prefix [i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  prefix[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_search</span><span class="params">(<span class="keyword">char</span> text[], <span class="keyword">char</span> pattern [])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">  <span class="keyword">int</span> m = <span class="built_in">strlen</span>(text);</span><br><span class="line">  <span class="keyword">int</span> * prefix = <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * n);</span><br><span class="line">  <span class="built_in">prefix_table</span>(pattern,prefix,n);</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; m) &#123;</span><br><span class="line">    <span class="keyword">if</span>(j == n<span class="number">-1</span> &amp;&amp; text[i] == pattern[j]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Found pattern at %d\n&quot;</span>, i - j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(text[i] == pattern[j]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      j = prefix[j];</span><br><span class="line">      <span class="keyword">if</span>(j == <span class="number">-1</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> pattern[] = <span class="string">&quot;ABABCABAA&quot;</span>;</span><br><span class="line">  <span class="keyword">char</span> text[] = <span class="string">&quot;ABABABCABAABABABAB&quot;</span>;</span><br><span class="line">  <span class="built_in">kmp_search</span>(text,pattern);</span><br><span class="line">  <span class="comment">/*int prefix[9];</span></span><br><span class="line"><span class="comment">  int n = 9;</span></span><br><span class="line"><span class="comment">  prefix_table(pattern,prefix,n);</span></span><br><span class="line"><span class="comment">  move_prefix_table(prefix,n);</span></span><br><span class="line"><span class="comment">  for(int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,prefix[i]);</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KMP算法优化"><a href="#KMP算法优化" class="headerlink" title="KMP算法优化"></a>KMP算法优化</h1><p>优化next数组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;串&quot;&gt;&lt;a href=&quot;#串&quot; class=&quot;headerlink&quot; title=&quot;串&quot;&gt;&lt;/a&gt;串&lt;/h1&gt;&lt;p&gt;即字符串，是由0个或多个字符组成的有限序列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字串：串中任意个连续的字符组成的子序列&lt;/li&gt;
&lt;li&gt;主串：包含子串的串&lt;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://jiezai.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="串" scheme="http://jiezai.online/tags/%E4%B8%B2/"/>
    
    <category term="KMP" scheme="http://jiezai.online/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>栈和队列</title>
    <link href="http://jiezai.online/2021/04/05/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://jiezai.online/2021/04/05/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2021-04-05T06:27:33.000Z</published>
    <updated>2021-04-05T13:11:53.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈（Stack）是只允许在一端进行插入和删除操作的线性表</p><p>后进先出</p><h2 id="顺序存储的实现"><a href="#顺序存储的实现" class="headerlink" title="顺序存储的实现"></a>顺序存储的实现</h2><p>使用静态数组实现，并需要记录栈顶指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  ELemType data[MaxSize]; <span class="comment">//静态数组存放栈元素</span></span><br><span class="line">  <span class="keyword">int</span> top; <span class="comment">//栈顶指针</span></span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">  S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, ElemType x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S.top == MaxSize - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  S.data[++S.top] = x;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(S.top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  x = S.data[S.top--];</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h2><p>顺序栈的存储空间大小需要事先开辟好，很多时候对每个栈各自单独开辟存储空间的利用率不如将各个栈的存储空间共享</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp8y8g21vqj30ix09kq3w.jpg" alt="image-20210405162955566"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  ELemType data[MaxSize]; </span><br><span class="line">  <span class="keyword">int</span> top1,top2;</span><br><span class="line">&#125; SqDoubleStack</span><br></pre></td></tr></table></figure><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>只允许在一端插入，在另一端删除的线性表</p><p>先进先出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  ELemType data[MaxSize]; <span class="comment">//静态数组存放栈元素</span></span><br><span class="line">  <span class="keyword">int</span> front,rear; <span class="comment">//队头与队尾指针</span></span><br><span class="line">  <span class="keyword">int</span> size;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">  Q.front = Q.rear = <span class="number">0</span>;</span><br><span class="line">  Q.size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, ElemType x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>((Q.rear + <span class="number">1</span>) % MaxSize == Q.front) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Q.data[Q.rear] = x;</span><br><span class="line">  Q.rear = (Q.rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">  size++;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(Q.rear == Q.front) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  x = Q.data[Q.front];</span><br><span class="line">  Q.front = (Q.front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">  size--;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>指允许两端都可以进行入队和出队操作的队列</p><h1 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h1><h2 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h2><p>算法思想：</p><p>若是左括号，入栈；</p><p>若是右括号，出栈一个左括号判断是否与之匹配；</p><p>检验到字符串尾，还要检查栈是否为空。</p><p>只有栈空，整个字符串才是括号匹配的。</p><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp8xvewv91j30hw05agma.jpg" alt="image-20210405161722406"></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="built_in">F</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Fib</span>(n<span class="number">-1</span>) + <span class="built_in">Fib</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h1><h2 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;栈（Stack）是只允许在一端进行插入和删除操作的线性表&lt;/p&gt;
&lt;p&gt;后进先出&lt;/p&gt;
&lt;h2 id=&quot;顺序存储的实现&quot;&gt;&lt;a href=&quot;#顺序</summary>
      
    
    
    
    <category term="数据结构" scheme="http://jiezai.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈" scheme="http://jiezai.online/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="http://jiezai.online/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="http://jiezai.online/2021/04/04/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://jiezai.online/2021/04/04/%E7%BA%BF%E6%80%A7%E8%A1%A8/</id>
    <published>2021-04-04T11:35:16.000Z</published>
    <updated>2021-04-04T14:19:18.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>线性表（linear list）是具有相同数据类型的n（n≥0）个数据元素的有限序列。其中n为表长。当n=0时 线性表是一个空表</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>线性表中第一个元素称为表头元素；最后一个元素称为表尾元素。 </li><li>除第一个元素外，每个元素有且仅有一个直接前驱。</li><li> 除最后一个元素外，每个元素有且仅有一个直接后继。</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>初始化</li><li>销毁</li><li>插入</li><li>删除</li><li>按值查找</li><li>按位查找</li></ul><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><ul><li>顺序存储：顺序表</li><li>链式存储：链表</li></ul><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>用顺序存储的方式实现线性表：把逻辑上相邻的元素存储在物理位置也相邻的存储单元中</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> data[MaxSize];</span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqlList &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; MaxSize; i++) &#123;</span><br><span class="line">    L.data[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> *data;</span><br><span class="line">  <span class="keyword">int</span> MaxSize;</span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span> </span>&#123;</span><br><span class="line">  L.data = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(InitSize * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">  L.length = <span class="number">0</span>;</span><br><span class="line">  L.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSize</span><span class="params">(SeqList &amp;L, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *p = L.data;</span><br><span class="line">  L.data = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>((L.MaxSize + len) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; L.length; i++) &#123;</span><br><span class="line">    L.data[i] = p[i];</span><br><span class="line">  &#125;</span><br><span class="line">  L.MaxSize = L.MaxSize + len;</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul><li>随机访问：可以在O(1)时间内找到第i个元素</li><li>存储密度高，每个节点只存储数据元素</li><li>拓展容量不方便</li><li>插入、删除数据元素不方便</li></ul><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SeqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length+<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(L.length &gt; L.MaxSize) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = L.length; j &gt;= i; j--) &#123;    </span><br><span class="line">    L.data[j] = L.data[j<span class="number">-1</span>];  </span><br><span class="line">  &#125;  </span><br><span class="line">  L.data[i<span class="number">-1</span>] = e;  </span><br><span class="line">  L.length++;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SeqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> &amp;e)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  e = L.data[i<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; L.length; j++) &#123;    </span><br><span class="line">    L.data[j<span class="number">-1</span>] = L.data[j];  </span><br><span class="line">  &#125;</span><br><span class="line">  L.length--;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><ul><li>单链表</li><li>双链表</li><li>循环链表</li><li>静态链表</li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LNode, *LinkList;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  L = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList1</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  L = (LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *p;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">  p = L;</span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; j &lt; i<span class="number">-1</span>) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定结点的前插操作：在p结点前插入s结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode *p, LNode *s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span> || s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  ElemType temp = p-&gt;data;<span class="comment">//s连接到p之后，交换数据域部分</span></span><br><span class="line">  p-&gt;data = s-&gt;data;</span><br><span class="line">  s-&gt;data = temp;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定结点，仅当p不是最后一个结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode *p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *q = p-&gt;next;</span><br><span class="line">  p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkList));</span><br><span class="line">  LNode *s,*r = L;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x != <span class="number">9999</span>) &#123;</span><br><span class="line">    s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = r-&gt;next;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkList));</span><br><span class="line">  L-&gt;next = null;</span><br><span class="line">  LNode *s;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x != <span class="number">9999</span>) &#123;</span><br><span class="line">    s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = L-&gt;next;</span><br><span class="line">    L-&gt;next = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用于链表的逆置</p><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125; DNode, *DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在p结点之后插入s结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *p,DNode *s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span> || s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    p-&gt;next-&gt;prior = s;</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  s-&gt;prior = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除p的后继结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode *p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  DNode *q = p-&gt;next;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    q-&gt;next-&gt;prior = p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="http://jiezai.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线性表" scheme="http://jiezai.online/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="链表" scheme="http://jiezai.online/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="顺序表" scheme="http://jiezai.online/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>移动端布局</title>
    <link href="http://jiezai.online/2021/04/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    <id>http://jiezai.online/2021/04/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/</id>
    <published>2021-04-03T07:25:53.000Z</published>
    <updated>2021-04-03T13:43:52.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h1><p>两种方案：单独制作移动端页面与响应式页面</p><h2 id="单独制作移动端页面"><a href="#单独制作移动端页面" class="headerlink" title="单独制作移动端页面"></a>单独制作移动端页面</h2><ul><li>流式布局</li><li>flex布局</li><li>rem布局</li></ul><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><ul><li>也叫百分比布局，非固定像素布局</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度进行伸缩，不受固定像素的限制</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">980px</span>;</span><br><span class="line"><span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><ul><li>弹性布局</li><li>通过给父盒子添加felx属性，来控制子盒子的位置和排列方式</li><li>用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex</li><li>当父元素设置为flex后，子元素的float,clear和vertical-align会失效</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: purple;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>父元素属性：</strong></p><ul><li>flex-direction：设置主轴方向（水平和垂直），row、column、row-reverse、column-reverse</li><li>justify-content：设置子元素排列方式<ul><li>space-around：平均分配剩余空间</li><li>space-between：先两边贴边，在分配剩余空间</li><li>center：子元素居中对齐</li><li>flex-start：从头部开始（默认）</li><li>flex-end：从尾部开始</li></ul></li><li>flex-wrap：设置子元素是否换行（默认不换行，如果装不开，会缩小子元素盒子宽度<ul><li>nowrap：默认 不换行</li><li>wrap：换行</li></ul></li><li>align-item：设置侧轴子元素排列方式，在子元素为单行时使用<ul><li>center：居中</li><li>stretch：拉伸（子元素不设置高度）</li><li>flex-start：从上到下</li><li>flex-end：从下到上</li></ul></li><li>align-content：设置侧轴子元素排列方式，在子元素多行出现换行时使用</li><li>flex-flow：复合写法 <code>flex-flow: column wrap</code></li></ul><p><strong>子元素属性：</strong></p><ul><li>flex：子元素占据父元素的份数，属性为数字 <code>flex:1</code></li><li>align-self：设置子元素单独的排列方式</li><li>order：控制子元素排列的优先级，默认是0</li></ul><h3 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h3><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><ul><li>root em，相对单位，相对于html元素，类似于em，em是父元素字体大小</li><li>可以通过修改html里面的文字大小来改变页面中的元素大小，可以整体控制</li><li>媒体查询：针对不同的屏幕尺寸设置不同的样式，重置浏览器大小时，页面重新渲染</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="媒体查询结合rem"><a href="#媒体查询结合rem" class="headerlink" title="媒体查询结合rem"></a><strong>媒体查询结合rem</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">top</span>&gt;</span></span><br><span class="line">  top</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="媒体查询引入资源"><a href="#媒体查询引入资源" class="headerlink" title="媒体查询引入资源"></a><strong>媒体查询引入资源</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style320.css"</span> @<span class="attr">media</span>=<span class="string">"screen and (min-width: 320px)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style640.css"</span> @<span class="attr">media</span>=<span class="string">"screen and (min-width: 640px)"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h4><ul><li>将不能等比自适应的元素，达到当设备尺寸发生变化时，等比例适配当前设备</li><li>使用媒体查询根据不同设备按比例设置html字体大小，页面元素使用rem作为尺寸</li><li>按照设计稿动态计算</li></ul><p>技术方案：</p><ul><li>less + 媒体查询 + rem</li><li>flexible.js + rem</li></ul><h2 id="响应式页面"><a href="#响应式页面" class="headerlink" title="响应式页面"></a>响应式页面</h2><p>使用媒体查询针对不同宽度的设备进行布局和样式的设置</p><p>响应式布局需要一个父级作为布局容器，来配合子元素来实现变化效果</p><p>在不同屏幕下通过媒体查询改变布局容器的大小，再改变子元素的排列方式和大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">970px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端布局&quot;&gt;&lt;a href=&quot;#移动端布局&quot; class=&quot;headerlink&quot; title=&quot;移动端布局&quot;&gt;&lt;/a&gt;移动端布局&lt;/h1&gt;&lt;p&gt;两种方案：单独制作移动端页面与响应式页面&lt;/p&gt;
&lt;h2 id=&quot;单独制作移动端页面&quot;&gt;&lt;a href=&quot;#单独制作</summary>
      
    
    
    
    <category term="css" scheme="http://jiezai.online/categories/css/"/>
    
    
    <category term="css" scheme="http://jiezai.online/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://jiezai.online/2021/04/02/TypeScript/"/>
    <id>http://jiezai.online/2021/04/02/TypeScript/</id>
    <published>2021-04-02T08:25:45.000Z</published>
    <updated>2021-04-05T13:46:02.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p>TypeScript是一种由微软开发的开源、跨平台的编程语言。它是JavaScript的超集，最终会被编译为JavaScript代码</p><p>特点：</p><ul><li>TypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的JavaScript 引擎中</li><li>类型系统允许 JavaScript 开发者在开发 JavaScript 应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构</li><li>TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件</li></ul><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>支持二进制和八进制字面量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">&quot;bob&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><code>enum</code>类型是对JavaScript标准数据类型的一个补充，默认情况下，从<code>0</code>开始为元素编号。 你也可以手动的指定成员的数值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;Red,Green,Blue&#125;</span><br><span class="line"><span class="comment">//enum Color &#123;Red = 1, Green, Blue&#125;</span></span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure><h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><p>不进行类型检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&quot;free&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h2><p>表示没有任何类型，当一个函数没有返回值时，一般为void</p><p><strong>void类型变量只能为undefined和null</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="Null-Undefined"><a href="#Null-Undefined" class="headerlink" title="Null Undefined"></a>Null Undefined</h2><p>TypeScript里，<code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code></p><p>默认情况下**<code>null</code>和<code>undefined</code>是所有类型的子类型**。 就是说可以把 <code>null</code>和<code>undefined</code>赋值给<code>number</code>类型的变量。</p><h2 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h2><p>表示的是那些永不存在的值的类型</p><p><code>never</code>类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用</p><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  firstName: <span class="built_in">String</span></span><br><span class="line">  lastName: <span class="built_in">String</span></span><br><span class="line">  <span class="keyword">readonly</span> x: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>readonly：属性名前用<code>readonly</code>来指定只读属性</p><p>TypeScript具有<code>ReadonlyArray&lt;T&gt;</code>类型，无法修改数组</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h2><p>指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray2</span> &lt;<span class="title">T</span>&gt; (<span class="params">value: T, count: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr: <span class="built_in">Array</span>&lt;T&gt; = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; count; index++) &#123;</span><br><span class="line">    arr.push(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>在定义接口时, 为接口中的属性或方法定义泛型类型，在使用接口时, 再指定具体的泛型类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IbaseCRUD &lt;T&gt; &#123;</span><br><span class="line">  data: T[]</span><br><span class="line">  add: <span class="function">(<span class="params">t: T</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  getById: <span class="function">(<span class="params">id: <span class="built_in">number</span></span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>在定义类时, 为类中的属性或方法定义泛型类型，在创建类的实例时, 再指定特定的泛型类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  zeroValue: T</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript&quot;&gt;&lt;a href=&quot;#TypeScript&quot; class=&quot;headerlink&quot; title=&quot;TypeScript&quot;&gt;&lt;/a&gt;TypeScript&lt;/h1&gt;&lt;p&gt;TypeScript是一种由微软开发的开源、跨平台的编程语言。它是JavaS</summary>
      
    
    
    
    <category term="Vue3" scheme="http://jiezai.online/categories/Vue3/"/>
    
    
    <category term="TypeScript" scheme="http://jiezai.online/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>AOP</title>
    <link href="http://jiezai.online/2021/03/20/AOP/"/>
    <id>http://jiezai.online/2021/03/20/AOP/</id>
    <published>2021-03-20T05:49:51.000Z</published>
    <updated>2021-03-20T09:23:13.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>优点：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共业务交给代理角色，实现业务分工</li><li>便于扩展，可以做到不修改目标对象的功能前提下,对目标功能扩展</li></ul><p>缺点：</p><ul><li>因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.</li><li>同时,一旦接口增加方法,目标对象与代理对象都要维护</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">  Host host;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.host = host</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    work();</span><br><span class="line">    host.rent();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//其他业务</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>本质为使用反射机制</p><ul><li>代理对象,不需要实现接口</li><li>代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)</li><li>动态代理分为两大类：<ul><li>基于接口：JDK动态代理</li><li>基于类：cglib</li><li>基于Java字节码：javasist</li></ul></li></ul><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p><strong>JDK中生成代理对象的API</strong></p><p>代理类所在包:java.lang.reflect.Proxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//给目标对象生成代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;开始事务2&quot;</span>);</span><br><span class="line">                        <span class="comment">//执行目标对象方法</span></span><br><span class="line">                        Object returnValue = method.invoke(target, args);</span><br><span class="line">                        System.out.println(<span class="string">&quot;提交事务2&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>面向切面编程</p><p>AOP能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><ol><li>选择连接点：<strong>选择哪一个类的哪一方法用以增强功能</strong></li><li>创建切面：Spring 中只要使用 <code>@Aspect</code> 注解一个类，那么 Spring IoC 容器就会认为这是一个切面了</li><li>定义切点：注解中定义 execution 的正则表达式，Spring 通过这个正则表达式判断具体要拦截的是哪一个类的哪一个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 仅仅只是实现了核心的业务功能</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签合同&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;收房租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">package</span> aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Broker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* pojo.Landlord.service())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带租客看房&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;谈价格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* pojo.Landlord.service())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交钥匙&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//execution：代表执行方法的时候会触发</span></span><br><span class="line"><span class="comment">//* ：代表任意返回类型的方法</span></span><br><span class="line"><span class="comment">//pojo.Landlord：代表类的全限定名</span></span><br><span class="line"><span class="comment">//service()：被拦截的方法名称*/</span></span><br><span class="line">execution(* pojo.Landlord.service())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goqhm29kgrj311e0gi0vh.jpg" alt="image-20210320171440171"></p><h2 id="使用-XML-配置"><a href="#使用-XML-配置" class="headerlink" title="使用 XML 配置"></a>使用 XML 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 装配 Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;landlord&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Landlord&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;broker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aspect.Broker&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- where：在哪些地方（包.类.方法）做增加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;landlordPoint&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">&quot;execution(* pojo.Landlord.service())&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- what:做什么增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;broker&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- when:在什么时机（方法前/后/前后） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;landlordPoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;静态代理&lt;/li&gt;
&lt;li&gt;动态代理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;静态代理&quot;&gt;&lt;a href=&quot;#静态</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
    <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
    <category term="AOP" scheme="http://jiezai.online/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>传输层</title>
    <link href="http://jiezai.online/2021/03/17/%E4%BC%A0%E8%BE%93%E5%B1%82-1/"/>
    <id>http://jiezai.online/2021/03/17/%E4%BC%A0%E8%BE%93%E5%B1%82-1/</id>
    <published>2021-03-17T15:16:28.000Z</published>
    <updated>2021-04-05T13:13:30.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>功能：</p><ul><li>为应用层提供通信服务，使用网络层的服务</li><li>提供进程和进程之间的逻辑通信（网络层提供主机之间的逻辑通信）</li><li>复用和分用<ul><li>复用：发送方不同的应用进程都可使用同一个传输层协议传输数据</li><li>分用：接收方的传输层在剥去报文的首部后能够把数据正确交付到目的应用进程</li></ul></li><li>对收到的报文进行差错检测（首部和数据部分）</li><li>提供两种传输协议<ul><li>TCP</li><li>UDP</li></ul></li></ul><h1 id="传输层的寻址与端口"><a href="#传输层的寻址与端口" class="headerlink" title="传输层的寻址与端口"></a>传输层的寻址与端口</h1><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>应用层的各种应用进程将其数据通过端口向下交付给传输层，以及让传输层知道应当将其报文段中的数据向上通过端口交付给应用层相应的进程</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>应用进程通过端口号进行标识，长度为16bit</p><p>只具有本地意义</p><ul><li>服务端使用<ul><li>熟知端口号（0 ～ 1023）：给TCP/IP最重要的一些应用程序，让所以用户都知道</li><li>登记端口号（1024 -～49151）：其他</li></ul></li><li>客户端使用（49152 ～ 65535）：仅在客户进程运行时才动态选择</li></ul><h2 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h2><p>主机IP地址+端口号</p><p>唯一的标识网络中的一台主机及其上的一个应用</p><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p><strong>无连接非可靠的传输层协议</strong></p><ul><li>减少开销和发送数据的时延</li><li>使用最大努力交付，不保证可靠交付</li><li>面向报文，适合一次性传输少量数据的网络应用</li><li>一次发一个完整的报文</li><li>无拥塞控制</li><li>首部开销小，8B</li></ul><p>UDP报头由4个域组成，其中每个域各占用2个字节，具体包括源端口号、目标端口号、数据包长度、校验值。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gon9q4ezmzj30f805pq3u.jpg" alt="preview"></p><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p><strong>面向连接的传输层协议</strong></p><p>特点</p><h2 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gona2wypgtj30dw095jrv.jpg" alt="preview"></p><h2 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h2><p>使运输连接的建立和释放都能正常进行</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ol><li>客户端发送<strong>连接请求报文段</strong>，无应用层数据，SYN=1，seq=x（随机）</li><li>服务端为该TCP连接分配缓存和变量，并向客户端返回<strong>确认报文段</strong>，允许连接，无应用层数据，SYN=1，ACK=1，seq=y（随机），ack=x+1</li><li>客户端收到确认报文，为该TCP连接分配缓存和变量，并向服务端返回确认的确认，可以携带数据，SYN=0，ACK=1，seq=x+1，ack=y+1</li></ol><p>SYN洪范攻击</p><h3 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h3><ol><li>客户端发送<strong>连接释放报文段</strong>，停止发送数据，主动关闭TCP连接</li><li>服务端收到连接释放报文段，发出确认，客户端到服务端方向的连接就释放了，TCP处于半关闭状态</li><li>服务器发出连接释放报文段</li><li>客户端收到连接释放报文段，发出确认，等到时间等待计时器设置的2MSL（最长报文段寿命），连接彻底关闭</li></ol><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><p>使用校验、序号、确认和重传等机制</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>基于滑动窗口协议的流量控制机制</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h1&gt;&lt;p&gt;功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为应用层提供通信服务，使用网络层的服务&lt;/li&gt;
&lt;li&gt;提供进程和进程之间的逻辑通信（网络层提供</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="传输层" scheme="http://jiezai.online/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>应用层</title>
    <link href="http://jiezai.online/2021/03/17/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://jiezai.online/2021/03/17/%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2021-03-17T15:14:35.000Z</published>
    <updated>2021-04-05T13:13:48.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>对应用程序的通信提供服务</p><h2 id="网络应用模型"><a href="#网络应用模型" class="headerlink" title="网络应用模型"></a>网络应用模型</h2><ul><li>客户/服务器模型</li><li>P2P模型</li></ul><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="层次域名空间"><a href="#层次域名空间" class="headerlink" title="层次域名空间"></a>层次域名空间</h2><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>递归查询</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h1&gt;&lt;p&gt;对应用程序的通信提供服务&lt;/p&gt;
&lt;h2 id=&quot;网络应用模型&quot;&gt;&lt;a href=&quot;#网络应用模型&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="应用层" scheme="http://jiezai.online/tags/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>网络层 IP</title>
    <link href="http://jiezai.online/2021/03/16/%E7%BD%91%E7%BB%9C%E5%B1%82-IP/"/>
    <id>http://jiezai.online/2021/03/16/%E7%BD%91%E7%BB%9C%E5%B1%82-IP/</id>
    <published>2021-03-16T14:59:12.000Z</published>
    <updated>2021-03-20T09:21:58.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h1><h2 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h2><p>首部 + 数据部分（TCP、UDP段）</p><p>首部：固定部分+可变部分</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gom2n03jtnj20ji092t9k.jpg"></p><ul><li>版本：IPv4 / IPv6</li><li>首部长度：单位是4B，最小长度为5</li><li>区分服务：期望获得哪种类型的服务</li><li>总长度：首部+数据</li><li>生存时间TTL：IP分组保质期，经过一个路由器-1，为0则丢弃</li><li>协议：数据部分的协议（6：TCP，17：UDP）</li><li>首部检验和：只检验首部</li><li>IP地址</li><li>可选字段：用来支持排错、测量以及安全等措施</li><li>填充：全0</li></ul><h2 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h2><p>MTU：最大传送单元，链路层数据报能承载的最大数据量，以太网的MTU为1500字节</p><ul><li>标识：同一数据报的分片使用同一标识</li><li>标志：3位，只有2位有意义，中间位（DF，Don’t Fragment)（1禁止/0允许分片），最低位(MF:More Fragment)（1还有分片/0代表最后一片）</li><li>片偏移：某片在原分组中的相对位置，以8B为单位</li></ul><h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><p>IP地址：连接到因特网的每台主机（或路由器）都分配一个32比特的全球唯一标识符</p><h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><p>路由器对目的地址是私有IP地址的数据报一律不进行转发</p><p>NAT指通过将专用网络地址转换为公用地址</p><p>在专用网连接到因特网的路由器上安装NAT软件，称为NAT路由器，至少有一个有效的外部全球IP地址</p><p>NAT转换表：本地地址与全球地址互相转换</p><h3 id="子网掩码与子网划分"><a href="#子网掩码与子网划分" class="headerlink" title="子网掩码与子网划分"></a>子网掩码与子网划分</h3><p>规定：所有的网络必须使用子网掩码</p><ul><li>两级IP地址：网络号+主机号（利用率低，不够灵活）</li><li>三级IP地址：网络号+子网号+主机号（对外表现为一个网络）<ul><li>C类地址子网掩码：255.255.255.0，（11111111 11111111 11111111 00000000）与IP地址逐位相与，得到子网网络地址</li></ul></li></ul><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p><strong>地址解析协议</strong></p><p>无论网络层使用什么协议，在实际网络的链路上传送数据帧时，最终必须使用硬件地址</p><p>完成IP地址到MAC地址的映射</p><p>每台主机都设有一个ARP高速缓存，用来存放本局域网各主机和路由器的IP地址到MAC地址的映射表，ARP表，动态维护</p><p>执行过程：</p><ol><li>检查ARP高速缓存，有对应表项则写入MAC帧</li><li>没有则广播ARP请求分组，同一局域网中所有主机都能收到该请求</li><li>目的主机收到后向源主机单播一个ARP响应分组，源主机收到后将此映射写入ARP缓存</li></ol><h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><p><strong>动态主机配置协议</strong></p><p>给主机动态分配IP地址</p><p>DHCP是应用层协议，使用C/S方式，通过广播方式进行交互，基于UDP</p><p>主机可以从服务器动态获取IP地址、子网掩码、默认网关、DNS服务器名称，允许地址重用</p><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><p>让主机或路由器报告差错和异常情况</p><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h2 id="移动IP"><a href="#移动IP" class="headerlink" title="移动IP"></a>移动IP</h2><h2 id="网络层设备"><a href="#网络层设备" class="headerlink" title="网络层设备"></a>网络层设备</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TCP-IP协议栈&quot;&gt;&lt;a href=&quot;#TCP-IP协议栈&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP协议栈&quot;&gt;&lt;/a&gt;TCP/IP协议栈&lt;/h1&gt;&lt;h2 id=&quot;IP数据报格式&quot;&gt;&lt;a href=&quot;#IP数据报格式&quot; class=&quot;he</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络层" scheme="http://jiezai.online/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="http://jiezai.online/2021/03/15/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://jiezai.online/2021/03/15/%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2021-03-15T14:23:57.000Z</published>
    <updated>2021-04-05T13:13:43.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务</p><p>传输单位是<strong>数据报</strong></p><p>功能：</p><ul><li>路由选择与分组转发<ul><li>路由选择：按照复杂的分布式算法，根据从各相邻路由器所得到的关于整个网络拓扑的变化情况，动态改变所选择的路有</li><li>分组转发：路由器根据转发表将用户的IP数据报从合适的端口转发出去</li></ul></li><li>异构网络互联</li><li>拥塞控制<ul><li>因出现过量的分组而引起网络性能下降的现象称为拥塞</li><li>控制方法：<ul><li>开环控制：静态，在设计网络时，事先将有关发生拥塞的因素考虑周到</li><li>闭环控制：动态，事先不考虑，采用监测网络系统去见识，及时检测哪里发生了拥塞，将拥塞信息发送到合适的地方</li></ul></li></ul></li></ul><h1 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h1><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p><strong>特点：独占资源</strong></p><ol><li>建立连接（呼叫/电路建立）</li><li>通信 </li><li>释放连接（拆除电路）</li></ol><p><strong>优点</strong></p><ul><li>通信时延小</li><li>有序传输</li><li>没有冲突</li><li>实时性强</li></ul><p><strong>缺点</strong></p><ul><li>建立连接时间长</li><li>线路独占，使用效率低</li><li>灵活性差</li><li>无差错控制能力</li></ul><p>如电话网络</p><h2 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h2><p>报文：源应用发送的信息整体</p><p>通过交换设备进行存储转发，链路空闲时发送</p><p><strong>优点</strong></p><ul><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率高</li><li>多目标服务</li></ul><p><strong>缺点</strong></p><ul><li>有存储转发时延</li><li>报文大小补丁，需要网络节点有较大缓存空间</li></ul><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>分组：将大的数据块（报文）分割成小的数据块</p><p>相对于报文交换，存储管理更容易，但是需要传输额外的信息量，乱序到达目的主机时，要对分组排序重组</p><h2 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h2><p>一条源主机到目的主机类似于电路的路径（逻辑链接），路径上所有节点都要维持这条虚电路的建立，都维持一张虚电路表，每一项纪录了一个打开的虚电路的信息</p><p>每个分组携带虚电路号</p><p>虚电路将数据报方式和电路交换方式结合，以发挥两者优点</p><h1 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h1><p>路由表/转发表</p><table><thead><tr><th>目的网络IP地址</th><th>子网掩码</th><th>下一跳IP地址</th><th>接口</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>最佳路由：相对于某一种特定要求下得出的较为合理的选择</p><h2 id="静态路由算法"><a href="#静态路由算法" class="headerlink" title="静态路由算法"></a>静态路由算法</h2><p>管理员手工配置路由信息</p><p>在负荷稳定、拓扑变化不大的网络中运行效果好，广泛应用于高度安全性的军事网络和较小的商业网络</p><p>缺点：路由更新慢，不适用大型网络</p><h2 id="动态路由算法"><a href="#动态路由算法" class="headerlink" title="动态路由算法"></a>动态路由算法</h2><p>自适应路由算法</p><p>路由器之间彼此交换信息，按照路由算法优化出路由表项</p><p>优点：路由更新快，适用大型网络，及时响应链路费用或网络拓扑变化</p><p>缺点：算法复杂，增加网络负担</p><ul><li>全局性：链路状态路由算法 OSPF （所有路由器掌握完整的网络拓扑和链路费用信息）</li><li>分散性：距离向量路由算法 RIP（路由器只掌握物理项链的邻居及链路费用）</li></ul><h2 id="层次路由"><a href="#层次路由" class="headerlink" title="层次路由"></a>层次路由</h2><p>自治系统AS：在单一的技术管理下的一组路由器</p><p>路由选择协议：</p><ul><li>内部网关协议IGP：单个AS内使用 RIP OSPF</li><li>外部网关协议EGP：AS之间使用</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h1&gt;&lt;p&gt;主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务&lt;/p&gt;
&lt;p&gt;传输单位是&lt;strong&gt;数据报&lt;/stron</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://jiezai.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络层" scheme="http://jiezai.online/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://jiezai.online/2021/03/12/Spring/"/>
    <id>http://jiezai.online/2021/03/12/Spring/</id>
    <published>2021-03-12T05:43:10.000Z</published>
    <updated>2021-03-12T11:00:11.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/overview.html" target="_blank" rel="noopener">Spring Framework中文文档</a></p><p><a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></p><ul><li>SSH</li><li>SSM</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>Spring是一个开源的免费框架</li><li>是轻量级、非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事物的处理，对框架整合的支持</li></ul><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>Spring 框架分为多个模块。应用程序可以选择所需的模块。核心容器的模块是核心，包括配置模型和依赖项注入机制。除此之外，Spring 框架为不同的应用程序体系结构提供了基础支持，包括消息传递，事务性数据和持久性以及 Web。它还包括基于 Servlet 的 Spring MVC Web 框架，以及并行的 Spring WebFlux 反应式 Web 框架。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li>Spring Boot<ul><li>快速开发的脚手架</li><li>基于Spring Boot可以快速开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>基于Spring Boot实现</li></ul></li></ul><p>学习Spring Boot的前提是Spring以及Spring MVC</p><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p><strong>控制反转</strong>（Inversion of Control），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。（百度百科）</p><ul><li>控制指的是：<strong>当前对象对内部成员的控制权</strong>。</li><li>反转指的是：这种控制权<strong>不由当前对象管理</strong>了，由其他(类,第三方容器)来管理。</li></ul><p>借助于“第三方”实现具有依赖关系的对象之间的解耦：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1goh53apdraj30a8051jsj.jpg" alt="img"></p><p>对象由Spring来创建、管理和装配，原理就是通过Java的<strong>反射技术</strong>来实现的，通过反射我们可以获取类的所有信息(成员变量、类名等等等)，再通过配置文件(xml)或者注解来描述类与类之间的关系</p><p>官方代码实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line">PetStoreService service = context.getBean(<span class="string">"petStore"</span>, PetStoreService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use configured instance</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/23277575/answer/169698662" target="_blank" rel="noopener">Spring IoC有什么好处呢？ - Mingqi的回答 - 知乎</a></p><h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"userNew"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><ul><li>id：bean的唯一标识符，相当于对象名</li><li>class：bean对象所对应的全限定名：包名 + 类型</li><li>name：别名</li><li>prooperty：对象属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.jjj.User"</span> <span class="attr">name</span>=<span class="string">"user2"</span> &gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">prooperty</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jjj"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>将多个配置文件，导入合并为一个，直接使用总的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"services.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"resources/messageSource.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"/resources/themeSource.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="基于构造函数的依赖关系注入"><a href="#基于构造函数的依赖关系注入" class="headerlink" title="基于构造函数的依赖关系注入"></a>基于构造函数的依赖关系注入</h2><p>基于构造函数的 DI 是通过容器调用具有多个参数(每个参数代表一个依赖项)的构造函数来完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThingOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThingOne</span><span class="params">(ThingTwo thingTwo, ThingThree thingThree)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thingOne"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingOne"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"thingTwo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"thingThree"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thingTwo"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingTwo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thingThree"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingThree"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于-Setter-的依赖项注入"><a href="#基于-Setter-的依赖项注入" class="headerlink" title="基于 Setter 的依赖项注入"></a>基于 Setter 的依赖项注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AnotherBean beanOne;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> YetAnotherBean beanTwo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanOne</span><span class="params">(AnotherBean beanOne)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanOne = beanOne;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanTwo</span><span class="params">(YetAnotherBean beanTwo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanTwo = beanTwo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntegerProperty</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- setter injection using the nested ref element --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanOne"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"anotherExampleBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- setter injection using the neater ref attribute --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanTwo"</span> <span class="attr">ref</span>=<span class="string">"yetAnotherBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"integerProperty"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"anotherExampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.AnotherBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"yetAnotherBean"</span> <span class="attr">class</span>=<span class="string">"examples.YetAnotherBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="p命名空间注入"><a href="#p命名空间注入" class="headerlink" title="p命名空间注入"></a>p命名空间注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.jjj.User"</span> <span class="attr">p:name</span>=<span class="string">"user2"</span> &gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="c命名空间注入"><a href="#c命名空间注入" class="headerlink" title="c命名空间注入"></a>c命名空间注入</h2><p>注入构造函数参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.jjj.User"</span> <span class="attr">c:name</span>=<span class="string">"user2"</span> &gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1goh89gbyolj30ky0bnq5j.jpg" alt="image-20210312170103979"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.DefaultAccountService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.DefaultAccountService"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Bean自动装配"><a href="#Bean自动装配" class="headerlink" title="Bean自动装配"></a>Bean自动装配</h1><p>三种装配的方式：</p><ul><li>xml配置</li><li>java显式配置</li><li>隐士的自动装配</li></ul><h2 id="Spring-容器可以自动装配协作-bean-之间的关系"><a href="#Spring-容器可以自动装配协作-bean-之间的关系" class="headerlink" title="Spring 容器可以自动装配协作 bean 之间的关系"></a>Spring 容器可以自动装配协作 bean 之间的关系</h2><ul><li>自动装配是Spring满足Bean依赖的一种方式</li><li>Spring会在上下文中自动寻找并给bean自动装配属性</li></ul><h2 id="自动装配模式："><a href="#自动装配模式：" class="headerlink" title="自动装配模式："></a>自动装配模式：</h2><ul><li>byName：会自动再容器上下文中查找，和自己的对象set方法后面的值对应的beanid，需要保证所有bean的id唯一</li><li>byType：会自动在容器上下文中查找，和自己的对象属性类型相同的bean，需要保证bean的class唯一</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.jjj.pojo.cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.jjj.pojo.dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.jjj.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解自动装配"><a href="#使用注解自动装配" class="headerlink" title="使用注解自动装配"></a>使用注解自动装配</h2><p>前提：</p><ul><li>导入约束：context约束</li><li>配置注解：<code>&lt;context:annotation-config/&gt;</code></li></ul><p><strong>@Autowired</strong>：直接在属性上使用，也可以在set方法上使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Spring" scheme="http://jiezai.online/categories/Spring/"/>
    
    
    <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 网络编程</title>
    <link href="http://jiezai.online/2021/03/06/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://jiezai.online/2021/03/06/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-03-06T07:32:32.000Z</published>
    <updated>2021-03-07T15:33:24.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>TCP/IP  C/S</p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><ul><li>ip</li><li>端口号</li><li>通信协议</li></ul><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><ul><li>唯一定位一台网络上计算机</li><li>127.0.0.1：localhost</li><li>IP地址分类<ul><li>IPv4/IPv6</li><li>公网（互联网）/私网（局域网）<ul><li>ABCD类</li><li>192.168.xx.xx</li></ul></li></ul></li><li>域名</li></ul><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上一个程序的进程</p><ul><li>不同的进程有不同的端口号用来区分软件</li><li>被规定为0～65536：TCP、UDP各65536</li><li>端口分类<ul><li>公有端口0～1023<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li></ul></li><li>程序注册端口：1024～49151，分配用户或者程序<ul><li>Tomcat</li><li>mysql</li><li>oracle</li></ul></li><li>动态、私有</li></ul></li></ul><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><h2 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h2><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>Socket是一个抽象概念，一个应用程序通过一个Socket来建立一个远程连接，而Socket内部通过TCP/IP协议把数据传输到网络</p><p>一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号</p><p>Socket连接成功地在服务器端和客户端之间建立后：</p><ul><li>对服务器端来说，它的Socket是指定的IP地址和指定的端口号；</li><li>对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。</li></ul><p>Java标准库提供了<code>ServerSocket</code>来实现对指定IP和指定端口的监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>); </span><br><span class="line">        System.out.println(<span class="string">"server is running..."</span>);</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Socket sock = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">"connected from "</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            Thread t = <span class="keyword">new</span> Handler(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP是一种基于流的协议，因此，Java标准库使用<code>InputStream</code>和<code>OutputStream</code>来封装Socket的数据流</p><h2 id="HTTP-HTTPS"><a href="#HTTP-HTTPS" class="headerlink" title="HTTP/HTTPS"></a>HTTP/HTTPS</h2><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>免费的开放源代码的Servlet容器，核心组件为</p><ul><li>Connector：负责接收和反馈外部请求的连接器</li><li>Container：负责处理请求的容器</li></ul><p>连接器和容器相辅相成，一起构成了基本的 web 服务 Service</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gobrgplkv9j30ql056q2y.jpg" alt="preview"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 注解与反射</title>
    <link href="http://jiezai.online/2021/02/26/Java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <id>http://jiezai.online/2021/02/26/Java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</id>
    <published>2021-02-26T07:06:24.000Z</published>
    <updated>2021-02-28T14:27:10.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>Annotation，JDK5.0引入</p><p>作用：不是程序本身，可以对程序进行解释；可以被其他程序（编译器）读取</p><ul><li>供编译器检查，提早发现错误（如<code>@Override</code>)</li><li>改变编译器的行为,生成代码（如 <strong>Lombok</strong>）</li><li>代码运行过程中做处理。（如 <code>@Bean</code>)</li></ul><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><ul><li>@OVerride：限定重写父类方法，若想要重写父类的一个方法时，需要使用该注解告知编译器我们正在重写一个方法。</li><li>@Deprecated：标记已过时，当我们想要让编译器知道一个方法已经被弃用(deprecate)时，应该使用这个注解</li><li>@SuppressWarning：抑制编译器警告，该注解仅仅告知编译器，忽略它们产生了特殊警告</li></ul><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>负责注解其他注解，Java定义了四个标准的meta-annotation类型</p><ul><li><p>@Target：描述注解的使用范围,有一个枚举<strong>ElementType</strong>来指定，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Dog &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Retention：表述需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE &lt; CLASS &lt; RUNTIME）</p></li><li><p>@Document：表明该注解需要包含在javadoc中</p></li><li><p>@Inherited：表明该注解可以继承父类的注解</p></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>注解的定义通过@interface表示，所有的注解会自动继承java.lang.Annotation接口,且不能再继承别的类或是接口。</li><li>注解的成员参数只能用public或默认(default) 访问权修饰来进行修饰。</li><li>成员参数只能使用八种基本类型（byte、short、char、int、long、float、double、boolean）和String、Enum、Class、annotations等数据类型，及其数组。</li><li>获取类方法和字段的注解信息，只能通过Java的反射技术来获取 Annotation 对象。</li><li>注解可以没有定义成员，只做标识。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>反射是Java被视为动态语言的关键，反射机制允许程序在运行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性和方法</p><p>任何一个类，在第一次使用时，就会被 JVM 加载到堆内存的方法区中。JVM 加载类成功后，就会在方法区中产生一个对应的 Class 对象（一个类只要一个 Class 对象），这个 Class 对象包含被加载类的全部结构信息。</p><h2 id="反射提供的功能"><a href="#反射提供的功能" class="headerlink" title="反射提供的功能"></a>反射提供的功能</h2><p>在运行时</p><ul><li>判断任意一个对象所属的类</li><li>构造任意一个类的对象</li><li>判断任意一个类所具有的成员变量和方法</li><li>获取泛型信息</li><li>调用任意一个对象的成员变量和方法</li><li>处理注解</li><li>生成动态代理</li><li>………</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：可以实现动态创建对象和编译，体现出很高的灵活性</p><p>缺点：对性能有影响，反射是解释操作，慢于直接执行操作</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>Java.lang.class</p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过三个步骤来对该类进行初始化</p><ol><li>类的加载：将类的class文件读入内存，并为之创建一个java.lang.Class对象，由类加载器完成</li><li>类的链接：将类的二进制数据合并到JRE中</li><li>类的初始化：JVM对类进行初始化</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>反射的基本使用包括创建对象，设置属性和调用方法。Class 对象中大多数 get 方法有 Declared 和无 Declared</p><ul><li>无 Declared：只能获取到 public 修饰的，包括当前类和所有父类。</li><li>有 Declared：获取到当前类所有的（含有 private），但不包括其父类。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;p&gt;Annotation，JDK5.0引入&lt;/p&gt;
&lt;p&gt;作用：不是程序本身，可以对程序进行解释；可以被其他程序（编译器）读取&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java多线程2</title>
    <link href="http://jiezai.online/2021/02/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B2/"/>
    <id>http://jiezai.online/2021/02/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B2/</id>
    <published>2021-02-06T06:42:39.000Z</published>
    <updated>2021-02-06T08:24:11.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h1><ul><li>正常停止</li><li>设置标志位</li><li>不要使用stop或者destroy</li></ul><h1 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h1><ul><li>sleep指定当前线程阻塞的毫秒数</li><li>sleep存在异常interrupted Exception</li><li>sleep时间到达后线程进入就绪状态</li><li>可以模拟网络延时，倒计时等</li><li>每一个对象都有一个锁，sleep不会释放锁</li></ul><h1 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h1><ul><li>让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让cpu重新调度，礼让不一定成功</li></ul><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li><li>如后台记录操作日志，监控内存，垃圾回收等</li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h1 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1><h1 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h1><p>生产者消费者</p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程停止&quot;&gt;&lt;a href=&quot;#线程停止&quot; class=&quot;headerlink&quot; title=&quot;线程停止&quot;&gt;&lt;/a&gt;线程停止&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;正常停止&lt;/li&gt;
&lt;li&gt;设置标志位&lt;/li&gt;
&lt;li&gt;不要使用stop或者destroy&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 多线程</title>
    <link href="http://jiezai.online/2021/01/29/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://jiezai.online/2021/01/29/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-01-29T06:36:24.000Z</published>
    <updated>2021-01-31T15:58:42.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序、进程、线程"><a href="#程序、进程、线程" class="headerlink" title="程序、进程、线程"></a>程序、进程、线程</h1><h1 id="线程的创建和启动"><a href="#线程的创建和启动" class="headerlink" title="线程的创建和启动"></a>线程的创建和启动</h1><h2 id="继承Thread类形式"><a href="#继承Thread类形式" class="headerlink" title="继承Thread类形式"></a>继承Thread类形式</h2><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run()，将此线程执行的操作声明在run方法中</li><li>创建Thread类子类对象</li><li>调用此对象的start()：启动当前线程，且调用当前线程的run()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">mt.start();</span><br></pre></td></tr></table></figure><h2 id="实现Runnable接口形式"><a href="#实现Runnable接口形式" class="headerlink" title="实现Runnable接口形式"></a>实现Runnable接口形式</h2><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法run()</li><li>创建实现类的对象</li><li>将此对象作为参数传到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">Thread td=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">sd.start();</span><br></pre></td></tr></table></figure><h1 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h1><h2 id="id、name"><a href="#id、name" class="headerlink" title="id、name"></a>id、name</h2><p>通过Thread(String name)构造方法或者void setName(String name)设置名字</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>线程的优先级从1到10，默认为5，因程序实际运行的操作系统不同，优先级会被映射到操作系统中的取值</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul><li>New：线程实例化后，还没有开始运行</li><li>Runnable：一旦调用start方法，线程就处于可运行状态，正在运行或者准备运行</li><li>Blocked：阻塞状态，等待其他线程释放锁</li><li>Waiting：等待</li><li>Timed waiting：计时等待</li><li>Terminated：结束</li></ul><p>使用getState()可以确定线程的当前状态</p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn4lnmkosdj31f40kgdq8.jpg" alt="image-20210129153140366"></p><h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h1><p>多个线程执行的不确定性引起执行结果的不稳定：当有多个线程同时操作同一个对象时，可能出现竞态条件（race condition），无法预期最终执行结果</p><p>线程同步可以解决线程的安全问题，操作同步代码时，只能有一个线程参与，其他线程等待，相当于是一个单线程的过程，但效率较低</p><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj称为同步监视器，即锁</p><p>当线程开始执行同步代码块前，必须先获得对同步代码块的锁定。并且任何时刻只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完成后，该线程会释放对该同步监视器的锁定</p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>如果操作共享数据的代码完整的声明在一个方法中，可以将此方法声明为同步方法，不需要再指定同步监视器同步方法的同步监视器就是this，也就是调用该方法的对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序、进程、线程&quot;&gt;&lt;a href=&quot;#程序、进程、线程&quot; class=&quot;headerlink&quot; title=&quot;程序、进程、线程&quot;&gt;&lt;/a&gt;程序、进程、线程&lt;/h1&gt;&lt;h1 id=&quot;线程的创建和启动&quot;&gt;&lt;a href=&quot;#线程的创建和启动&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础3</title>
    <link href="http://jiezai.online/2021/01/19/Java%E5%9F%BA%E7%A1%803/"/>
    <id>http://jiezai.online/2021/01/19/Java%E5%9F%BA%E7%A1%803/</id>
    <published>2021-01-19T13:11:59.000Z</published>
    <updated>2021-01-24T11:58:09.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h1><p>指没有名字的对象，即只创建对象，但是不用变量来接收</p><ul><li>匿名对象具有对象的所有功能</li><li>匿名对象只能调用一次</li><li>匿名对象只在堆内存中开辟空间，而不存在栈内存的引用</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul><li>重载：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者类型不同即可</li><li>可变个数的形参：(String … args)</li><li>方法参数的值传递机制：如果变量是基本数据类型，则传递的是变量的数据值；如果是引用数据类型，则传递的是变量的地址值</li><li>递归</li></ul><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>隐藏对象内部的复杂性，只对外公开简单的接口</p><ul><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</li><li>低耦合：仅对外暴露少量的方法用于使用</li></ul><p>权限修饰符：</p><ul><li>private：类内部</li><li>缺省：同一个包</li><li>protected：不同包的子类</li><li>public：同一个工程</li></ul><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>创建对象，初始化对象</p><ul><li>如果没有显式定义构造器，默认提供无参构造器</li><li>定义构造器的格式：权限修饰符  类名 (形参列表) {}</li><li>一个类中的多个构造器，彼此构成重载</li><li>一旦显式定义构造器后，系统不再提供默认的无参构造器</li></ul><h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><p>是一种Java语言写成的可重用组件，指符合如下标准的Java类</p><ul><li>类是公共的</li><li>有一个无参构造器</li><li>有属性，且具有对应的get、set方法</li></ul><h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>this调用构造器</p><ul><li>在类的构造器中，可以显式的使用“this(形参列表)”调用当前类的其他构造器</li><li>必须声明在当前构造器的首行</li><li>构造器内部，最多只能声明一个“this(形参列表)”用来调用其他构造器</li></ul><h1 id="package、import"><a href="#package、import" class="headerlink" title="package、import"></a>package、import</h1><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ul><li>为了更好的管理项目中的类，提出包的概念</li><li>使用package声明类或接口所属的包</li><li>同一个包下，不能命名同名的接口或类</li></ul><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><ul><li>导入指定包下的类或接口</li><li>声明在包和类的声明</li><li>import static: 导入指定类或接口中的静态结构</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>减少代码冗余，提高复用性</li><li>便于功能扩展</li><li>为多态提供前提</li></ul><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>如果没有显式的声明一个类的父类，则此类继承于java.lang.Object类</p><h1 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h1><p>在子类中对继承于父类的方法进行重写</p><ul><li>方法名和形参列表相同</li><li>子类中重写的方法的权限修饰符不能小于父类中被重写方法的权限修饰符</li><li>子类不能重写父类中声明为private的方法</li><li>返回值类型：若被重写方法返回值类型为void，则重写方法只能返回void；若被重写方法返回A类型，则重写方法可以返回A类型或A的子类</li><li>静态方法无法被重写</li></ul><h1 id="super"><a href="#super" class="headerlink" title="super"></a>super</h1><p>指向父类的引用</p><h1 id="子类对象实例化的过程"><a href="#子类对象实例化的过程" class="headerlink" title="子类对象实例化的过程"></a>子类对象实例化的过程</h1><p>从结果看：子类继承父类后，就获得了父类的属性和方法</p><p>从过程看：通过子类的构造器创建对象时，会直接或间接的调用父类构造器，直到Object类的构造器，从而在内存中加载了父类的结构，子类可以调用，但不对外暴露</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>可以理解为事物的多种形态</p><p>对象的多态性：父类的引用指向子类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Father fa = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure><p>多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法</p><p>前提：类的继承与方法的重写</p><p>只适用于方法，不能用于属性</p><p>虚拟方法：在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用子类的方法</p><p>向下转型：可以使用强制类型转换调用子类特有的方法</p><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>针对八种基本数据类型定义相应的引用类型</p><p>自动装箱与自动拆箱</p><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>静态变量随着类的加载而加载，可以通过类.静态变量调用</li><li>静态变量的加载早于对象的创建</li><li>类只会加载一次，静态变量在内存中只会保存一份，存在于方法区的静态域中</li></ul><h1 id="单例模式Singleton"><a href="#单例模式Singleton" class="headerlink" title="单例模式Singleton"></a>单例模式Singleton</h1><p>在系统中，某个类只存在一个实例对象</p><p>减少性能开销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载时间长，线程安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">  <span class="comment">//私有化类的构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Bank</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">//内部创建类的对象</span></span><br><span class="line">  <span class="keyword">private</span> Bank instance = <span class="keyword">new</span> Bank();</span><br><span class="line">  <span class="comment">//提供公共的方法，返回类的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Bank <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延迟对象的创建，线程不安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ul><li>用来初始化类、对象</li><li>如果有修饰，只能用static</li><li>静态代码块：随着类的加载而执行，只执行一次；若有多个，则按声明顺序执行</li><li>非静态代码块：随着对象的创建而执行，每创建对象都执行一次（初始化对象属性）</li></ul><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><ul><li>final修饰的类无法被继承</li><li>final修饰的方法无法被重写</li><li>final修饰的变量无法被修改</li></ul><h1 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h1><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><p>Java允许类设计者指定：超类声明一个方法但不实现，该方法的实现由子类提供，这样的方法称为抽象方法，有一个或更多抽象方法的类叫做抽象类</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><ul><li>abstract修饰的类无法实例化，即为抽象类</li><li>抽象类中一定有构造器，方便子类实例化时调用</li><li>abstract修饰的方法：抽象方法，没有方法体</li><li>包含抽象方法的类，一定是抽象类</li><li>子类重写了父类中所有的抽象方法后，才能被实例化；若没有全部重写，则该子类也为抽象类，需要用abstract修饰</li></ul><p>注意点：</p><ul><li>不能用于修饰属性、构造器、私有方法、静态方法、final的方法和类</li></ul><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式</p><p>抽象类体现的就是一种模板模式的设计</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;匿名对象&quot;&gt;&lt;a href=&quot;#匿名对象&quot; class=&quot;headerlink&quot; title=&quot;匿名对象&quot;&gt;&lt;/a&gt;匿名对象&lt;/h1&gt;&lt;p&gt;指没有名字的对象，即只创建对象，但是不用变量来接收&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匿名对象具有对象的所有功能&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
    <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java基础2</title>
    <link href="http://jiezai.online/2021/01/15/java%E5%9F%BA%E7%A1%802/"/>
    <id>http://jiezai.online/2021/01/15/java%E5%9F%BA%E7%A1%802/</id>
    <published>2021-01-15T06:06:51.000Z</published>
    <updated>2021-01-17T14:53:05.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><ul><li>从概念上讲，Java字符串就是unicode字符序列。</li><li>Java没有内置的字符串类型，而是在标准java类库中提供了一个预定义类String。</li><li>每个用双引号括起来的字符串都是String类的一个实例。</li><li>不可变字符串：String类没有提供修改字符串中某个字符的方法，不能修改Java字符串中的单个字符。优点：编译器可以让字符串共享。</li><li>构建字符串：有时候需要用许多较短的字符串构建字符串，例如按键输入或者文件中的单词，需要用到字符串构建器：StringBuilder</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><ul><li>条件判断</li><li>循环</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>声明数组：一旦创建数组后，就不能改变长度，若需要经常扩展数组的大小，则需要使用数组列表（array list）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> Int[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><ul><li><p>访问数组元素</p></li><li><p>foreach循环：for ( variable : collection ) statement</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环打印a数组</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> element : a) </span><br><span class="line">System.out.println(element);</span><br></pre></td></tr></table></figure><ul><li><p>数组拷贝：在Java中，允许将一个数组变量拷贝到另一个数组变量，这时，两个变量将引用同一个数组（浅拷贝）。使用Arrays类的copyOf方法则可以实现深拷贝。</p></li><li><p>命令行参数：向main方法传递字符串，运行程序时，可以从命令行给main方法传递字符串参数，java className  args0 args1</p></li><li><p>数组排序：Arrays.sort</p></li></ul><h1 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h1><h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><ul><li>Java类及类的成员：属性、方法、构造器；代码块，内部类</li><li>面向对象的三大特征：封装、继承、多态</li><li>其他关键字：this、super、static、final、abstract、interface、package、import</li></ul><p>在Java语言范畴中，将功能、结构等都封装到类中，通过类的实例化，来调用具体的功能结构</p><p>涉及到与前端、数据库交互时，前后端的结构在Java层面都体现为类、对象</p><h2 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h2><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ul><li>与类同名，在构造类的对象时，构造器会运行，从而将实例字段初始化为所希望的初始状态</li><li>每个类可以有一个以上的构造器</li><li>可以有多个参数，没有返回值</li><li>总是伴随着new操作符一起调用</li></ul><h3 id="用var声明局部变量"><a href="#用var声明局部变量" class="headerlink" title="用var声明局部变量"></a>用var声明局部变量</h3><p>在Java 10中，如果可以从变量的初始值推导出它们的类型，那么可以用var声明局部变量，无须指定类型</p><h3 id="使用null引用"><a href="#使用null引用" class="headerlink" title="使用null引用"></a>使用null引用</h3><p>在构造器中将null转为非null值，或者严格拒绝null参数（ Objects.requireNonNull() ）</p><h3 id="隐式参数与显式参数"><a href="#隐式参数与显式参数" class="headerlink" title="隐式参数与显式参数"></a>隐式参数与显式参数</h3><h3 id="基于类的访问权限"><a href="#基于类的访问权限" class="headerlink" title="基于类的访问权限"></a>基于类的访问权限</h3><p>方法可以访问调用这个方法的对象的私有数据</p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>private修饰</p><h3 id="final实例字段"><a href="#final实例字段" class="headerlink" title="final实例字段"></a>final实例字段</h3><p>可以将实例字段定义为final，这样的字段必须在构造对象时初始化，也就是说，必须确保每个构造器执行之后，这个字段的值已经设置，并且之后不能再修改这个字段</p><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a><del>JVM内存结构</del></h2><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p>Java中参数传递方式只有值传递</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从概念上讲，Java字符串就是unicode字符序列。&lt;/li&gt;
&lt;li&gt;Java没有内置的字符</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
    <category term="Java" scheme="http://jiezai.online/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java</title>
    <link href="http://jiezai.online/2021/01/10/Java/"/>
    <id>http://jiezai.online/2021/01/10/Java/</id>
    <published>2021-01-10T12:09:24.000Z</published>
    <updated>2021-01-11T03:55:44.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><p>Java程序的开发过程</p><ul><li>利用 JDK （调用 Java API）编写出 Java 源代码，存储于 <code>.java</code> 文件中</li><li>JDK 中的编译器 javac 将 Java 源代码编译成 Java 字节码，存储于 <code>.class</code> 文件中</li><li>JRE 加载、验证、执行 Java 字节码</li><li>JVM 将字节码解析为机器码并映射到 CPU 指令集或 OS 的系统调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello.java // 新建.java文件</span></span><br><span class="line"><span class="comment">javac Hello.java // 编译生成Hello.class</span></span><br><span class="line"><span class="comment">java Hello // 运行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello,World"</span>);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h1><p>可以被javadoc解析，以网页形式生成说明文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment">  <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h1><h1 id="JDK、-JRE、JVM"><a href="#JDK、-JRE、JVM" class="headerlink" title="JDK、 JRE、JVM"></a>JDK、 JRE、JVM</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>Java Development Kit， 是整个JAVA的核心，包括了 Java 运行时的环境（JRE）、解释器（Java）、编译器（javac）、Java 归档（jar ——一种软件包文件格式）、文档生成器（Javadoc）等工具。</p><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>Java Runtime Environment，Java运行环境，包含JVM标准实现及Java核心类库。提供 Java 应用程序执行时所需的环境，由 Java 虚拟机（JVM）、核心类、支持文件组成。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>Java Virtual Machine，即java虚拟机，JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul><li>数值型：整型（byte, short,int,long）、浮点型（float, double）</li><li>字符型：char</li><li>布尔型：boolean</li></ul><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><p>对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><ul><li>类：class</li><li>接口：interface</li><li>数组： array</li></ul><h2 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h2><p>当容量小的数据类型的变量与容量大的数据类型的变量进行运算时，结果自动提升为容量大的数据类型</p><p>（容量指表示数的范围大小）</p><p>注意，当byte、short、char三种类型进行运算时，结果为int型</p><p>Byte,char,short  -&gt; int -&gt; long  -&gt;  float -&gt; double</p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>需要使用强转符： ()</p><p>可能导致精度损失</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;Hello world&lt;/h1&gt;&lt;p&gt;Java程序的开发过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 JDK （调</summary>
      
    
    
    
    <category term="Java" scheme="http://jiezai.online/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>n皇后</title>
    <link href="http://jiezai.online/2020/10/20/n%E7%9A%87%E5%90%8E/"/>
    <id>http://jiezai.online/2020/10/20/n%E7%9A%87%E5%90%8E/</id>
    <published>2020-10-20T11:47:52.000Z</published>
    <updated>2020-10-20T12:06:42.128Z</updated>
    
    <content type="html"><![CDATA[<p>n皇后问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//输入n</span></span><br><span class="line"><span class="keyword">int</span> cnt;<span class="comment">//记录解个数</span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">12</span>];<span class="comment">//记录皇后位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否满足条件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(vis[row] - vis[i]) == <span class="built_in">abs</span>(row-i) || vis[row] == vis[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归摆放皇后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//遍历列的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">vis[row] = i;</span><br><span class="line"><span class="keyword">if</span> (check(row)) &#123;</span><br><span class="line"><span class="keyword">if</span> (row == n) &#123;<span class="comment">//到达最后一行</span></span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dfs(row + <span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里hdu-2553需要打表避免超时</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">n = i;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">arr[i] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。（每个皇后不在同一行、同一列以及对角线上）<br>递归写法:</p><ol><li>将棋盘存储为一个一维数组啊a[n],第i个元素表示第i行的皇后位置</li><li>遍历下一行位置,判断是否满足条件,是则记录一个解,直到走到最后一行</li><li>冲突计算: ①行列相减的绝对值相等判断是否在对角线 ②列是否相等</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;n皇后问题&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue 组件</title>
    <link href="http://jiezai.online/2020/03/22/Vue-%E7%BB%84%E4%BB%B6/"/>
    <id>http://jiezai.online/2020/03/22/Vue-%E7%BB%84%E4%BB%B6/</id>
    <published>2020-03-22T08:15:41.000Z</published>
    <updated>2020-10-20T10:28:54.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>组件是可复用的Vue实例，可以扩展 HTML 元素，封装可重用的代码，通过不同的组件划分不同的功能模块</p><ul><li>模块化：从代码逻辑划分，方便分层开发，保证每个功能模块的职能单一</li><li>组件化：从UI界面划分，方便复用</li></ul><h1 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h1><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><h3 id="vue-extend"><a href="#vue-extend" class="headerlink" title="vue.extend"></a>vue.extend</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> com = Vue.extend(&#123;</span><br><span class="line">template: <span class="string">&#x27;&lt;p&gt;hahahah&lt;/p&gt;&#x27;</span>, <span class="comment">// 指定组件的html结构</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;mycom&#x27;</span>,com)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在html中以html标签引入,若以驼峰形式命名，则引用时改为小写，使用-连接</span></span><br><span class="line">&lt;mycom&gt;&lt;/mycom&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue-component"><a href="#vue-component" class="headerlink" title="vue.component"></a>vue.component</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;mycom&#39;,&#123;</span><br><span class="line">template: &#39;&lt;p&gt;hahahah&lt;&#x2F;p&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在vue实例外使用template元素，定义html模板结构</span></span><br><span class="line">&lt;template id=<span class="string">&#x27;tmp&#x27;</span>&gt;</span><br><span class="line">&lt;p&gt;hahahah&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;mycom&#x27;</span>,&#123;</span><br><span class="line">template: <span class="string">&#x27;#tmp&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="私有组件"><a href="#私有组件" class="headerlink" title="私有组件"></a>私有组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 将只在父模板可用</span></span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><p>组件可以有自己的data数据，组件中的data必须是一个方法，且返回一个对象,用法与vue实例中的data一致。</p><p>将data定义为function是为了变量私有化，组件复用时不会互相影响，保证数据的独立性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;mycom&#x27;</span>,&#123;</span><br><span class="line">template: <span class="string">&#x27;&lt;p&gt;hahahah &#123;&#123;msg&#125;&#125;&lt;/p&gt;&#x27;</span>,</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">            msg: <span class="string">&#x27;wwuwu&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><h2 id="is属性"><a href="#is属性" class="headerlink" title="is属性"></a>is属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//is属性，用来指定要展示的组件id</span></span><br><span class="line"><span class="comment">//组件在 vm.componentId 变化时改变！</span></span><br><span class="line">&lt;component :is=<span class="string">&#x27;componentId&#x27;</span>&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><h1 id="组件间传值"><a href="#组件间传值" class="headerlink" title="组件间传值"></a>组件间传值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">    &lt;com1 v-bind: parentMsg=<span class="string">&#x27;msg&#x27;</span> @func=<span class="string">&#x27;getMsgFromSon&#x27;</span>&gt;&lt;/com1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=<span class="string">&quot;&#x27;tmp1&#x27;&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;子元素 --- &#123;&#123;parentMsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> com1 = &#123;</span><br><span class="line">        template: <span class="string">&#x27;#tmp1&#x27;</span>,</span><br><span class="line">        data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">               msg: <span class="string">&#x27;childMsg&#x27;</span></span><br><span class="line">           &#125;            </span><br><span class="line">        &#125;,</span><br><span class="line">        props: [<span class="string">&#x27;parentMsg&#x27;</span>],</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">sendMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;func&#x27;</span>,<span class="built_in">this</span>.msg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">msg: <span class="string">&#x27;hahha&#x27;</span>,</span><br><span class="line">            childMsg: <span class="string">&#x27;xixiixi&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="function"><span class="title">getMsgFromSon</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.childMsg = data;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            com1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;组件是可复用的Vue实例，可以扩展 HTML 元素，封装可重用的代码，通过不同的组件划分不同的功能模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化：从</summary>
      
    
    
    
    <category term="Vue" scheme="http://jiezai.online/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://jiezai.online/tags/vue/"/>
    
  </entry>
  
</feed>
